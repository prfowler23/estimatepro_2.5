{
  "timestamp": "2025-08-09T23:10:54.428Z",
  "summary": {
    "totalQueries": 2847,
    "nPlusOneRisks": 4,
    "connectionPoolingFiles": 15,
    "transactionPatterns": 9,
    "indexingRecommendations": 0,
    "optimizationOpportunities": 128,
    "averageQueryComplexity": "1.71",
    "highRiskQueries": 35
  },
  "queryAnalysis": {
    "totalQueries": 2847,
    "patterns": {
      "ai-cache-service.ts_1": {
        "file": "lib/services/ai-cache-service.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_2": {
        "file": "lib/services/ai-cache-service.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_3": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "`;\n  }\n\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      has...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_4": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "`);\n        if (redisEntry && Date.now() - redisEntry.timestamp <= redisEntry.ttl) {\n          // Promote to L1 cache\n          this.cache.set(key, redisEntry);\n\n          redisEntry.hits++;\n         ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_5": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "`, error);\n        // Continue without Redis\n      }\n    }\n\n    // Cache miss\n    this.stats.cacheMisses++;\n    this.updateStats();\n    return null;\n  }\n\n  /**\n   * Store result in both L1 (memory) an...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_6": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "`, {\n          key: key.substring(0, 20) + \"...\",\n          ttl: ttl / 1000 / 60, // minutes\n          cost,\n          tokens: tokens.input + tokens.output,\n          l1: true,\n          l2: false,\n  ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_7": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "`, {\n        remaining: this.cache.size,\n      });\n    }\n  }\n\n  /**\n   * Update cache statistics\n   */\n  private updateStats(): void {\n    if (this.stats.totalRequests > 0) {\n      this.stats.hitRate ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_8": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "`;\n  }\n\n  /**\n   * Clear all cache entries\n   */\n  clear(): void {\n    this.cache.clear();\n    this.stats = {\n      totalRequests: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      hitRate: 0,\n      ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_9": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "\",\n  ): Promise<unknown | null> {\n    const startTime = Date.now();\n    const key = this.generateCacheKey(type, params, model);\n\n    this.stats.totalRequests++;\n\n    // L1 Cache (Memory) - Ultra fast\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_10": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "\",\n      });\n\n      return memoryEntry.data;\n    }\n\n    // L2 Cache (Redis) - Network cache\n    if (this.useRedis) {\n      try {\n        const redisEntry = await redisClient.getJSON<CacheEntry>(`ai:${...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_11": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "\",\n          });\n\n          return redisEntry.data;\n        }\n      } catch (error) {\n        logger.warn(`Redis cache error for ${type}:`, error);\n        // Continue without Redis\n      }\n    }\n\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-cache-service.ts_12": {
        "file": "lib/services/ai-cache-service.ts",
        "query": "\",\n          ttl: ttl / 1000 / 60, // minutes\n          cost,\n          tokens: tokens.input + tokens.output,\n          l1: true,\n          l2: false,\n        });\n      }\n    }\n\n    // Cleanup old ent...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_13": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_14": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select()\n      .eq(\"id\", conversationId)\n      .eq(\"user_id\", userId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_15": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select()\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: true })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_16": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select(\"*, ai_messages(content)\", { count: \"exact\" })\n      .eq(\"user_id\", userId)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_17": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_18": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_19": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select()\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: false })\n      .limit(limit)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_20": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".select(\n        `\n        *,\n        ai_messages!inner(content)\n      `,\n      )\n      .eq(\"user_id\", userId)\n      .or(\n        `title.ilike.%${searchTerm}%,ai_messages.content.ilike.%${searchTerm}%...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_21": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".insert({\n        user_id: userId,\n        title: validated.title || null,\n        metadata: validated.metadata || {},\n      })\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_22": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".insert({\n        conversation_id: validated.conversation_id,\n        role: validated.role,\n        content: validated.content,\n        tokens_used: validated.tokens_used || null,\n        model: valid...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_23": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".update({\n        title: validated.title,\n        metadata: validated.metadata,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", conversationId)\n      .eq(\"user_id\", userId)\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_24": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": ".delete()\n      .eq(\"id\", conversationId)\n      .eq(\"user_id\", userId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_25": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "`);\n    }\n\n    // Add ordering and pagination\n    query = query\n      .order(orderBy, { ascending: order === \"asc\" })\n      .range(offset, offset + limit - 1);\n\n    const { data, count, error } = awai...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [
          "ai_conversations",
          "ai_conversations",
          "ai_messages",
          "ai_messages",
          "ai_conversations"
        ],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_26": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\";\nimport {\n  AIConversation,\n  AIMessage,\n  AIConversationWithMessages,\n  AIConversationSummary,\n  CreateConversationInput,\n  CreateMessageInput,\n  UpdateConversationInput,\n  ConversationListParams,\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_27": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .insert({\n        user_id: userId,\n        title: validated.title || null,\n        metadata: validated.metadata || {},\n      })\n      .select()\n      .single();\n\n    if (error) {\n      consol...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_28": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .select()\n      .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_29": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .select()\n      .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_30": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_31": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\");\n    }\n\n    // Transform data to include summary info\n    const conversations: AIConversationSummary[] = (data || []).map((conv) => {\n      const messages = conv.ai_messages as any[];\n      const l...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_32": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n          : null,\n      };\n    });\n\n    return {\n      conversations,\n      total: count || 0,\n      page,\n      limit,\n      hasMore: offset + conversations.length < (count || 0),\n    };\n  }\n\n  /*...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_33": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .update({\n        title: validated.title,\n        metadata: validated.metadata,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_34": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\", userId)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_35": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\"Failed to update conversation\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_36": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .delete()\n      .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_37": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\"Failed to delete conversation\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_38": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .insert({\n        conversation_id: validated.conversation_id,\n        role: validated.role,\n        content: validated.content,\n        tokens_used: validated.tokens_used || null,\n        mod...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_39": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .select()\n      .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-conversation-service.ts_40": {
        "file": "lib/services/ai-conversation-service.ts",
        "query": "\")\n      .select(\n        `\n        *,\n        ai_messages!inner(content)\n      `,\n      )\n      .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_41": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": ".select(\"created_at, total_amount, status, service_type\")\n        .eq(\"status\", \"accepted\")\n        .gte(\n          \"created_at\",\n          new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimate_services", "estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_42": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": ".select(\"created_at, total_amount, status\")\n        .gte(\"created_at\", since),\n\n      revenue: this.supabase\n        .from(\"estimates\")\n        .select(\"created_at, total_amount\")\n        .eq(\"status\"...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates", "analytics_events"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_43": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "`,\n        );\n    }\n\n    return anomalies;\n  }\n\n  private async fetchHistoricalData(predictionType: string): Promise<any[]> {\n    const dataQueries: Record<string, any> = {\n      revenue_forecast: thi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates", "estimate_services", "estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_44": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "`);\n    }\n\n    return data || [];\n  }\n\n  private async fetchRecentData(\n    dataSource: string,\n    timeWindow: string,\n  ): Promise<any[]> {\n    const timeWindowMs = this.parseTimeWindow(timeWindow);...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates", "estimates", "analytics_events"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_45": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "`;\n\n      if (!grouped[monthKey]) {\n        grouped[monthKey] = [];\n      }\n      grouped[monthKey].push(record);\n    });\n\n    return grouped;\n  }\n\n  private calculateSeasonalMultipliers(\n    monthlyD...",
        "operationType": "unknown",
        "complexity": 6,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_46": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_47": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_48": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\")\n        .select(\n          \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_49": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_50": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_51": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-predictive-analytics-service.ts_52": {
        "file": "lib/services/ai-predictive-analytics-service.ts",
        "query": "\"Update thresholds based on business changes\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_53": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_54": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", workflowId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_55": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".select(\"aiInteractions\")\n      .eq(\"id\", workflowId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_56": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", workflowId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_57": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", workflowId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_58": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".select(\"stepDurations\")\n      .eq(\"id\", workflowId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_59": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".insert([workflowAnalytics])\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_60": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".update({\n        stepDurations,\n        currentStep: parseInt(stepId.replace(\"step\", \"\")),\n        updatedAt: new Date(),\n      })\n      .eq(\"id\", workflowId)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_61": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".update({\n        aiInteractions,\n        updatedAt: new Date(),\n      })\n      .eq(\"id\", workflowId)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_62": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".update({\n        endTime,\n        totalDuration,\n        completionRate: 100,\n        validationScore: qualityScore,\n        usabilityScore,\n        updatedAt: new Date(),\n      })\n      .eq(\"id\", wo...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_63": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": ".update({\n          stepDurations,\n          updatedAt: new Date(),\n        })\n        .eq(\"id\", workflowId)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_64": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\";\n\nexport class AnalyticsDataCollector {\n  private supabase;\n\n  constructor() {\n    this.supabase = createBrowserClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_65": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .insert([workflowAnalytics])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data.id;\n  }\n\n  /**\n   * Update workflow step information\n   */\n  async updateWorkflowSte...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_66": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_67": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    // Update step durations\n    const stepDurations = analytics.stepDurations || [];\n    const existingStepIndex = stepDuration...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_68": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .update({\n        stepDurations,\n        currentStep: parseInt(stepId.replace(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_69": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")),\n        updatedAt: new Date(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_70": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId);\n\n    if (updateError) throw updateError;\n  }\n\n  /**\n   * Record AI interaction data\n   */\n  async recordAIInteraction(\n    workflowId: string,\n    interaction: Omit<AIInteractionSummar...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_71": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_72": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const aiInteractions = analytics.aiInteractions || [];\n    aiInteractions.push({\n      ...interaction,\n      timestamp: new ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_73": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .update({\n        aiInteractions,\n        updatedAt: new Date(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_74": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId);\n\n    if (updateError) throw updateError;\n  }\n\n  /**\n   * Complete workflow tracking\n   */\n  async completeWorkflow(\n    workflowId: string,\n    qualityScore: number,\n    usabilityScore...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_75": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_76": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const endTime = new Date();\n    const totalDuration = endTime.getTime() - analytics.startTime.getTime();\n\n    const { error:...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_77": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .update({\n        endTime,\n        totalDuration,\n        completionRate: 100,\n        validationScore: qualityScore,\n        usabilityScore,\n        updatedAt: new Date(),\n      })\n      .eq...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_78": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId);\n\n    if (updateError) throw updateError;\n  }\n\n  /**\n   * Get workflow analytics data\n   */\n  async getWorkflowAnalytics(workflowId: string): Promise<WorkflowAnalytics> {\n    const { da...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_79": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_80": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_81": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\", workflowId)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const stepDurations = analytics.stepDurations || [];\n    const stepIndex = stepDurations.findIndex(\n      (s: StepDuration) ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-data-collector.ts_82": {
        "file": "lib/services/analytics/analytics-data-collector.ts",
        "query": "\")\n        .update({\n          stepDurations,\n          updatedAt: new Date(),\n        })\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_83": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "supabase.from(\"workflow_analytics\").select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_84": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "supabase.from(\"workflow_analytics\").select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_85": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "supabase.from(\"workflow_analytics\").select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_86": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_87": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_88": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_89": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "`,\n      [],\n    );\n  }\n\n  /**\n   * Get time series data for analytics charts\n   */\n  async getTimeSeriesData(\n    metric: string,\n    granularity: \"hour\" | \"day\" | \"week\" | \"month\",\n    userId?: stri...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_90": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "`,\n      [],\n    );\n  }\n\n  /**\n   * Generate predictive insights\n   */\n  async generatePredictiveInsights(\n    userId?: string,\n    workflowType?: string,\n  ): Promise<PredictiveInsight[]> {\n    retur...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_91": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_92": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-insights-service.ts_93": {
        "file": "lib/services/analytics/analytics-insights-service.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_94": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": "supabase.from(\"workflow_analytics\").select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_95": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": ".select(\"*\")\n          .eq(\"userId\", userId)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_96": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": ".select(\"*\")\n          .eq(\"teamId\", teamId)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_97": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_98": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": "`,\n      this.getEmptyUserStats(userId),\n    );\n  }\n\n  /**\n   * Get team analytics data\n   */\n  async getTeamAnalytics(teamId: string): Promise<TeamAnalytics> {\n    return this.cacheService.withFallba...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_99": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": "`,\n      this.getEmptyTeamAnalytics(teamId),\n    );\n  }\n\n  /**\n   * Get workflow benchmarks\n   */\n  async getWorkflowBenchmarks(\n    userId?: string,\n    timeframe?: \"week\" | \"month\" | \"quarter\",\n  ):...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_100": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_101": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-stats-service.ts_102": {
        "file": "lib/services/analytics/analytics-stats-service.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_103": {
        "file": "lib/services/analytics/index.ts",
        "query": "`,\n      false, // Not retryable for creation operations\n    );\n  }\n\n  /**\n   * Update workflow step information\n   */\n  async updateWorkflowStep(\n    workflowId: string,\n    stepId: string,\n    stepN...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_104": {
        "file": "lib/services/analytics/index.ts",
        "query": "\";\n\n/**\n * Main Analytics Service Orchestrator\n * Coordinates all analytics sub-services with caching and error handling\n */\nexport class AnalyticsOrchestrator {\n  private dataCollector: AnalyticsData...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-backup.ts_105": {
        "file": "lib/services/analytics-service-backup.ts",
        "query": "\";\n\n// ==============================================================================\n// ANALYTICS SERVICE LEGACY METHODS\n// ===========================================================================...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_106": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select()\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_107": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", workflowId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_108": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"aiInteractions\")\n        .eq(\"id\", workflowId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_109": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", workflowId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_110": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"*\")\n          .order(\"createdAt\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_111": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"*\")\n          .eq(\"userId\", userId)\n          .order(\"createdAt\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_112": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"*\")\n        .eq(\"userId\", userId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_113": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".select(\"id\")\n        .limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_114": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".insert([workflowAnalytics])\n          .select()\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_115": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".update({\n          stepDurations,\n          currentStep:\n            parseInt(stepId.replace(\"step-\", \"\")) || analytics.currentStep,\n          updatedAt: new Date(),\n        })\n        .eq(\"id\", work...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_116": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".update({\n          aiInteractions,\n          updatedAt: new Date(),\n        })\n        .eq(\"id\", workflowId)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_117": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".update({\n          endTime,\n          totalDuration,\n          completionRate: 100,\n          completionQuality: completionData.completionQuality,\n          estimateValue: completionData.estimateValu...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_118": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_119": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_120": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".delete(requestKey)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_121": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".delete(requestKey)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_122": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".delete(requestKey)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_123": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": ".delete(subscriptionId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_124": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`, { retryError });\n          }\n        });\n      }\n\n      return this.getEmptyFallback(fallbackKey) as T;\n    }\n  }\n\n  private async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    retries ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["analytics", "workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_125": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`,\n      false,\n    );\n  }\n\n  async updateWorkflowStep(\n    workflowId: string,\n    stepId: string,\n    stepName: string,\n    stepData: Partial<StepDuration>,\n  ): Promise<void> {\n    try {\n      cons...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [
          "workflow_analytics",
          "workflow_analytics",
          "workflow_analytics"
        ],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_126": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`,\n        timestamp: new Date(),\n        duration: 0,\n        tokensUsed: 0,\n        cost: 0,\n        accuracy: 0,\n        userAcceptanceRate: 0,\n        confidence: 0,\n        ...interaction,\n      ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [
          "workflow_analytics",
          "workflow_analytics",
          "workflow_analytics"
        ],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_127": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`;\n    const cached = this.getCached<WorkflowAnalytics[]>(cacheKey);\n    if (cached) return cached;\n\n    return this.withFallback(\n      async () => {\n        let query = this.supabase\n          .from...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": ["workflow_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_128": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`;\n    const cached = this.getCached<UserWorkflowStats>(cacheKey);\n    if (cached) return cached;\n\n    return this.withFallback(\n      async () => {\n        const { data: workflows, error } = await th...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": ["workflow_analytics", "analytics", "analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_129": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`);\n          }\n\n          const data = await response.json();\n\n          // Cache successful GET requests\n          if (mergedConfig.cache && options.method === \"GET\") {\n            this.apiCache.set...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_130": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`,\n      );\n      this.connectionPromise = null;\n      this.connect();\n    }, this.reconnectInterval);\n  }\n\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if...",
        "operationType": "update",
        "complexity": 11,
        "estimatedLatency": 140,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "analytics-service-unified.ts_131": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`);\n      }\n\n      // Notify subscribers\n      this.notifySubscribers(message);\n    } catch (error) {\n      this.logger.error(\"Error handling WebSocket message\", { error, data });\n    }\n  }\n\n  private...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_132": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`, {\n      metrics,\n      filters,\n    });\n    return subscriptionId;\n  }\n\n  public unsubscribe(subscriptionId: string): void {\n    this.subscriptions.delete(subscriptionId);\n    this.logger.debug(`",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_133": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`;\n    const cached = this.preferencesCache.get(cacheKey);\n    if (cached) return cached;\n\n    try {\n      const { data, error } = await this.supabase\n        .from(\"user_analytics_preferences\")\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["user_analytics_preferences", "user_analytics_preferences"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_134": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "`Updated user preferences for ${userId}`",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_135": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "'t retry on abort\n          if (error instanceof Error && error.name === \"AbortError\") {\n            break;\n          }\n\n          // Wait before retrying\n          if (attempt < mergedConfig.retries!...",
        "operationType": "delete",
        "complexity": 7,
        "estimatedLatency": 105,
        "tables": ["analytics"],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_136": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"metric_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_137": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"quality_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_138": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"prediction_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_139": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\";\n  };\n  customViews: {\n    id: string;\n    name: string;\n    config: any;\n    isDefault: boolean;\n  }[];\n}\n\ninterface PersonalizationContext {\n  userId: string;\n  role: string;\n  permissions: string...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_140": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"]).optional(),\n  confidence: z.number().min(0).max(1).optional(),\n  metadata: z.record(z.any()).optional(),\n});\n\nconst QualityUpdateSchema = z.object({\n  score: z.number().min(0).max(100),\n  status: ...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_141": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"]),\n  issues: z.number().min(0),\n  recommendations: z.array(z.string()),\n});\n\nconst PredictionUpdateSchema = z.object({\n  predictionId: z.string(),\n  type: z.string(),\n  overallScore: z.number(),\n  k...",
        "operationType": "unknown",
        "complexity": 1,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_142": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"]),\n  }),\n  customViews: z.array(\n    z.object({\n      id: z.string(),\n      name: z.string(),\n      config: z.any(),\n      isDefault: z.boolean(),\n    }),\n  ),\n});\n\n// ==============================...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_143": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")) {\n      return [];\n    }\n    return null;\n  }\n\n  // ==============================================================================\n  // WORKFLOW ANALYTICS METHODS (from analytics-service.ts)\n  // ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_144": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n          .insert([workflowAnalytics])\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data.id;\n      },\n      `workflow_tracking_${estimateId}`,\n      `tem...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_145": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_146": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", workflowId)\n        .single();\n\n      if (fetchError) throw fetchError;\n\n      const stepDurations = analytics.stepDurations || [];\n      const existingStepIndex = stepDurations.findIndex(\n        ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_147": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .update({\n          stepDurations,\n          currentStep:\n            parseInt(stepId.replace(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_148": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")) || analytics.currentStep,\n          updatedAt: new Date(),\n        })\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_149": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", workflowId);\n\n      if (updateError) throw updateError;\n    } catch (error) {\n      this.logger.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_150": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_151": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", workflowId)\n        .single();\n\n      if (fetchError) throw fetchError;\n\n      const aiInteractions = analytics.aiInteractions || [];\n      aiInteractions.push({\n        interactionId: `ai-${Date.n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_152": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .update({\n          aiInteractions,\n          updatedAt: new Date(),\n        })\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_153": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", workflowId);\n\n      if (updateError) throw updateError;\n    } catch (error) {\n      this.logger.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_154": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_155": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", workflowId)\n        .single();\n\n      if (fetchError) throw fetchError;\n\n      const startTime = new Date(analytics.startTime);\n      const totalDuration = Math.floor(\n        (endTime.getTime() - ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_156": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .update({\n          endTime,\n          totalDuration,\n          completionRate: 100,\n          completionQuality: completionData.completionQuality,\n          estimateValue: completionData.e...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_157": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", workflowId);\n\n      if (updateError) throw updateError;\n    } catch (error) {\n      this.logger.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_158": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_159": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_160": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\") {\n            this.apiCache.set(cacheKey, data, mergedConfig.cacheTimeout);\n          }\n\n          this.activeRequests.delete(requestKey);\n\n          return {\n            data: data.data || data,\n ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_161": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\") {\n            break;\n          }\n\n          // Wait before retrying\n          if (attempt < mergedConfig.retries!) {\n            await this.delay(mergedConfig.retryDelay! * Math.pow(2, attempt));\n ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_162": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\");\n    } catch (error) {\n      clearTimeout(timeoutId);\n      this.activeRequests.delete(requestKey);\n\n      const errorMessage =\n        error instanceof Error ? error.message : \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_163": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"metric_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_164": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"quality_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_165": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"prediction_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_166": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", { error, data });\n    }\n  }\n\n  private handleMetricUpdate(data: any): void {\n    try {\n      const validatedData = MetricUpdateSchema.parse(data);\n      this.logger.debug(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_167": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"Invalid metric update data\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_168": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"Received quality update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_169": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"Invalid quality update data\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_170": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"Received prediction update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_171": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\"Invalid prediction update data\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_172": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", { error, data });\n    }\n  }\n\n  private processMessageQueue(): void {\n    while (this.messageQueue.length > 0 && this.isConnected) {\n      const message = this.messageQueue.shift();\n      if (messag...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_173": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_174": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\", { error, userId });\n      return this.getDefaultPreferences(userId);\n    }\n  }\n\n  async updateUserPreferences(\n    userId: string,\n    preferences: Partial<UserPreferences>,\n  ): Promise<boolean> {...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_175": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .upsert(validatedPreferences);\n\n      if (error) throw error;\n\n      // Update cache\n      this.preferencesCache.set(\n        `user_preferences_${userId}`,\n        validatedPreferences,\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "analytics-service-unified.ts_176": {
        "file": "lib/services/analytics-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_177": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": ".select(\"version, updated_at\")\n          .eq(\"estimate_id\", estimateId)\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_178": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .order(\"created_at\", { ascending: false })\n        .limit(1)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_179": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": ".insert({\n          estimate_id: estimateId,\n          local_data: localData as any,\n          server_data: serverData as any,\n          conflicted_fields: conflictedFields,\n          created_at: new ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_180": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": ".delete()\n            .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_181": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": ".delete()\n          .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_182": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "`,\n    };\n  }\n\n  /**\n   * Smart merge of data with different strategies for different field types\n   */\n  private static mergeData(\n    localData: GuidedFlowData,\n    serverData: GuidedFlowData,\n    c...",
        "operationType": "select",
        "complexity": 7,
        "estimatedLatency": 95,
        "tables": ["estimation_flow_conflicts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_183": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "'t check\n    }\n  }\n\n  /**\n   * Handle conflicts automatically or prepare for manual resolution\n   */\n  static async handleConflict(\n    estimateId: string,\n    localData: GuidedFlowData,\n    stepId: s...",
        "operationType": "select",
        "complexity": 13,
        "estimatedLatency": 140,
        "tables": ["estimation_flow_conflicts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "auto-save-conflict-resolver.ts_184": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_185": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\", estimateId)\n          .single();\n\n        if (error) throw error;\n        return data;\n      });\n\n      if (result.success && result.data) {\n        const serverVersion = (result.data as any).versi...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_186": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\"scopeDetails.selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_187": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\")\n        .insert({\n          estimate_id: estimateId,\n          local_data: localData as any,\n          server_data: serverData as any,\n          conflicted_fields: conflictedFields,\n          creat...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_188": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\",\n        `Manual conflict resolution: ${resolution.resolutionNotes}`,\n      );\n\n      if (success) {\n        // Clear conflict state\n        AutoSaveStateManager.updateSaveState(estimateId, {\n      ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_189": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\")\n            .delete()\n            .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_190": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_191": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\")\n          .delete()\n          .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-conflict-resolver.ts_192": {
        "file": "lib/services/auto-save/auto-save-conflict-resolver.ts",
        "query": "\", estimateId);\n\n        if (error) throw error;\n      });\n\n      // Clear conflict state\n      AutoSaveStateManager.updateSaveState(estimateId, {\n        conflictDetected: false,\n      });\n\n      ret...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_193": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": ".select(\"estimate_id\")\n        .eq(\"id\", estimateId.replace(\"temp-estimate-\", \"\"))\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_194": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": ".select(\"id\")\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_195": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": ".select(\"id\")\n          .eq(\"id\", actualEstimateId)\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_196": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_197": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": ".insert({\n            quote_number: estimateId,\n            customer_name: \"Estimate Customer\",\n            customer_email: \"temp@example.com\", // Will be filled when customer is selected\n            ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_198": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": ".insert(insertPayload)",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_199": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "`,\n            building_address: \"TBD\", // Required field\n            building_height_stories: 1, // Required field with default\n            created_by: userId,\n            total_price: 0, // Default ...",
        "operationType": "select",
        "complexity": 5,
        "estimatedLatency": 90,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_200": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "'re offline and queue for later sync\n    if (!navigator.onLine) {\n      console.log(\"Device offline, queuing estimate save for later sync\");\n\n      // Queue the save for offline sync\n      offlineUtil...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": ["Supabase"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_201": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\", error);\n      AutoSaveStateManager.updateSaveState(estimateId, {\n        saveError: error instanceof Error ? error.message : \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_202": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\");\n    }\n\n    // Check if save is already in progress\n    const existingSave = AutoSaveStateManager.getPendingSave(estimateId);\n    if (existingSave) {\n      return existingSave;\n    }\n\n    // Create...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_203": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\");\n\n        if (attempt < config.maxRetries) {\n          await AutoSaveStateManager.delay(config.retryDelay * attempt); // Exponential backoff\n        }\n      }\n    }\n\n    // All attempts failed\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_204": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\");\n\n      // Queue the save for offline sync\n      offlineUtils.queueEstimateSave(estimateId, {\n        flow_data: config.compressionEnabled\n          ? AutoSaveStateManager.compressData(data)\n      ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_205": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\",\n\n        // Store the complete flow data in the main JSONB column\n        flow_data: saveData.flow_data,\n\n        // Store flow data in the existing JSONB columns based on step (legacy compatibilit...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_206": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_207": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\")\n          .insert({\n            quote_number: estimateId,\n            customer_name: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_208": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\", // Will be filled when customer is selected\n            building_name: `Building for ${estimateId}`,\n            building_address: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_209": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\", // Required field\n            building_height_stories: 1, // Required field with default\n            created_by: userId,\n            total_price: 0, // Default to 0\n          })\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_210": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_211": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\",\n          estimateLookupErr,\n        );\n      }\n\n      if (!existingEstimate) {\n        // Create a minimal placeholder estimate so the FK constraint passes.\n        const placeholderQuote = `AUTO-...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_212": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\")\n          .insert(insertPayload);\n\n        if (createEstimateErr) {\n          console.error(\n            \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_213": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\"Database schema mismatch. Auto-save disabled until schema is updated.\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_214": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-persistence-engine.ts_215": {
        "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
        "query": "\" in dbData.ai_extracted_data\n      ) {\n        flowData.initialContact = dbData.ai_extracted_data\n          .initialContact as any;\n      }\n\n      if (\n        dbData.selected_services &&\n        Arr...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-state-manager.ts_216": {
        "file": "lib/services/auto-save/auto-save-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-state-manager.ts_217": {
        "file": "lib/services/auto-save/auto-save-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-state-manager.ts_218": {
        "file": "lib/services/auto-save/auto-save-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-state-manager.ts_219": {
        "file": "lib/services/auto-save/auto-save-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-state-manager.ts_220": {
        "file": "lib/services/auto-save/auto-save-state-manager.ts",
        "query": "\";\n\nexport interface AutoSaveState {\n  lastSaved: Date;\n  isDirty: boolean;\n  isSaving: boolean;\n  saveError: string | null;\n  conflictDetected: boolean;\n  localVersion: number;\n  serverVersion: numbe...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_221": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "supabase.from(\"estimation_flow_versions\").insert({\n        estimate_id: estimateId,\n        version,\n        data: config.compressionEnabled\n          ? AutoSaveStateManager.compressData(data)\n       ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["estimation_flow_versions"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_222": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".select(\"id\")\n        .eq(\"estimate_id\", estimateId)\n        .order(\"version\", { ascending: false })\n        .range(config.maxVersions, 1000)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_223": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .order(\"version\", { ascending: false })\n        .limit(limit)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_224": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .eq(\"version\", version)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_225": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".select(\"timestamp, data\")\n        .eq(\"estimate_id\", estimateId)\n        .order(\"timestamp\", { ascending: true })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_226": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".insert({\n        estimate_id: estimateId,\n        version,\n        data: config.compressionEnabled\n          ? AutoSaveStateManager.compressData(data)\n          : data,\n        timestamp: new Date()....",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_227": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".delete()\n          .in(\"id\", idsToDelete)",
        "operationType": "delete",
        "complexity": 5,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_228": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": ".delete()\n          .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_229": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\").insert({\n        estimate_id: estimateId,\n        version,\n        data: config.compressionEnabled\n          ? AutoSaveStateManager.compressData(data)\n          : data,\n        timestamp: new Date(...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_230": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\", cleanupError);\n        // Continue - cleanup failure is not critical\n      }\n    });\n  }\n\n  /**\n   * Clean up old versions to maintain storage limits\n   */\n  private static async cleanupOldVersions...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_231": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_232": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\", { ascending: false })\n        .range(config.maxVersions, 1000);\n\n      if (selectError) throw selectError;\n\n      if (data && data.length > 0) {\n        const idsToDelete = data.map((v) => v.id);\n ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_233": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\")\n          .delete()\n          .in(\"",
        "operationType": "delete",
        "complexity": 5,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_234": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\", idsToDelete);\n\n        if (deleteError) throw deleteError;\n      }\n    });\n  }\n\n  /**\n   * Get version history for an estimate\n   */\n  static async getVersionHistory(\n    estimateId: string,\n    li...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_235": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_236": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_237": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\",\n        `Restored from version ${version}`,\n        currentState.localVersion + 1,\n        currentUserId,\n      );\n\n      // Update local version\n      AutoSaveStateManager.updateSaveState(estimate...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["version"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_238": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\",\n      ];\n\n      sections.forEach((section) => {\n        const v1Value = version1Data[section as keyof GuidedFlowData];\n        const v2Value = version2Data[section as keyof GuidedFlowData];\n\n      ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_239": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\")\n          .delete()\n          .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_240": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\"Failed to delete versions:\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-version-controller.ts_241": {
        "file": "lib/services/auto-save/auto-save-version-controller.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_242": {
        "file": "lib/services/auto-save/index.ts",
        "query": "\",\n    userId?: string,\n  ): Promise<boolean> {\n    return AutoSavePersistenceEngine.saveNow(\n      estimateId,\n      data,\n      stepId,\n      description,\n      userId,\n    );\n  }\n\n  /**\n   * Check ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_243": {
        "file": "lib/services/auto-save/index.ts",
        "query": "\",\n  ): Promise<ConflictResolution> {\n    return AutoSaveConflictResolver.resolveConflict(\n      localData,\n      serverData,\n      strategy,\n    );\n  }\n\n  static async resolveConflictManually(\n    es...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_244": {
        "file": "lib/services/auto-save-service.ts",
        "query": "supabase.from(\"estimation_flow_versions\").insert({\n        estimate_id: estimateId,\n        version,\n        data: this.config.compressionEnabled ? this.compressData(data) : data,\n        timestamp: n...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["estimation_flow_versions"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_245": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"estimate_id\")\n            .eq(\"id\", estimateId.replace(\"temp-estimate-\", \"\"))\n            .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_246": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"id\")\n              .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_247": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"id\")\n            .eq(\"id\", actualEstimateId)\n            .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_248": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"version, updated_at\")\n          .eq(\"estimate_id\", estimateId)\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_249": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_250": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"id\")\n        .eq(\"estimate_id\", estimateId)\n        .order(\"version\", { ascending: false })\n        .range(this.config.maxVersions, 1000)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_251": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .order(\"version\", { ascending: false })\n        .limit(limit)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_252": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".insert({\n                quote_number: estimateId,\n                customer_name: \"Estimate Customer\",\n                customer_email: \"temp@example.com\", // Will be filled when customer is selected\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_253": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".insert(insertPayload)",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_254": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".insert({\n        estimate_id: estimateId,\n        version,\n        data: this.config.compressionEnabled ? this.compressData(data) : data,\n        timestamp: new Date().toISOString(),\n        user_id:...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_255": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".insert({\n          estimate_id: estimateId,\n          local_data: localData as any,\n          server_data: serverData as any,\n          conflicted_fields: conflictedFields,\n          created_at: new ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_256": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_257": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_258": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_259": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_260": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_261": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete()\n          .in(\"id\", idsToDelete)",
        "operationType": "delete",
        "complexity": 5,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_262": {
        "file": "lib/services/auto-save-service.ts",
        "query": ".delete()\n            .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_263": {
        "file": "lib/services/auto-save-service.ts",
        "query": "`,\n                building_address: \"TBD\", // Required field\n                building_height_stories: 1, // Required field with default\n                created_by: userId,\n                total_price...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["Supabase"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_264": {
        "file": "lib/services/auto-save-service.ts",
        "query": "`.\n      // ---------------------------------------------------------------------------\n      try {\n        const { data: existingEstimate, error: estimateLookupErr } =\n          await supabase\n      ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_265": {
        "file": "lib/services/auto-save-service.ts",
        "query": "`;\n          const insertPayload: any = {\n            id: actualEstimateId,\n            quote_number: placeholderQuote,\n            customer_name: \"New Customer\",\n            customer_email: \"placehol...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": ["estimates", "estimation_flows", "estimation_flows"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_266": {
        "file": "lib/services/auto-save-service.ts",
        "query": "`,\n    };\n  }\n\n  // Smart merge of data\n  private static mergeData(\n    localData: GuidedFlowData,\n    serverData: GuidedFlowData,\n    conflictedFields: string[],\n  ): GuidedFlowData {\n    const merge...",
        "operationType": "select",
        "complexity": 8,
        "estimatedLatency": 105,
        "tables": [
          "estimation_flow_versions",
          "the",
          "estimation_flows",
          "database",
          "estimation_flow_conflicts",
          "estimation_flow_versions",
          "estimation_flow_versions"
        ],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "auto-save-service.ts_267": {
        "file": "lib/services/auto-save-service.ts",
        "query": "'re offline and queue for later sync\n    if (!navigator.onLine) {\n      logger.info(\"Device offline, queuing estimate save for later sync\", {\n        estimateId,\n      });\n\n      // Queue the save for...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [
          "estimation_flows",
          "estimates",
          "Supabase",
          "estimates",
          "estimates"
        ],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_268": {
        "file": "lib/services/auto-save-service.ts",
        "query": "'t throw - just log and continue\n        logger.warn(\"Auto-save failed, but continuing application\", {\n          error: saveError,\n          message: saveError.message,\n          estimateId,\n        }...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimation_flows"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_269": {
        "file": "lib/services/auto-save-service.ts",
        "query": "'t exist, log and continue\n        if (\n          error.message.includes(\"does not exist\") ||\n          error.code === \"PGRST106\"\n        ) {\n          logger.warn(\"Version control table missing - ski...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [
          "the",
          "estimation_flows",
          "database",
          "estimation_flow_conflicts"
        ],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_270": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\";\n  resolvedData: GuidedFlowData;\n  conflictedFields: string[];\n  resolutionNotes?: string;\n}\n\nexport interface AutoSaveConfig {\n  saveInterval: number; // milliseconds\n  maxRetries: number;\n  retryD...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_271": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\",\n    );\n  }\n\n  // Stop auto-save for a specific estimation flow\n  static stopAutoSave(estimateId: string): void {\n    const interval = this.saveIntervals.get(estimateId);\n    if (interval) {\n      c...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_272": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", error, { estimateId });\n      this.updateSaveState(estimateId, {\n        saveError: error instanceof Error ? error.message : \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_273": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\");\n    }\n\n    // Check if save is already in progress\n    const existingSave = this.pendingSaves.get(estimateId);\n    if (existingSave) {\n      return existingSave;\n    }\n\n    // Create save promise\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_274": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\");\n\n        if (attempt < this.config.maxRetries) {\n          await this.delay(this.config.retryDelay * attempt); // Exponential backoff\n        }\n      }\n    }\n\n    // All attempts failed\n    this.u...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_275": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\");\n  }\n\n  // Perform the actual save operation\n  private static async performSave(\n    estimateId: string,\n    data: GuidedFlowData,\n    stepId: string,\n    description: string,\n    userId?: string,\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_276": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", {\n        estimateId,\n      });\n\n      // Queue the save for offline sync\n      offlineUtils.queueEstimateSave(estimateId, {\n        flow_data: this.config.compressionEnabled\n          ? this.compr...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_277": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n            .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_278": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n              .insert({\n                quote_number: estimateId,\n                customer_name: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_279": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", // Will be filled when customer is selected\n                building_name: `Building for ${estimateId}`,\n                building_address: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_280": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", // Required field\n                building_height_stories: 1, // Required field with default\n                created_by: userId,\n                total_price: 0, // Default to 0\n              })\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_281": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n            .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_282": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", {\n            error: estimateLookupErr,\n            estimateId,\n          });\n        }\n\n        if (!existingEstimate) {\n          // Create a minimal placeholder estimate so the FK constraint pas...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_283": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n            .insert(insertPayload);\n\n          if (createEstimateErr) {\n            logger.error(\n              \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_284": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\",\n\n        // Store the complete flow data in the main JSONB column\n        flow_data: saveData.flow_data,\n\n        // Store flow data in the existing JSONB columns based on step (legacy compatibilit...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_285": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\"Database schema mismatch. Auto-save disabled until schema is updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_286": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_287": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", estimateId)\n          .single();\n\n        if (error) throw error;\n        return data;\n      });\n\n      if (result.success && result.data) {\n        const serverVersion = (result.data as any).versi...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_288": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\"scopeDetails.selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_289": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\").insert({\n        estimate_id: estimateId,\n        version,\n        data: this.config.compressionEnabled ? this.compressData(data) : data,\n        timestamp: new Date().toISOString(),\n        user_i...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_290": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", {\n          error: cleanupError,\n          estimateId,\n        });\n        // Continue - cleanup failure is not critical\n      }\n    });\n  }\n\n  // Utility methods\n  private static updateSaveState(\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["the"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_291": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_292": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\" in dbData.ai_extracted_data\n      ) {\n        flowData.initialContact = dbData.ai_extracted_data\n          .initialContact as any;\n      }\n\n      if (\n        dbData.selected_services &&\n        Arr...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_293": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n        .insert({\n          estimate_id: estimateId,\n          local_data: localData as any,\n          server_data: serverData as any,\n          conflicted_fields: conflictedFields,\n          creat...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_294": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\") {\n        // Only throw if it's not a missing table error\n        throw error;\n      }\n    });\n  }\n\n  private static async cleanupOldVersions(estimateId: string): Promise<void> {\n    const supabase...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_295": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_296": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", { ascending: false })\n        .range(this.config.maxVersions, 1000);\n\n      if (selectError) throw selectError;\n\n      if (data && data.length > 0) {\n        const idsToDelete = data.map((v) => v.i...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_297": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n          .delete()\n          .in(\"",
        "operationType": "delete",
        "complexity": 5,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_298": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\", idsToDelete);\n\n        if (deleteError) throw deleteError;\n      }\n    });\n  }\n\n  private static getCurrentStepNumber(stepId: string): number {\n    const stepMap: Record<string, number> = {\n      \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_299": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\",\n        `Manual conflict resolution: ${resolution.resolutionNotes}`,\n      );\n\n      if (success) {\n        // Clear conflict state\n        this.updateSaveState(estimateId, { conflictDetected: fals...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_300": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n            .delete()\n            .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-save-service.ts_301": {
        "file": "lib/services/auto-save-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_302": {
        "file": "lib/services/core/base-service.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_303": {
        "file": "lib/services/core/base-service.ts",
        "query": ".delete(key))",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_304": {
        "file": "lib/services/core/base-service.ts",
        "query": ".delete(timer)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_305": {
        "file": "lib/services/core/base-service.ts",
        "query": "`, {\n        config: this.config,\n      });\n    }\n\n    // Setup cleanup on process exit\n    this.setupCleanup();\n  }\n\n  /**\n   * Cache management methods\n   */\n  protected getCached<T>(key: string): T...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_306": {
        "file": "lib/services/core/base-service.ts",
        "query": "`, {\n      key,\n      expiresAt: new Date(expiresAt),\n    });\n  }\n\n  protected clearCache(pattern?: string): void {\n    if (pattern) {\n      // Clear entries matching pattern\n      const keysToDelete:...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_307": {
        "file": "lib/services/core/base-service.ts",
        "query": "`);\n    }\n  }\n\n  /**\n   * Timer management for cleanup\n   */\n  protected addTimer(timer: NodeJS.Timeout): void {\n    this.timers.add(timer);\n  }\n\n  protected clearTimer(timer: NodeJS.Timeout): void {\n...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "base-service.ts_308": {
        "file": "lib/services/core/base-service.ts",
        "query": "\";\n\nexport interface ServiceConfig {\n  serviceName: string;\n  enableCaching?: boolean;\n  cacheTimeout?: number; // milliseconds\n  enableRetry?: boolean;\n  maxRetries?: number;\n  retryDelay?: number; /...",
        "operationType": "delete",
        "complexity": 7,
        "estimatedLatency": 105,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_309": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "`;\n    }\n\n    // Add confidence warnings\n    if (confidence < 0.7) {\n      warnings.push(\n        \"AI extraction confidence is low - please verify auto-populated services\",\n      );\n    }\n\n    if (com...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_310": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "\";\n\nexport interface CrossStepPopulationOptions {\n  enableServiceSuggestions?: boolean;\n  enableScopeGeneration?: boolean;\n  enableAddressValidation?: boolean;\n  enableTimelineEstimation?: boolean;\n}\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["Initial"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_311": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "\",\n          ],\n        },\n      };\n    }\n\n    const updatedFlowData = { ...flowData };\n    const populatedSteps: string[] = [];\n    const warnings: string[] = [];\n    const suggestions: string[] = []...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["extracted"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_312": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "\");\n        totalConfidence += scopeResult.confidence;\n        confidenceFactors++;\n\n        if (scopeResult.warnings) warnings.push(...scopeResult.warnings);\n        if (scopeResult.suggestions)\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["building"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_313": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "\");\n      totalConfidence += areaResult.confidence;\n      confidenceFactors++;\n\n      if (areaResult.warnings) warnings.push(...areaResult.warnings);\n      if (areaResult.suggestions) suggestions.push...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_314": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "\");\n        totalConfidence += durationResult.confidence;\n        confidenceFactors++;\n\n        if (durationResult.warnings) warnings.push(...durationResult.warnings);\n        if (durationResult.sugge...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-population-service.ts_315": {
        "file": "lib/services/cross-step-population-service.ts",
        "query": "\",\n      );\n    }\n\n    return {\n      populated: true,\n      confidence,\n      warnings,\n      suggestions,\n      data: {\n        selectedServices: combinedServices,\n        scopeNotes:\n          (flo...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-fix-engine.ts_316": {
        "file": "lib/services/cross-step-validation/auto-fix-engine.ts",
        "query": "\";\n\nexport class AutoFixEngine {\n  /**\n   * Auto-fix service area consistency issues\n   */\n  static autoFixServiceAreaConsistency(\n    data: GuidedFlowData,\n  ): Partial<GuidedFlowData> {\n    const fi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "auto-fix-engine.ts_317": {
        "file": "lib/services/cross-step-validation/auto-fix-engine.ts",
        "query": "\";\n    }\n\n    return {\n      takeoff: {\n        ...data.takeoff,\n        equipment: {\n          ...data.takeoff?.equipment,\n          access: accessType,\n        },\n      },\n    };\n  }\n\n  /**\n   * Aut...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_318": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "`${service} service selected but no specific area measured`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_319": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "`,\n          currentValue: serviceArea,\n          blocksProgression: true,\n        });\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      warnings,\n      errors,\n      suggestions,\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_320": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "`,\n          affectedSteps: [\"pricing\"],\n          canAutoFix: false,\n        });\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      warnings,\n      errors,\n      suggestions,\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_321": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "`,\n        blocksProgression: true,\n      });\n\n      suggestions.push({\n        id: \"upgrade-access\",\n        type: \"accuracy\",\n        priority: \"high\",\n        message: \"Upgrade to appropriate acces...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_322": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\";\n\nexport class CrossStepValidators {\n  private pricingService: RealTimePricingService;\n\n  constructor() {\n    this.pricingService = RealTimePricingService.getInstance();\n  }\n\n  /**\n   * Validate ser...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_323": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\",\n          message: `${service} service selected but no specific area measured`,\n          affectedSteps: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_324": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\",\n      lastValidated: new Date(),\n    };\n  }\n\n  /**\n   * Validate duration feasibility for selected services and area\n   */\n  validateDurationFeasibility(data: GuidedFlowData): CrossStepValidationRe...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_325": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\"Estimated duration is required when services are selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_326": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\";\n    const selectedServices = data.scopeDetails?.selectedServices || [];\n\n    // Validate access method for building height\n    if (height > 30 && accessType === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_327": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\",\n      });\n    }\n\n    // Check service-specific access requirements\n    if (\n      selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_328": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\",\n      lastValidated: new Date(),\n    };\n  }\n\n  /**\n   * Validate service order and dependencies are logical\n   */\n  validateServiceDependencies(data: GuidedFlowData): CrossStepValidationResult {\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validators.ts_329": {
        "file": "lib/services/cross-step-validation/cross-step-validators.ts",
        "query": "\"], // Pressure wash & seal requires pressure washing\n    };\n\n    for (const [service, deps] of Object.entries(dependencies)) {\n      if (selectedServices.includes(service as ServiceType)) {\n        f...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_330": {
        "file": "lib/services/cross-step-validation/index.ts",
        "query": "\";\n\nexport class CrossStepValidationService {\n  private static instance: CrossStepValidationService | null = null;\n  private crossStepValidators: CrossStepValidators;\n  private initialized: boolean = ...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_331": {
        "file": "lib/services/cross-step-validation/index.ts",
        "query": "\":\n          // Get suggested price from validation or real-time pricing\n          const suggestedPrice = this.getSuggestedPrice(data, validationResult);\n          if (suggestedPrice > 0) {\n          ...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 95,
        "tables": ["validation", "warning"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-rules-engine.ts_332": {
        "file": "lib/services/cross-step-validation/validation-rules-engine.ts",
        "query": "\"Validates if estimated duration is realistic for selected services and area\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-rules-engine.ts_333": {
        "file": "lib/services/cross-step-validation/validation-rules-engine.ts",
        "query": "\";\n\n    // Run applicable validation rules\n    for (const rule of this.validationRules.values()) {\n      // Skip rules that don't apply to the changed step (if specified)\n      if (changedStep && !rul...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_334": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_335": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_336": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_337": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_338": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_339": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_340": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_341": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_342": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_343": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": "\",\n  };\n\n  private static config = this.DEFAULT_CONFIG;\n\n  /**\n   * Initialize validation state for an estimate\n   */\n  static initializeValidationState(\n    estimateId: string,\n    config?: Partial<C...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_344": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": "\", error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Cache validation result\n   */\n  static cacheValidationResult(\n    estimateId: string,\n    result: CrossStepValidationResult,\n  ): void {\n    this.l...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_345": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": "\", error);\n        this.updateValidationState(estimateId, {\n          isValidating: false,\n          pendingValidation: false,\n          validationError:\n            error instanceof Error ? error.mes...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "validation-state-manager.ts_346": {
        "file": "lib/services/cross-step-validation/validation-state-manager.ts",
        "query": "\",\n        });\n      }\n    }, this.config.validationInterval);\n\n    this.validationTimers.set(estimateId, timer);\n  }\n\n  /**\n   * Clear validation timer\n   */\n  static clearValidationTimer(estimateId:...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_347": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_348": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_349": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(ruleId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_350": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(ruleId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_351": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_352": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_353": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_354": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "`,\n          blocksProgression: false,\n        });\n      }\n    }\n\n    const result: CrossStepValidationResult = {\n      isValid:\n        allErrors.filter(\n          (e) => e.severity === \"error\" || e....",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_355": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "`${service} service selected but no specific area measured`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_356": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "`,\n          currentValue: serviceArea,\n          blocksProgression: true,\n        });\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      warnings,\n      errors,\n      suggestions,\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_357": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "`,\n          affectedSteps: [\"pricing\"],\n          canAutoFix: false,\n        });\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      warnings,\n      errors,\n      suggestions,\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_358": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "`,\n        blocksProgression: true,\n      });\n\n      suggestions.push({\n        id: \"upgrade-access\",\n        type: \"accuracy\",\n        priority: \"high\",\n        message: \"Upgrade to appropriate acces...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_359": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "' instead.\",\n    );\n    return new CrossStepValidationService(config);\n  }\n\n  // Initialize all validation rules\n  private initializeValidationRules(): void {\n    const rules: ValidationRule[] = [\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_360": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\"Validates if estimated duration is realistic for selected services and area\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_361": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n        validator: this.validateTimelineConstraints.bind(this),\n      },\n    ];\n\n    rules.forEach((rule) => {\n      this.validationRules.set(rule.id, rule);\n    });\n  }\n\n  // Subscribe to validati...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_362": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\";\n\n    // Run applicable validation rules\n    for (const rule of this.validationRules.values()) {\n      // Skip rules that don't apply to the changed step (if specified)\n      if (changedStep && !rul...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_363": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n        ).length === 0,\n      warnings: allWarnings.sort((a, b) =>\n        this.compareSeverity(a.severity, b.severity),\n      ),\n      errors: allErrors.sort((a, b) =>\n        this.compareSeverity...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_364": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n          message: `${service} service selected but no specific area measured`,\n          affectedSteps: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_365": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n      lastValidated: new Date(),\n    };\n  }\n\n  private validateDurationFeasibility(\n    data: GuidedFlowData,\n  ): CrossStepValidationResult {\n    const warnings: ValidationWarning[] = [];\n    cons...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_366": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\"Estimated duration is required when services are selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_367": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\";\n    const selectedServices = data.scopeDetails?.selectedServices || [];\n\n    // Validate access method for building height\n    if (height > 30 && accessType === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_368": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n      });\n    }\n\n    // Check service-specific access requirements\n    if (\n      selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_369": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n      lastValidated: new Date(),\n    };\n  }\n\n  private validateServiceDependencies(\n    data: GuidedFlowData,\n  ): CrossStepValidationResult {\n    const warnings: ValidationWarning[] = [];\n    cons...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_370": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\"], // Pressure wash & seal requires pressure washing\n    };\n\n    for (const [service, deps] of Object.entries(dependencies)) {\n      if (selectedServices.includes(service as ServiceType)) {\n        f...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_371": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\",\n      lastValidated: new Date(),\n    };\n  }\n\n  // Auto-fix implementations\n  private autoFixServiceAreaConsistency(\n    data: GuidedFlowData,\n  ): Partial<GuidedFlowData> {\n    const fixes: Partial...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "cross-step-validation-service.ts_372": {
        "file": "lib/services/cross-step-validation-service.ts",
        "query": "\";\n    }\n\n    return {\n      takeoff: {\n        ...data.takeoff,\n        equipment: {\n          ...data.takeoff?.equipment,\n          access: accessType,\n        },\n      },\n    };\n  }\n\n  // Utility m...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_373": {
        "file": "lib/services/data-quality-service.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_374": {
        "file": "lib/services/data-quality-service.ts",
        "query": "`;\n    const cached = this.cache.get(cacheKey);\n\n    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {\n      return cached.data;\n    }\n\n    const data = await this.fetchData(\n      valid...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_375": {
        "file": "lib/services/data-quality-service.ts",
        "query": "`,\n        });\n      }\n    }\n\n    const score = Math.max(\n      0,\n      100 - (inconsistencyCount / stringFields.length) * 20,\n    );\n\n    return { issues, score };\n  }\n\n  private assessTimeliness(da...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_376": {
        "file": "lib/services/data-quality-service.ts",
        "query": "`,\n            type: \"update_stale_data\",\n            field: issue.field,\n            condition: `",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_377": {
        "file": "lib/services/data-quality-service.ts",
        "query": "'`,\n            action: `Set ${issue.field} to default value or prompt user`,\n            priority: issue.severity === \"high\" ? 1 : 2,\n            estimatedImpact: (issue.count / 100) * 10, // Rough i...",
        "operationType": "update",
        "complexity": 17,
        "estimatedLatency": 185,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "data-quality-service.ts_378": {
        "file": "lib/services/data-quality-service.ts",
        "query": "\"update_stale_data\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_379": {
        "file": "lib/services/data-quality-service.ts",
        "query": "\";\n  condition: any;\n  errorMessage: string;\n}\n\nexport class DataQualityService {\n  private supabase;\n  private cache = new Map<string, { data: any; timestamp: number }>();\n  private readonly CACHE_TT...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_380": {
        "file": "lib/services/data-quality-service.ts",
        "query": "\",\n          field,\n          count: values.length,\n          examples: Array.from(formats).slice(0, 3),\n          impact: `${field} has ${formats.size} different formats across records`,\n        });\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_381": {
        "file": "lib/services/data-quality-service.ts",
        "query": "\"updated_at\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "data-quality-service.ts_382": {
        "file": "lib/services/data-quality-service.ts",
        "query": "\"update_stale_data\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_383": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_384": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": ".delete(estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_385": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "`);\n\n    if (this.valuesEqual(lastValue, newValue) && !immediate) {\n      return;\n    }\n\n    // Store the new value\n    if (!lastUpdate) {\n      this.lastUpdates.set(estimateId, new Map());\n    }\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_386": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "`, newValue);\n\n    // Clear existing timer\n    this.clearUpdateTimer(estimateId);\n\n    const performUpdates = () => {\n      // Group rules by type and priority\n      const groupedRules = this.groupRul...",
        "operationType": "update",
        "complexity": 11,
        "estimatedLatency": 140,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "dependency-tracking-service.ts_387": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\";\n  condition?: (value: any, flowData: GuidedFlowData) => boolean;\n  transformer?: (value: any, flowData: GuidedFlowData) => any;\n}\n\nexport interface DependencyUpdate {\n  sourceStep: string;\n  source...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_388": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\";\n}\n\nexport class DependencyTrackingService {\n  private config: DependencyTrackingConfig;\n  private dependencyRules: Map<string, DependencyRule[]>;\n  private listeners: Map<string, ((update: Dependen...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_389": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\",\n      ...config,\n    };\n\n    this.dependencyRules = new Map();\n    this.listeners = new Map();\n    this.updateTimers = new Map();\n    this.lastUpdates = new Map();\n    this.pricingService = pricing...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_390": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\",\n      },\n\n      // Scope Details → Update calculations\n      {\n        id: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_391": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\"selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_392": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\",\n        condition: (services) => Array.isArray(services) && services.length > 0,\n      },\n\n      // Area of Work → Update all calculations\n      {\n        id: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_393": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\" && height > 0,\n      },\n\n      // Takeoff → Update duration and pricing\n      {\n        id: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_394": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\",\n        condition: (measurements) =>\n          measurements && Object.keys(measurements).length > 0,\n      },\n\n      // Duration → Update expenses and pricing\n      {\n        id: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_395": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\" && size > 0,\n      },\n\n      // Expenses → Update pricing\n      {\n        id: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_396": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\"selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_397": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\",\n      },\n    ];\n\n    // Group rules by source step\n    rules.forEach((rule) => {\n      const stepRules = this.dependencyRules.get(rule.sourceStep) || [];\n      stepRules.push(rule);\n      this.depe...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_398": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\",\n      ];\n\n      priorityOrder.forEach((type) => {\n        const typeRules = groupedRules[type] || [];\n        if (typeRules.length > 0) {\n          this.processRulesOfType(\n            type,\n      ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_399": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\"],\n    rules: DependencyRule[],\n    estimateId: string,\n    stepId: string,\n    fieldPath: string,\n    value: any,\n    flowData: GuidedFlowData,\n  ): void {\n    const affectedSteps = new Set<string>(...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_400": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\":\n          this.handleClearOperation(rules, flowData, estimateId);\n          break;\n      }\n\n      // Notify listeners\n      this.notifyListeners(estimateId, update);\n    } catch (error) {\n      thi...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dependency-tracking-service.ts_401": {
        "file": "lib/services/dependency-tracking-service.ts",
        "query": "\", error as Error, {\n        estimateId,\n        updates,\n      });\n    }\n  }\n\n  // Handle recalculation\n  private handleRecalculation(\n    rules: DependencyRule[],\n    flowData: GuidedFlowData,\n    e...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_402": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\";\n    }\n  >;\n  lastUpdated: Date;\n}\n\ninterface MarketData {\n  region: string;\n  costOfLivingMultiplier: number;\n  competitors: CompetitorProfile[];\n  averageWages: {\n    entry: number;\n    experience...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_403": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\",\n    costPerUnit: 28.99, // Updated pricing\n    coverageRate: 2200, // sq ft per gallon when diluted\n    dilutionRatio: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_404": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\",\n          },\n        },\n        lastUpdated: new Date(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_405": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\",\n          },\n        },\n        lastUpdated: new Date(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_406": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\"Selective clients\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_407": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\",\n          },\n        },\n        lastUpdated: new Date(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "equipment-materials-service.ts_408": {
        "file": "lib/services/equipment-materials-service.ts",
        "query": "\",\n          },\n        },\n        lastUpdated: new Date(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_409": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "supabase.from(\"estimates\").delete().eq(\"id\", estimate.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_410": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".select()\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_411": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".select(\n          `\n          *,\n          estimate_services (*)\n        `,\n        )\n        .eq(\"id\", estimateId)\n        .eq(\"created_by\", user.id)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_412": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".select(\n          `\n          *,\n          estimate_services (*)\n        `,\n          { count: \"exact\" },\n        )\n        .eq(\"created_by\", user.id)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_413": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".select(\"id\")\n        .limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_414": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".insert(estimateData)\n        .select()\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_415": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".insert(serviceData)",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_416": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".insert(serviceData)",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_417": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".update(updateData)\n        .eq(\"id\", estimateId)\n        .eq(\"created_by\", user.id)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_418": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".delete().eq(\"id\", estimate.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_419": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".delete()\n          .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_420": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": ".delete()\n        .eq(\"id\", estimateId)\n        .eq(\"created_by\", user.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_421": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "`;\n  }\n\n  /**\n   * Calculate total estimate price\n   */\n  private calculateEstimateTotal(services: EstimateServiceType[]): number {\n    return services.reduce((total, service) => {\n      const service...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [
          "service",
          "estimates",
          "estimate_services",
          "estimates",
          "estimates"
        ],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_422": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "`,\n        )\n        .eq(\"id\", estimateId)\n        .eq(\"created_by\", user.id)\n        .single();\n\n      if (estimateError) {\n        if (estimateError.code === \"PGRST116\") {\n          throw new NotFou...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_423": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\";\n\n// Types and Interfaces\nexport interface EstimateValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface EstimateCreationParams {\n  customerName: strin...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_424": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"updated_at\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_425": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\" as EstimateStatus,\n        notes: params.notes,\n        complexity_score: complexityScore,\n        risk_adjustment: riskAdjustment,\n        created_by: user.id,\n      };\n\n      // Insert estimate\n  ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_426": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .insert(estimateData)\n        .select()\n        .single();\n\n      if (estimateError) {\n        throw new DatabaseError(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_427": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\", estimateError);\n      }\n\n      // Insert services\n      const serviceData = params.services.map((service) => ({\n        estimate_id: estimate.id,\n        service_type: service.serviceType,\n        ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_428": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .insert(serviceData);\n\n      if (servicesError) {\n        // Rollback estimate creation\n        await supabase.from(\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_429": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\").delete().eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_430": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .select(\n          `\n          *,\n          estimate_services (*)\n        `,\n        )\n        .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_431": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .select(\n          `\n          *,\n          estimate_services (*)\n        `,\n          { count: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_432": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\");\n  }\n\n  /**\n   * Update estimate\n   */\n  async updateEstimate(\n    estimateId: string,\n    params: EstimateUpdateParams,\n  ): Promise<boolean> {\n    return await this.withDatabase(async () => {\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_433": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\");\n      }\n\n      // Validate update params if services are included\n      if (params.services) {\n        const validation = this.validateEstimate({\n          ...params,\n          customerName: param...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_434": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Update validation failed\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_435": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .update(updateData)\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_436": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Failed to update estimate\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_437": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n          .delete()\n          .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_438": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\", estimateId);\n\n        if (deleteError) {\n          throw new DatabaseError(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_439": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\", deleteError);\n        }\n\n        // Insert new services\n        const serviceData = params.services.map((service) => ({\n          estimate_id: estimateId,\n          service_type: service.serviceTyp...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_440": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n          .insert(serviceData);\n\n        if (servicesError) {\n          throw new DatabaseError(\n            \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_441": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"estimate.updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_442": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Failed to publish estimate updated event\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_443": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Estimate updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_444": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"updateEstimate\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_445": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\");\n      }\n\n      // Delete estimate (services will be deleted via cascade)\n      const { error } = await supabase\n        .from(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_446": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .delete()\n        .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_447": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Failed to delete estimate\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_448": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"estimate.deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_449": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Failed to publish estimate deleted event\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_450": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"Estimate deleted successfully\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_451": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\"deleteEstimate\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-service-unified.ts_452": {
        "file": "lib/services/estimate-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_453": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "supabase.from(\"bi_connections\").upsert({\n      //   id: connection.id,\n      //   name: connection.name,\n      //   type: connection.type,\n      //   endpoint: connection.endpoint,\n      //   credenti...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["bi_connections"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_454": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_455": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "`;\n\n      const syncLog: SyncLog = {\n        id: syncId,\n        connectionId: request.connectionId,\n        type: \"export\",\n        status: \"pending\",\n        startTime: new Date().toISOString(),\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["source"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_456": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "`,\n        connectionId,\n        url: streamConfig.webhookUrl,\n        events: streamConfig.events || [\"data_update\", \"anomaly_detected\"],\n        secret: streamConfig.secret,\n        isActive: true,\n...",
        "operationType": "update",
        "complexity": 9,
        "estimatedLatency": 125,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "external-bi-integration-service.ts_457": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            username: connection.credentials.c...",
        "operationType": "select",
        "complexity": 19,
        "estimatedLatency": 185,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "external-bi-integration-service.ts_458": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "`,\n        );\n    }\n  }\n\n  // Additional helper methods would be implemented here...\n  private evaluateFilterCondition(row: any, config: any): boolean {\n    // Implement filter logic\n    return true;\n...",
        "operationType": "insert",
        "complexity": 11,
        "estimatedLatency": 160,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "external-bi-integration-service.ts_459": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\",\n        startTime: new Date().toISOString(),\n        recordsProcessed: 0,\n      };\n\n      this.addSyncLog(request.connectionId, syncLog);\n\n      try {\n        // Extract data from source\n        co...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["source"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_460": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\";\n        syncLog.endTime = new Date().toISOString();\n        syncLog.recordsProcessed = Array.isArray(transformedData)\n          ? transformedData.length\n          : 1;\n\n        // Update connection...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_461": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\"data_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_462": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\",\n          },\n          body: JSON.stringify({\n            username: connection.credentials.config.username,\n            password: connection.credentials.config.password,\n          }),\n        },\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_463": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\"updated_at\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_464": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\":\n        return this.generateSQLInserts(data);\n      default:\n        return data;\n    }\n  }\n\n  private async sendToBITool(\n    connection: BIConnection,\n    data: any,\n    request: DataExportReques...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "external-bi-integration-service.ts_465": {
        "file": "lib/services/external-bi-integration-service.ts",
        "query": "\");\n  }\n\n  private generateSQLInserts(data: any[]): string {\n    // Implementation would generate SQL INSERT statements\n    return \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_466": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_467": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", id)\n      .eq(\"created_by\", userId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_468": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_469": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", id)\n      .eq(\"created_by\", userId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_470": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", analysisId)\n      .eq(\"created_by\", userId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_471": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select(\"*\")\n      .eq(\"facade_analysis_id\", analysisId)\n      .order(\"created_at\", { ascending: true })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_472": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".select(\"*\")\n      .eq(\"estimate_id\", estimateId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_473": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".insert({\n        estimate_id: estimateId,\n        created_by: userId,\n      })\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_474": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_475": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": ".delete()\n      .eq(\"id\", id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_476": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "`,\n      );\n    }\n  }\n\n  async createAnalysis(\n    estimateId: string,\n    userId: string,\n  ): Promise<FacadeAnalysis> {\n    const supabase = createClient();\n    const { data, error } = await supabas...",
        "operationType": "select",
        "complexity": 7,
        "estimatedLatency": 110,
        "tables": [
          "facade_analyses",
          "facade_analyses",
          "facade_analyses",
          "facade_analyses",
          "facade_analyses",
          "facade_analyses",
          "facade_analysis_images"
        ],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_477": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .insert({\n        estimate_id: estimateId,\n        created_by: userId,\n      })\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  async updateAnalysis(\n   ...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_478": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_479": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\");\n    }\n\n    // Update the analysis\n    const { data, error } = await supabase\n      .from(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_480": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_481": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\", id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  async deleteAnalysis(id: string, userId: string): Promise<void> {\n    const supabase = createClient();\n\n   ...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_482": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_483": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\");\n    }\n\n    // Delete the analysis (cascade will handle images)\n    const { error } = await supabase\n      .from(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_484": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .delete()\n      .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_485": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_486": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-service.ts_487": {
        "file": "lib/services/facade-analysis-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-backup.ts_488": {
        "file": "lib/services/monitoring-service-backup.ts",
        "query": "\";\n  resolved?: boolean;\n  limit?: number;\n}) => unifiedMonitoringService.getAlerts(options);\n\nexport const acknowledgeAlert = (alertId: string, userId?: string) =>\n  unifiedMonitoringService.acknowle...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_489": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "supabase.from(\"performance_logs\").insert({\n          operation_name: operationName,\n          operation_type: operationType,\n          duration_ms: durationMs,\n          success,\n          error_messa...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["performance_logs"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_490": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".select(\"*\")\n          .eq(\"resolved\", resolved)\n          .order(\"created_at\", { ascending: false })\n          .limit(limit)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_491": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".select(\"setting_name, setting_value\")\n        .in(\"setting_name\", [\n          \"alert_response_time_warning\",\n          \"alert_response_time_critical\",\n        ])",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_492": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".insert({\n          operation_name: operationName,\n          operation_type: operationType,\n          duration_ms: durationMs,\n          success,\n          error_message: errorMessage,\n          metad...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_493": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".insert({\n            alert_type: alertType,\n            metric_name: metricName,\n            threshold_value: thresholdValue,\n            actual_value: actualValue,\n            message,\n          })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_494": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".update({\n            resolved: true,\n            resolved_at: new Date().toISOString(),\n          })\n          .eq(\"id\", alertId)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_495": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".delete(sessionId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_496": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".delete(userId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_497": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\n          \"get_performance_stats\",\n          {\n            start_time:\n              startTime || new Date(Date.now() - 3600000).toISOString(),\n            end_time: endTime || new Date().toISOS...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_498": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\"get_slow_queries\", {\n          threshold_ms: thresholdMs,\n          limit_count: limit,\n        })",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_499": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\"get_cache_stats\")",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_500": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\"get_connection_stats\")",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_501": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\n          \"get_user_statistics_fast\",\n          {\n            p_user_id: userId,\n          },\n        )",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_502": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\n          \"get_user_estimates_optimized\",\n          {\n            p_user_id: userId,\n            p_status: status,\n            p_limit: limit,\n            p_offset: offset,\n          },\n        ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_503": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\n          \"detect_performance_anomalies\",\n          {\n            check_period_minutes: checkPeriodMinutes,\n            threshold_multiplier: thresholdMultiplier,\n          },\n        )",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_504": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\"refresh_dashboard_stats\")",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_505": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\n          \"cleanup_performance_data\",\n          {\n            retention_days: retentionDays,\n          },\n        )",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_506": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": ".rpc(\"analyze_table_bloat\")",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_507": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return await response.json();\n      },\n      { operation: \"fetch_config\" },\n    );\n  }\n\n  /**\n   * Update monitoring configuration\n   */\n  async updateConfig(config:...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_508": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`Failed to update config: ${response.statusText}`",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_509": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return await response.blob();\n      },\n      { operation: \"export_metrics\", metadata: { format, options } },\n    );\n  }\n\n  /**\n   * Cancel any pending requests\n   */...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["enhanced", "performance_logs"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_510": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return { success: true, data };\n      },\n      {\n        operation: \"detect_anomalies\",\n        metadata: { checkPeriodMinutes, thresholdMultiplier },\n      },\n    )...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["performance_alerts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_511": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return { success: true, data };\n      },\n      { operation: \"get_performance_alerts\", metadata: { resolved, limit } },\n    );\n  }\n\n  /**\n   * Create a performance al...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["performance_alerts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_512": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return { success: true };\n      },\n      {\n        operation: \"create_alert\",\n        metadata: { alertType, metricName, thresholdValue, actualValue },\n      },\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["performance_alerts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_513": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return { success: true };\n      },\n      { operation: \"refresh_dashboard_stats\" },\n    );\n  }\n\n  /**\n   * Clean up old performance data\n   */\n  async cleanupPerforma...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_514": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return { success: true, deletedCount: data };\n      },\n      { operation: \"cleanup_performance\", metadata: { retentionDays } },\n    );\n  }\n\n  /**\n   * Analyze table ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_515": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        return { success: true, data };\n      },\n      { operation: \"analyze_table_bloat\" },\n    );\n  }\n\n  /**\n   * Performance monitoring middleware for API operations\n   *...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": ["performance_config"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_516": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "`, aggregate);\n      }\n    });\n\n    // Clean old metrics\n    UnifiedMonitoringService.optimizationMetrics =\n      UnifiedMonitoringService.optimizationMetrics.filter(\n        (m) => m.timestamp >= win...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_517": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "'t await to avoid blocking)\n      this.logPerformanceMetric(\n        operationName,\n        operationType,\n        duration,\n        success,\n        error?.message,\n        {\n          ...metadata,\n ...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": ["performance_config", "request", "performance"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_518": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\" },\n    );\n  }\n\n  /**\n   * Update monitoring configuration\n   */\n  async updateConfig(config: Partial<MonitoringConfig>): Promise<void> {\n    return this.executeWithErrorHandling(\n      \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_519": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\",\n          },\n          body: JSON.stringify(config),\n        });\n\n        if (!response.ok) {\n          throw new NetworkError(\n            `Failed to update config: ${response.statusText}`,\n      ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_520": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\").insert({\n          operation_name: operationName,\n          operation_type: operationType,\n          duration_ms: durationMs,\n          success,\n          error_message: errorMessage,\n          met...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_521": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_522": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\")\n          .insert({\n            alert_type: alertType,\n            metric_name: metricName,\n            threshold_value: thresholdValue,\n            actual_value: actualValue,\n            message,\n...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_523": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\")\n          .update({\n            resolved: true,\n            resolved_at: new Date().toISOString(),\n          })\n          .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_524": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\" },\n    );\n  }\n\n  /**\n   * Clean up old performance data\n   */\n  async cleanupPerformanceData(\n    retentionDays: number = 30,\n  ): Promise<{ success: boolean; deletedCount?: number; error?: string }...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_525": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\",\n          {\n            retention_days: retentionDays,\n          },\n        );\n\n        if (error) {\n          throw new DatabaseError(\n            `Failed to cleanup performance data: ${error.mess...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_526": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-service-unified.ts_527": {
        "file": "lib/services/monitoring-service-unified.ts",
        "query": "\") {\n        this.logger.debug(`[Aggregate] ${name}:`, aggregate);\n      }\n    });\n\n    // Clean old metrics\n    UnifiedMonitoringService.optimizationMetrics =\n      UnifiedMonitoringService.optimizat...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_528": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`,\n        \"select\",\n        \"estimates\",\n        userId,\n      );\n    }\n  }\n\n  /**\n   * Get estimate with services using optimized joins\n   */\n  async getEstimateWithServices(estimateId: string): Pro...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_529": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`],\n        }),\n        withOptimalCachedQuery<TableRow<\"estimate_services\">[]>(\n          \"estimate_services\",\n          \"select\",\n          {\n            filters: { quote_id: estimateId },\n         ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_530": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`],\n          },\n        ),\n      ]);\n\n      if (!estimate || estimate.length === 0) {\n        throw new DatabaseError(\n          \"Estimate not found\",\n          \"select\",\n          \"estimates\",\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_531": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`,\n        \"select\",\n        \"estimates\",\n        estimateId,\n      );\n    }\n  }\n\n  /**\n   * Get facade analysis with images using optimized loading\n   */\n  async getFacadeAnalysisWithImages(analysisI...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_532": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`],\n          },\n        ),\n        withOptimalCachedQuery<TableRow<\"facade_analysis_images\">[]>(\n          \"facade_analysis_images\",\n          \"select\",\n          {\n            filters: { facade_anal...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_533": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`],\n          },\n        ),\n      ]);\n\n      if (!analysis || analysis.length === 0) {\n        throw new DatabaseError(\n          \"Facade analysis not found\",\n          \"select\",\n          \"facade_ana...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_534": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`,\n        \"select\",\n        \"facade_analyses\",\n        analysisId,\n      );\n    }\n  }\n\n  /**\n   * Get analytics events with intelligent filtering and aggregation\n   */\n  async getAnalyticsEvents(filt...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_535": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`,\n        \"select\",\n        \"analytics_events\",\n      );\n    }\n  }\n\n  /**\n   * Search estimates with full-text search optimization\n   */\n  async searchEstimates(\n    searchTerm: string,\n    userId?: ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_536": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`,\n        \"select\",\n        \"estimates\",\n      );\n    }\n  }\n\n  /**\n   * Get dashboard summary with aggregated data\n   */\n  async getDashboardSummary(userId: string): Promise<\n    OptimizedQueryResult...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_537": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`],\n        }),\n        withOptimalCachedQuery<TableRow<\"estimates\">[]>(\"estimates\", \"select\", {\n          filters: { created_by: userId },\n          columns: [\n            \"id\",\n            \"quote_nu...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_538": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "`,\n        \"select\",\n        \"estimates\",\n        userId,\n      );\n    }\n  }\n\n  /**\n   * Invalidate related caches when data changes\n   */\n  async invalidateRelatedCaches(\n    table: TableName,\n    re...",
        "operationType": "select",
        "complexity": 9,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "optimized-query-service.ts_539": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "'s estimates with intelligent caching and pagination\n   */\n  async getUserEstimates(\n    userId: string,\n    options: {\n      status?: string[];\n      limit?: number;\n      offset?: number;\n      incl...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_540": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "'re frequently updated\n      const result = await withOptimalCachedQuery<\n        TableRow<\"analytics_events\">[]\n      >(\"analytics_events\", \"select\", {\n        filters: queryFilters,\n        columns:...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_541": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"];\ntype TableInsert<T extends TableName> =\n  Database[\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_542": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"Insert\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_543": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_544": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"updated_at\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_545": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_546": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_547": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_548": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_549": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_550": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_551": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_552": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_553": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_554": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\",\n          value: filters.dateRange.start.toISOString(),\n        };\n      }\n\n      // Use short TTL for analytics as they're frequently updated\n      const result = await withOptimalCachedQuery<\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_555": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_556": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_557": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_558": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_559": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_560": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "optimized-query-service.ts_561": {
        "file": "lib/services/optimized-query-service.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_562": {
        "file": "lib/services/photo-service.ts",
        "query": ".select()\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_563": {
        "file": "lib/services/photo-service.ts",
        "query": ".select(\"*\")\n          .eq(\"id\", photoId)\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_564": {
        "file": "lib/services/photo-service.ts",
        "query": ".select()\n              .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_565": {
        "file": "lib/services/photo-service.ts",
        "query": ".select(\"*\")\n      .eq(\"estimate_id\", estimateId)\n      .order(\"uploaded_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_566": {
        "file": "lib/services/photo-service.ts",
        "query": ".select(\"*\")\n      .filter(\"analysis_data->>photo_id\", \"eq\", photoId)\n      .order(\"created_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_567": {
        "file": "lib/services/photo-service.ts",
        "query": ".select(\"storage_path\")\n    //   .eq(\"id\", photoId)\n    //   .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_568": {
        "file": "lib/services/photo-service.ts",
        "query": ".select(\"*\")\n      //   .eq(\"id\", photoId)\n      //   .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_569": {
        "file": "lib/services/photo-service.ts",
        "query": ".select()\n    //   .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_570": {
        "file": "lib/services/photo-service.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_571": {
        "file": "lib/services/photo-service.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", photoId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_572": {
        "file": "lib/services/photo-service.ts",
        "query": ".insert({\n            estimate_id: estimateId,\n            user_id: userId,\n            file_name: file.name,\n            file_size: processedFile.size,\n            mime_type: file.type,\n            s...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_573": {
        "file": "lib/services/photo-service.ts",
        "query": ".insert({\n    //     quote_id: null, // No quote associated with 3D reconstruction\n    //     analysis_type: \"3d_reconstruction\",\n    //     image_url: null, // Multiple photos involved, stored in ana...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_574": {
        "file": "lib/services/photo-service.ts",
        "query": ".insert({\n        quote_id: null, // No quote associated with this comparison\n        analysis_type: \"before_after_comparison\",\n        image_url: null, // We have the image IDs in analysis_data\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_575": {
        "file": "lib/services/photo-service.ts",
        "query": ".delete()\n        .eq(\"id\", photoId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_576": {
        "file": "lib/services/photo-service.ts",
        "query": ".delete()\n    //   .eq(\"id\", photoId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_577": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n        }\n\n        // Get public URL\n        const {\n          data: { publicUrl },\n        } = this.supabase.storage\n          .from(this.STORAGE_BUCKET)\n          .getPublicUrl(filePath);\n\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_578": {
        "file": "lib/services/photo-service.ts",
        "query": "`, error);\n        throw error;\n      }\n    }\n\n    return uploadedPhotos;\n  }\n\n  /**\n   * Analyze photos using AI and save results\n   */\n  async analyzePhotos(\n    photoIds: string[],\n    analysisType...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_579": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n          }\n\n          const processingTime = Date.now() - startTime;\n\n          // Save analysis results\n          const { data: analysisData, error: analysisError } =\n            await this.supa...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_580": {
        "file": "lib/services/photo-service.ts",
        "query": "`, error);\n      }\n    }\n\n    onProgress?.({\n      totalPhotos: photoIds.length,\n      processedPhotos,\n      currentStep: \"Analysis complete\",\n      isComplete: true,\n      errors,\n    });\n\n    retur...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_581": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get analysis results for a photo\n   */\n  async getPhotoAnalysis(photoId: string): Promise<PhotoAnalysisData[]> {\n    const supabase = createClient();\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_582": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n    }\n\n    // Convert Json fields to Record<string, any> for type compatibility\n    return (data || []).map((item) => ({\n      ...item,\n      analysis_data: item.analysis_data as Record<string, an...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["photos"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_583": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting photo:\", error);\n      throw error;\n    }\n\n    // // Get photo data first\n    // const { data: photo, error: fetchError } = await ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_584": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n    // }\n\n    // // Delete from storage\n    // const { error: storageError } = await this.supabase.storage\n    //   .from(this.STORAGE_BUCKET)\n    //   .remove([photo.storage_path]);\n\n    // if (s...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["storage", "storage", "database", "ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_585": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n    // }\n  }\n\n  /**\n   * Batch analysis with progress tracking\n   */\n  async batchAnalyze3D(photoIds: string[]): Promise<any> {\n    const supabase = createClient();\n    if (photoIds.length < 2) {\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_586": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n      // }\n      // photos.push(photo);\n      throw new Error(\n        \"3D analysis not implemented - photos table not available\",\n      );\n    }\n\n    // // Download and prepare images\n    // cons...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["ai_analysis_results", "ai_analysis_results"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_587": {
        "file": "lib/services/photo-service.ts",
        "query": "`,\n      );\n    }\n  }\n\n  private async compressImage(file: File, maxSizeMB: number): Promise<File> {\n    const supabase = createClient();\n    // Simple compression - in production you might use a prop...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["photos"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_588": {
        "file": "lib/services/photo-service.ts",
        "query": "`);\n      }\n\n      return {\n        id: photo.id,\n        estimate_id: photo.estimate_id,\n        file_name: photo.file_name,\n        file_path: photo.storage_path,\n        storage_path: photo.storage...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_589": {
        "file": "lib/services/photo-service.ts",
        "query": "\";\n\nexport interface PhotoData {\n  id: string;\n  estimate_id: string;\n  file_name: string;\n  file_path: string;\n  storage_path?: string;\n  file_size: number;\n  mime_type: string;\n  analysis_data: any;...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_590": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n          .insert({\n            estimate_id: estimateId,\n            user_id: userId,\n            file_name: file.name,\n            file_size: processedFile.size,\n            mime_type: file.type,\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_591": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_592": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n              .upsert({\n                quote_id: null, // No quote associated with individual photo analysis\n                analysis_type: analysisType,\n                image_url: null, // Photo ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_593": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_594": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_595": {
        "file": "lib/services/photo-service.ts",
        "query": "\", { ascending: false });\n\n    if (error) {\n      throw new Error(`Failed to fetch analysis: ${error.message}`);\n    }\n\n    // Convert Json fields to Record<string, any> for type compatibility\n    ret...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_596": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n        .delete()\n        .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_597": {
        "file": "lib/services/photo-service.ts",
        "query": "\", photoId);\n\n      if (error) {\n        throw new Error(`Failed to delete photo: ${error.message}`);\n      }\n    } catch (error) {\n      console.error(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_598": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n    //   .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_599": {
        "file": "lib/services/photo-service.ts",
        "query": "\", photoId)\n    //   .single();\n\n    // if (fetchError) {\n    //   throw new Error(`Photo not found: ${fetchError.message}`);\n    // }\n\n    // // Delete from storage\n    // const { error: storageError...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["storage"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_600": {
        "file": "lib/services/photo-service.ts",
        "query": "\", storageError);\n    // }\n\n    // // Delete from database (cascade will handle analysis results)\n    // const { error: dbError } = await this.supabase\n    //   .from(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["database"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_601": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n    //   .delete()\n    //   .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_602": {
        "file": "lib/services/photo-service.ts",
        "query": "\", photoId);\n\n    // if (dbError) {\n    //   throw new Error(`Failed to delete photo: ${dbError.message}`);\n    // }\n  }\n\n  /**\n   * Batch analysis with progress tracking\n   */\n  async batchAnalyze3D(...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_603": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n      //   .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_604": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n    //   .insert({\n    //     quote_id: null, // No quote associated with 3D reconstruction\n    //     analysis_type: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_605": {
        "file": "lib/services/photo-service.ts",
        "query": "\",\n    //     image_url: null, // Multiple photos involved, stored in analysis_data\n    //     analysis_data: {\n    //       ...result,\n    //       sourcePhotos: photoIds,\n    //       photoCount: ph...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_606": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n      .insert({\n        quote_id: null, // No quote associated with this comparison\n        analysis_type: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_607": {
        "file": "lib/services/photo-service.ts",
        "query": "\",\n        image_url: null, // We have the image IDs in analysis_data\n        analysis_data: {\n          ...result,\n          beforePhotoId,\n          afterPhotoId,\n        },\n        confidence_score...",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_608": {
        "file": "lib/services/photo-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-service.ts_609": {
        "file": "lib/services/photo-service.ts",
        "query": "\",\n        created_at: photo.uploaded_at || new Date().toISOString(),\n        updated_at: photo.uploaded_at || new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_610": {
        "file": "lib/services/pilot-service.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", userId)\n        .eq(\"is_certified_pilot\", true)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_611": {
        "file": "lib/services/pilot-service.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", userId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_612": {
        "file": "lib/services/pilot-service.ts",
        "query": ".select(\"*\")\n        .in(\"role\", [\"admin\", \"sales\"])",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_613": {
        "file": "lib/services/pilot-service.ts",
        "query": "`;\n  }\n\n  /**\n   * Update pilot flight hours after a completed flight\n   */\n  async updateFlightHours(\n    pilotId: string,\n    additionalHours: number,\n  ): Promise<void> {\n    try {\n      // In prod...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_614": {
        "file": "lib/services/pilot-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_615": {
        "file": "lib/services/pilot-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_616": {
        "file": "lib/services/pilot-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pilot-service.ts_617": {
        "file": "lib/services/pilot-service.ts",
        "query": "\");\n    return `PART107-${licenseNumber}`;\n  }\n\n  /**\n   * Update pilot flight hours after a completed flight\n   */\n  async updateFlightHours(\n    pilotId: string,\n    additionalHours: number,\n  ): Pr...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_618": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": ".delete(subscription)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_619": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": ".delete(workflowId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_620": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": ".delete(workflowId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_621": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": ".delete(calculationId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_622": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": ".delete(workflowId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_623": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": ".delete(workflowId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_624": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`,\n          );\n        }\n\n        // Perform calculation (with memoization if enabled)\n        let result: RealTimePricingResult;\n        if (this.config.cacheEnabled) {\n          result = await this...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_625": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`,\n        );\n      }\n    }\n\n    // Apply global adjustments\n    const globalAdjustments = this.calculateGlobalAdjustments(input, totalCost);\n    adjustments.push(...globalAdjustments);\n\n    // Apply ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_626": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`,\n            value,\n            isPercentage: true,\n            appliedTo: \"total\",\n          });\n        }\n      }\n    }\n\n    // Complexity adjustments\n    if (input.complexityScore && input.comple...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_627": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`;\n\n    const subscription: PricingSubscription = {\n      id: subscriptionId,\n      callback,\n      filters,\n    };\n\n    if (!this.listeners.has(workflowId)) {\n      this.listeners.set(workflowId, new...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["pricing"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_628": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`,\n          error,\n        );\n      }\n    }\n  }\n\n  /**\n   * Check if result passes subscription filters\n   */\n  private passesFilters(\n    result: RealTimePricingResult,\n    filters: PricingSubscript...",
        "operationType": "delete",
        "complexity": 6,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_629": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`);\n        }\n      }\n    }\n\n    return { missing, warnings };\n  }\n\n  /**\n   * Get required fields for a service type\n   */\n  private getRequiredFieldsForService(serviceType: ServiceType): string[] {\n...",
        "operationType": "select",
        "complexity": 6,
        "estimatedLatency": 100,
        "tables": ["workflow", "customer", "workflow", "form", "form"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_630": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "` : \"\";\n    const servicesPart =\n      workflowData.areaOfWork?.selectedServices?.join(\"-\") || \"no-services\";\n    return `",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_631": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "`;\n  }\n\n  /**\n   * Convert confidence level to number for comparisons\n   */\n  private confidenceToNumber(confidence: ConfidenceLevel): number {\n    switch (confidence) {\n      case \"high\":\n        ret...",
        "operationType": "update",
        "complexity": 9,
        "estimatedLatency": 125,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "real-time-pricing-service-unified.ts_632": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\";\n\n// ==============================================================================\n// TYPE DEFINITIONS AND COMPATIBILITY EXPORTS\n// =================================================================...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_633": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\",\n      defaultCacheTTL: 300, // 5 minutes\n      enableRetry: true,\n      maxRetries: 3,\n      retryDelay: 1000,\n    });\n\n    // Merge configuration from both services\n    this.config = {\n      // V2...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["both"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_634": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\")}`,\n          );\n        }\n\n        // Perform calculation (with memoization if enabled)\n        let result: RealTimePricingResult;\n        if (this.config.cacheEnabled) {\n          result = await t...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_635": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\";\n\n    // Process each service\n    for (const serviceData of input.services) {\n      try {\n        const serviceResult = await this.calculateServicePricing(\n          serviceData,\n          input.con...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_636": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\" : overallConfidence;\n    }\n\n    return {\n      totalCost,\n      totalHours,\n      totalArea,\n      serviceBreakdown: services,\n      adjustments,\n      confidence: overallConfidence,\n      missingDa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_637": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\",\n      });\n    }\n\n    return adjustments;\n  }\n\n  // ==============================================================================\n  // SUBSCRIPTION AND LISTENER MANAGEMENT\n  // ====================...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_638": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\"],\n  ): string {\n    const subscriptionId = `${workflowId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    const subscription: PricingSubscription = {\n      id: subscriptionId,\n      ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["pricing"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_639": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\"],\n  ): boolean {\n    if (\n      filters.confidenceThreshold &&\n      this.confidenceToNumber(result.confidence) < filters.confidenceThreshold\n    ) {\n      return false;\n    }\n\n    if (filters.servi...",
        "operationType": "delete",
        "complexity": 6,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_640": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\",\n    };\n\n    return displayNames[serviceType] || serviceType;\n  }\n\n  // ==============================================================================\n  // UTILITY AND CONVERSION METHODS\n  // ======...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["workflow"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_641": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\") {\n      riskFactors.weather = 5; // 5% winter premium\n    }\n\n    // Complexity risk\n    const serviceCount = workflowData.areaOfWork?.selectedServices?.length || 0;\n    if (serviceCount > 5) {\n    ...",
        "operationType": "select",
        "complexity": 5,
        "estimatedLatency": 90,
        "tables": ["form", "form"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_642": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\";\n    const servicesPart =\n      workflowData.areaOfWork?.selectedServices?.join(\"",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "real-time-pricing-service-unified.ts_643": {
        "file": "lib/services/real-time-pricing-service-unified.ts",
        "query": "\":\n        return 0.4;\n      default:\n        return 0.5;\n    }\n  }\n\n  /**\n   * Update performance metrics\n   */\n  private updateMetrics(calculationId: string, calculationTime: number): void {\n    thi...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "risk-assessment-service.ts_644": {
        "file": "lib/services/risk-assessment-service.ts",
        "query": "\"Review and update risk assessment weekly\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service-client.ts_645": {
        "file": "lib/services/session-recovery-service-client.ts",
        "query": "`;\n      sessionStorage.setItem(this.TAB_ID_KEY, tabId);\n    }\n    return tabId;\n  }\n\n  // Start heartbeat to mark tab as active\n  private startHeartbeat(): void {\n    if (typeof window === \"undefined...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service-client.ts_646": {
        "file": "lib/services/session-recovery-service-client.ts",
        "query": "`))\n          continue;\n\n        const draftStr = localStorage.getItem(key);\n        if (!draftStr) continue;\n\n        const draft = JSON.parse(draftStr) as SessionDraft;\n\n        // Skip current tab'...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service-client.ts_647": {
        "file": "lib/services/session-recovery-service-client.ts",
        "query": "\") return;\n\n    this.updateTabActivity();\n    setInterval(() => {\n      this.updateTabActivity();\n    }, 5000);\n  }\n\n  // Update tab activity timestamp\n  private updateTabActivity(): void {\n    const ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service-client.ts_648": {
        "file": "lib/services/session-recovery-service-client.ts",
        "query": "\", error);\n      return null;\n    }\n  }\n\n  // Delete draft\n  async deleteDraft(draftId: string): Promise<void> {\n    try {\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = loc...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_649": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "supabase.from(\"estimation_flows\").upsert({\n        id: draft.id,\n        estimate_id: draft.estimateId || \"\",\n        user_id: draft.userId,\n        step: draft.currentStep,\n        flow_data: {\n     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["estimation_flows"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_650": {
        "file": "lib/services/session-recovery-service.ts",
        "query": ".select(\"*\")\n        .eq(\"user_id\", userId)\n        .order(\"updated_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_651": {
        "file": "lib/services/session-recovery-service.ts",
        "query": ".delete()\n        .eq(\"id\", draftId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_652": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "`,\n        estimateId,\n        userId: user.id,\n        sessionId: this.sessionId,\n        currentStep,\n        data,\n        progress: this.calculateProgress(data, currentStep),\n        metadata: {\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["both"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_653": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "`);\n      }\n\n      // Update recovery attempts\n      draft.recovery.recoveryAttempts++;\n      draft.recovery.lastRecoveryTime = new Date();\n      draft.metadata.isActive = true;\n\n      // Save updated...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_654": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\";\n    recoveryAttempts: number;\n    lastRecoveryTime?: Date;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  expiresAt: Date;\n}\n\nexport interface RecoveryOptions {\n  maxDraftAge: number; // hours\n  maxR...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_655": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\";\n\n  private static sessionId: string;\n  private static options = this.DEFAULT_OPTIONS;\n  private static recoveryState: RecoveryState = {\n    hasRecoverableSessions: false,\n    availableDrafts: [],\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_656": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\",\n  ): Promise<boolean> {\n    try {\n      const user = await this.getCurrentUser();\n      if (!user) return false;\n\n      const draft: SessionDraft = {\n        id: `${estimateId}_${this.sessionId}_${...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_657": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\", error);\n      return false;\n    }\n  }\n\n  // Get all recoverable sessions for current user\n  static async getRecoverableSessions(): Promise<SessionDraft[]> {\n    const supabase = createClient();\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["both"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_658": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\", error);\n      return [];\n    }\n  }\n\n  // Recover a specific session\n  static async recoverSession(draftId: string): Promise<SessionDraft | null> {\n    const supabase = createClient();\n    try {\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_659": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\", error);\n      return null;\n    } finally {\n      this.recoveryState.recoveryInProgress = false;\n    }\n  }\n\n  // Delete a session draft\n  static async deleteDraft(draftId: string): Promise<boolean> ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_660": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\", error);\n      return false;\n    }\n  }\n\n  // Clean up expired drafts\n  static async cleanupExpiredDrafts(): Promise<number> {\n    const supabase = createClient();\n    try {\n      const drafts = awai...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_661": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\",\n    ];\n\n    const currentIndex = allSteps.indexOf(currentStep);\n    const completedSteps = allSteps.slice(0, Math.max(0, currentIndex));\n\n    return {\n      completedSteps,\n      currentStepIndex: ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_662": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\", error);\n      return [];\n    }\n  }\n\n  private static async deleteFromLocalStorage(draftId: string): Promise<void> {\n    const supabase = createClient();\n    const drafts = await this.getFromLocalSt...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_663": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_664": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\"updated_at\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_665": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\",\n        data: (row.flow_data || {}) as GuidedFlowData,\n        progress: {\n          completedSteps: [],\n          currentStepIndex: row.current_step || 1,\n          totalSteps: 5,\n          progre...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_666": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\" as const,\n          recoveryAttempts: 0,\n          lastRecoveryTime: row.last_auto_save\n            ? new Date(row.last_auto_save)\n            : undefined,\n        },\n        createdAt: new Date(row...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "session-recovery-service.ts_667": {
        "file": "lib/services/session-recovery-service.ts",
        "query": "\")\n        .delete()\n        .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "vendor-service.ts_668": {
        "file": "lib/services/vendor-service.ts",
        "query": "\";\n    preferredOnly?: boolean;\n  }): Promise<Vendor[]> {\n    // Vendors table not yet implemented in database schema\n    // Using fallback data until schema is updated\n    return this.getFallbackVend...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "vendor-service.ts_669": {
        "file": "lib/services/vendor-service.ts",
        "query": "\">): Promise<string> {\n    // In production, this would insert into the database\n    const newId = `vendor-${Date.now()}`;\n    console.log(\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "vendor-service.ts_670": {
        "file": "lib/services/vendor-service.ts",
        "query": "\", { id: newId, ...vendorData });\n    return newId;\n  }\n\n  /**\n   * Update vendor pricing\n   */\n  async updateVendorPricing(\n    vendorId: string,\n    equipmentId: string,\n    pricing: Partial<VendorP...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_671": {
        "file": "lib/services/webhook-service.ts",
        "query": "`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch webhook\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching webhook:\", error...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_672": {
        "file": "lib/services/webhook-service.ts",
        "query": "`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        const error = await response.js...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_673": {
        "file": "lib/services/webhook-service.ts",
        "query": "`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        return {\n          success: false,\n          error: error.message || \"Failed to...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_674": {
        "file": "lib/services/webhook-service.ts",
        "query": "`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            action: \"retry_failed\",\n            delivery_ids: deliver...",
        "operationType": "select",
        "complexity": 7,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_675": {
        "file": "lib/services/webhook-service.ts",
        "query": "`,\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch stats\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching stats:\",...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_676": {
        "file": "lib/services/webhook-service.ts",
        "query": "\" };\n    }\n  }\n\n  /**\n   * Update an existing webhook\n   */\n  async updateWebhook(\n    id: string,\n    updates: Partial<WebhookConfig>,\n  ): Promise<{ success: boolean; webhook?: WebhookConfig; error?...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_677": {
        "file": "lib/services/webhook-service.ts",
        "query": "\" },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        return {\n          success: false,\n          error: error.message ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_678": {
        "file": "lib/services/webhook-service.ts",
        "query": "\",\n        };\n      }\n\n      const updatedWebhook = await response.json();\n      return { success: true, webhook: updatedWebhook };\n    } catch (error) {\n      console.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_679": {
        "file": "lib/services/webhook-service.ts",
        "query": "\"Failed to update webhook\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_680": {
        "file": "lib/services/webhook-service.ts",
        "query": "\"DELETE\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_681": {
        "file": "lib/services/webhook-service.ts",
        "query": "\"Failed to delete webhook\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_682": {
        "file": "lib/services/webhook-service.ts",
        "query": "\"Failed to delete webhook\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_683": {
        "file": "lib/services/webhook-service.ts",
        "query": "\",\n          event: eventType,\n          timestamp: new Date().toISOString(),\n        };\n    }\n  }\n\n  /**\n   * Validate webhook events selection\n   */\n  validateEvents(events: string[]): {\n    valid: ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_684": {
        "file": "lib/services/webhook-service.ts",
        "query": "\", error);\n      return {\n        total_deliveries: 0,\n        successful_deliveries: 0,\n        failed_deliveries: 0,\n        pending_deliveries: 0,\n        success_rate: 0,\n        average_response_...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_685": {
        "file": "lib/services/webhook-service.ts",
        "query": "\" },\n        body: JSON.stringify({ webhook_ids: webhookIds, updates }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        return { success: false, updated: 0, ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-service.ts_686": {
        "file": "lib/services/webhook-service.ts",
        "query": "\", error);\n      return {\n        success: false,\n        updated: 0,\n        errors: [\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_687": {
        "file": "lib/services/workflow/index.ts",
        "query": "\";\n\n/**\n * Main Workflow Service Orchestrator\n * Provides a unified interface to all workflow functionality\n */\nexport class WorkflowOrchestrator {\n  // === Step Management Methods ===\n\n  /**\n   * Get...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-condition-evaluator.ts_688": {
        "file": "lib/services/workflow/workflow-condition-evaluator.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-condition-evaluator.ts_689": {
        "file": "lib/services/workflow/workflow-condition-evaluator.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-condition-evaluator.ts_690": {
        "file": "lib/services/workflow/workflow-condition-evaluator.ts",
        "query": "\" && part in value) {\n        value = value[part];\n      } else {\n        return undefined;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Evaluate service-related conditions\n   */\n  private static ...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_691": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": ".select()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_692": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": ".select(\"*\")\n        .eq(\"estimate_id\", estimateId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_693": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": ".delete()\n        .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_694": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": "\")\n        .upsert({\n          estimate_id: estimateId,\n          flow_data: guidedFlowData as any, // Cast to avoid Json type issues\n          current_step: progress.currentStep,\n          last_modif...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_695": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_696": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": "\", error);\n        return null;\n      }\n\n      const guidedFlowData = data.flow_data as GuidedFlowData;\n      const progress = this.calculateProgress(guidedFlowData);\n\n      return {\n        guidedFlo...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["database"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_697": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": "\")\n        .delete()\n        .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-progress-tracker.ts_698": {
        "file": "lib/services/workflow/workflow-progress-tracker.ts",
        "query": "\"Failed to delete workflow progress:\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_699": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_700": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_701": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"Define project scope and select services\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_702": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_703": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"At least one service must be selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_704": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_705": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"Selected services must be valid\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_706": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_707": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_708": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_709": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-step-manager.ts_710": {
        "file": "lib/services/workflow/workflow-step-manager.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_711": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "`] = warnings;\n      });\n    }\n\n    // Validate cross-step dependencies\n    const crossStepValidation =\n      this.validateCrossStepDependencies(guidedFlowData);\n    Object.assign(allErrors, crossStep...",
        "operationType": "select",
        "complexity": 35,
        "estimatedLatency": 305,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "workflow-validation-engine.ts_712": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "'s validation rules\n    if (step.validationRules) {\n      for (const rule of step.validationRules) {\n        const fieldErrors = this.validateField(rule, data);\n        if (fieldErrors.length > 0) {\n ...",
        "operationType": "select",
        "complexity": 35,
        "estimatedLatency": 305,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "workflow-validation-engine.ts_713": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\":\n        return !!(\n          stepData.selectedServices && stepData.selectedServices.length > 0\n        );\n\n      case \"",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_714": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\":\n        if (data?.selectedServices && data.selectedServices.length > 5) {\n          warnings.selectedServices = [\n            \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_715": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\",\n            ];\n          }\n        }\n        break;\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Validate cross-step dependencies\n   */\n  private static validateCrossStepDependencies(\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_716": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\"] = [\n          `Service dependencies detected: ${dependencies.length} dependencies to consider`,\n        ];\n      }\n    }\n\n    // Check duration vs work areas\n    const durationData = guidedFlowData...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_717": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\",\n        ];\n      }\n    }\n\n    return { errors, warnings };\n  }\n\n  /**\n   * Generate service dependencies for validation\n   */\n  private static generateServiceDependencies(\n    selectedServices: Ser...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_718": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\" as ServiceType) &&\n      !selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_719": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\",\n      });\n    }\n\n    // Glass restoration works better with clean frames\n    if (\n      selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_720": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\" as ServiceType) &&\n      selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_721": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\",\n      });\n    }\n\n    // Pressure washing should happen before window cleaning for better results\n    if (\n      selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_722": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\" as ServiceType) &&\n      selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-validation-engine.ts_723": {
        "file": "lib/services/workflow/workflow-validation-engine.ts",
        "query": "\",\n      });\n    }\n\n    return dependencies;\n  }\n\n  /**\n   * Calculate estimated duration based on work areas and services\n   */\n  private static calculateEstimatedDuration(\n    workAreas: WorkArea[],...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_724": {
        "file": "lib/services/workflow-service.ts",
        "query": ".select(\"flow_data, current_step\")\n        .eq(\"estimate_id\", estimateId)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_725": {
        "file": "lib/services/workflow-service.ts",
        "query": ".delete()\n        .eq(\"estimate_id\", estimateId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_726": {
        "file": "lib/services/workflow-service.ts",
        "query": "`;\n        allWarnings[key] = stepValidation.warnings[field];\n      });\n    });\n\n    // Cross-step validation\n    const crossValidation = this.validateCrossStepDependencies(safeFlowData);\n    Object.k...",
        "operationType": "select",
        "complexity": 25,
        "estimatedLatency": 230,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "workflow-service.ts_727": {
        "file": "lib/services/workflow-service.ts",
        "query": "`Skipping ${step.title} based on current selections`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_728": {
        "file": "lib/services/workflow-service.ts",
        "query": "`,\n        );\n      }\n    }\n\n    // Check if step has required data\n    const hasRequiredData = isCompleted || !step.isRequired;\n\n    return {\n      canNavigate: true, // Always allow navigation in Ph...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimation_flows", "estimation_flows", "estimation_flows"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "workflow-service.ts_729": {
        "file": "lib/services/workflow-service.ts",
        "query": "`,\n      workAreas,\n      measurements,\n      calculations: {\n        totalArea,\n        totalPerimeter,\n        complexityFactor: 1.0,\n        accessDifficulty: 1.0,\n      },\n      accuracy: 0.9,\n   ...",
        "operationType": "select",
        "complexity": 25,
        "estimatedLatency": 230,
        "tables": ["work"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "workflow-service.ts_730": {
        "file": "lib/services/workflow-service.ts",
        "query": "'s not required to be sequential or previous steps are completed\n      const isAvailable = this.isStepAvailable(step.id, safeFlowData);\n      if (isAvailable) {\n        availableSteps.push(step.id);\n ...",
        "operationType": "select",
        "complexity": 36,
        "estimatedLatency": 315,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 3
      },
      "workflow-service.ts_731": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_732": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_733": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"Define project scope and select services\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_734": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_735": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"At least one service must be selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_736": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"selectedServices\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_737": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"Selected services must be valid\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_738": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_739": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_740": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_741": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_742": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_743": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_744": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_745": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_746": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"service-not-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_747": {
        "file": "lib/services/workflow-service.ts",
        "query": "\") {\n          return {\n            skip: true,\n            reason:\n              rule.action.message ||\n              `Skipping ${step.title} based on current selections`,\n          };\n        }\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_748": {
        "file": "lib/services/workflow-service.ts",
        "query": "\")\n        .upsert({\n          user_id: userId,\n          estimate_id: estimateId,\n          flow_data: guidedFlowData as any,\n          current_step: currentStep,\n          updated_at: new Date().toI...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_749": {
        "file": "lib/services/workflow-service.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_750": {
        "file": "lib/services/workflow-service.ts",
        "query": "\", estimateId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    });\n\n    if (result.success && result.data) {\n      return {\n        guidedFlowData:\n          (result.data.flow...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_751": {
        "file": "lib/services/workflow-service.ts",
        "query": "\")\n        .delete()\n        .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_752": {
        "file": "lib/services/workflow-service.ts",
        "query": "\", estimateId);\n\n      if (error) throw error;\n      return true;\n    });\n\n    if (result.success) {\n      invalidateCache.estimationFlow(estimateId);\n    }\n\n    return result.success;\n  }\n\n  // Busin...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_753": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"],\n    };\n\n    selectedServices.forEach((service) => {\n      const requiredServices =\n        dependencyMap[service as keyof typeof dependencyMap];\n      if (requiredServices) {\n        requiredServi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "workflow-service.ts_754": {
        "file": "lib/services/workflow-service.ts",
        "query": "\":\n        return !!(\n          stepData.selectedServices && stepData.selectedServices.length > 0\n        );\n\n      case \"",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_755": {
        "file": "lib/services/workflow-service.ts",
        "query": "\":\n        if (data?.selectedServices && data.selectedServices.length > 5) {\n          warnings.selectedServices = [\n            \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_756": {
        "file": "lib/services/workflow-service.ts",
        "query": "\",\n            ];\n          }\n        }\n        break;\n    }\n\n    return { errors, warnings };\n  }\n\n  private static validateCrossStepDependencies(\n    guidedFlowData: GuidedFlowData,\n  ): {\n    error...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-service.ts_757": {
        "file": "lib/services/workflow-service.ts",
        "query": "\"] = [\n          `Service dependencies detected: ${dependencies.length} dependencies to consider`,\n        ];\n      }\n    }\n\n    // Check duration vs work areas\n    const durationData = guidedFlowData...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_758": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"], // high-dusting, final-clean\n      defaultData: {\n        scopeDetails: {\n          selectedServices: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_759": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"],\n      defaultData: {\n        scopeDetails: {\n          selectedServices: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_760": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"],\n      defaultData: {\n        scopeDetails: {\n          selectedServices: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_761": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"],\n      defaultData: {\n        scopeDetails: {\n          selectedServices: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_762": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_763": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"service-selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_764": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"],\n      defaultData: {\n        scopeDetails: {\n          selectedServices: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "workflow-templates.ts_765": {
        "file": "lib/services/workflow-templates.ts",
        "query": "\"],\n      defaultData: {\n        scopeDetails: {\n          selectedServices: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_766": {
        "file": "app/api/ai/analytics/route.ts",
        "query": "`,\n        };\n\n        if (params.format === \"csv\") {\n          headers[\"Content-Type\"] = \"text/csv\";\n        } else {\n          headers[\"Content-Type\"] = \"application/json\";\n        }\n\n        return...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_767": {
        "file": "app/api/ai/analytics/route.ts",
        "query": "\",\n    });\n    return ErrorResponses.internalError();\n  }\n}\n\n// Admin endpoint to cleanup old analytics\nexport async function DELETE(request: NextRequest) {\n  try {\n    const user = await getUser();\n ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_768": {
        "file": "app/api/ai/analytics/route.ts",
        "query": "\";\n    if (!isAdmin) {\n      return ErrorResponses.forbidden();\n    }\n\n    const { daysToKeep = 90 } = await request.json();\n\n    // TODO: Implement cleanupOldAnalytics method in AIAnalyticsService\n  ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_769": {
        "file": "app/api/ai/analytics/route.ts",
        "query": "\"DELETE\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_770": {
        "file": "app/api/ai/conversations/[id]/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const body = await request.json();\n    const conversation = await AIConversationService.updateConversation(\n      id,\n      user.id,\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_771": {
        "file": "app/api/ai/conversations/[id]/route.ts",
        "query": "\"Failed to update conversation\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_772": {
        "file": "app/api/ai/conversations/[id]/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const { id } = await params;\n    await AIConversationService.deleteConversation(id, user.id);\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n  ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_773": {
        "file": "app/api/ai/conversations/[id]/route.ts",
        "query": "\"Failed to delete conversation\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_774": {
        "file": "app/api/ai/facade-analysis/route.ts",
        "query": "supabase.from(\"analytics_events\").insert({\n      user_id: session.user.id,\n      event_type: \"facade_analysis\",\n      event_data: {\n        image_type: validatedData.imageType,\n        view_angle: val...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["analytics_events"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_775": {
        "file": "app/api/ai/facade-analysis/route.ts",
        "query": ".insert({\n      user_id: session.user.id,\n      event_type: \"facade_analysis\",\n      event_data: {\n        image_type: validatedData.imageType,\n        view_angle: validatedData.viewAngle,\n        con...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_776": {
        "file": "app/api/ai/facade-analysis/route.ts",
        "query": "\").insert({\n      user_id: session.user.id,\n      event_type: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_777": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": ".select(\"id, name, type, endpoint, is_active, last_sync, created_at\")\n    //   .eq(\"user_id\", user.id)\n    //   .order(\"created_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_778": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": ".update({\n    //     ...updates,\n    //     updated_at: new Date().toISOString(),\n    //   })\n    //   .eq(\"id\", connectionId)\n    //   .eq(\"user_id\", user.id)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_779": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": ".delete()\n    //   .eq(\"id\", connectionId)\n    //   .eq(\"user_id\", user.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_780": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\")\n    //   .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_781": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\",\n      },\n      { status: 500 },\n    );\n  }\n}\n\n/**\n * PUT /api/analytics/bi-integration\n * Update BI connection\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    const supabase = awa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_782": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { connectionId, updates } = body;\n\n    if (!connectionId) {\n      return NextResponse.json(\n        { error: \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_783": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    // Update connection in database\n    // TODO: Create bi_connections table in database migration\n    // const { error } = await supabase\n    //   .from...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_784": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\")\n    //   .update({\n    //     ...updates,\n    //     updated_at: new Date().toISOString(),\n    //   })\n    //   .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_785": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\"BI connection updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_786": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\"Failed to update BI connection:\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_787": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\"Failed to update connection\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_788": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    // Delete connection from database\n    // TODO: Create bi_connections table in database migration\n    // const { error } = await supabase\n    //   .fr...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["database"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_789": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\")\n    //   .delete()\n    //   .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_790": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\"BI connection deleted successfully\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_791": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\"Failed to delete BI connection:\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_792": {
        "file": "app/api/analytics/bi-integration/route.ts",
        "query": "\"Failed to delete connection\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_793": {
        "file": "app/api/analytics/data-quality/route.ts",
        "query": "\"update_stale_data\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_794": {
        "file": "app/api/analytics/export/route.ts",
        "query": ".select(\"*\")\n      .gte(\"created_at\", since)\n      .order(\"created_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_795": {
        "file": "app/api/analytics/export/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_796": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": ".select(`total_price, estimates!inner(status, created_at)`)\n        .eq(\"service_id\", serviceId)\n        .eq(\"estimates.status\", \"accepted\")\n        .gte(\"estimates.created_at\", currentStart.toISOStri...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimate_services"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_797": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": ".select(\n      `\n      created_at,\n      total_amount,\n      status\n    `,\n    )\n    .gte(\n      \"created_at\",\n      new Date(Date.now() - periodDays * 24 * 60 * 60 * 1000).toISOString(),\n    )\n    .o...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_798": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": ".select(\n      `\n      service_id,\n      service_name,\n      quantity,\n      unit_price,\n      total_price,\n      estimates!inner(status, created_at)\n    `,\n    )\n    .gte(\n      \"estimates.created_at...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_799": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": ".select(\"created_at, status, total_amount\")\n          .gte(\n            \"created_at\",\n            new Date(\n              Date.now() - periodDays * 24 * 60 * 60 * 1000,\n            ).toISOString(),\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_800": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": ".select(\"status\")\n          .gte(\n            \"created_at\",\n            new Date(\n              Date.now() - periodDays * 24 * 60 * 60 * 1000,\n            ).toISOString(),\n          )",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_801": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "`)\n        .eq(\"service_id\", serviceId)\n        .eq(\"estimates.status\", \"accepted\")\n        .gte(\"estimates.created_at\", currentStart.toISOString())\n        .lte(\"estimates.created_at\", currentEnd.toI...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimate_services"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_802": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "`,\n      error,\n    );\n    return 0;\n  }\n}\n\nasync function getMonthlyRevenue(\n  supabase: any,\n  periodDays: number,\n): Promise<MonthlyRevenue[]> {\n  const { data, error } = await supabase\n    .from(\"...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_803": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "`);\n  }\n\n  // Group by month and calculate metrics\n  const monthlyMap = new Map<string, { revenue: number; estimates: number }>();\n\n  data?.forEach((estimate: any) => {\n    const month = new Date(esti...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 75,
        "tables": ["estimate_services"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_804": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "`);\n  }\n\n  // Group by service and calculate metrics\n  const serviceMap = new Map<\n    string,\n    {\n      serviceName: string;\n      totalRevenue: number;\n      completedJobs: number;\n    }\n  >();\n\n ...",
        "operationType": "select",
        "complexity": 9,
        "estimatedLatency": 120,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "route.ts_805": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "`,\n          );\n        }\n\n        result = trends;\n        break;\n\n      case \"conversion_rates\":\n        const { data: conversion, error: conversionError } = await supabase\n          .from(\"estimate...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_806": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "\")\n        .select(`total_price, estimates!inner(status, created_at)`)\n        .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_807": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "\")\n        .select(`total_price, estimates!inner(status, created_at)`)\n        .eq(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_808": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "\")\n    .select(\n      `\n      created_at,\n      total_amount,\n      status\n    `,\n    )\n    .gte(\n      \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_809": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "\")\n    .select(\n      `\n      service_id,\n      service_name,\n      quantity,\n      unit_price,\n      total_price,\n      estimates!inner(status, created_at)\n    `,\n    )\n    .gte(\n      \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_810": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_811": {
        "file": "app/api/analytics/metrics/route.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_812": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": ".select(\"status, created_at, total_amount\")\n      .gte(\n        \"created_at\",\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      )",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_813": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": ".select(\"current_step, created_at, updated_at\")\n      .neq(\"current_step\", \"completed\")\n      .gte(\"updated_at\", new Date(Date.now() - 60 * 60 * 1000).toISOString())",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_814": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": ".select(\"total_amount, status, created_at\")\n      .eq(\"status\", \"accepted\")\n      .gte(\n        \"created_at\",\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      )",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_815": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": ".select(\"user_id, created_at\")\n      .gte(\"created_at\", new Date(Date.now() - 60 * 60 * 1000).toISOString())",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_816": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "'ll use estimate creation as a proxy for user activity\n    const { data, error } = await this.supabase\n      .from(\"estimates\")\n      .select(\"user_id, created_at\")\n      .gte(\"created_at\", new Date(D...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimates"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_817": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_818": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_819": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "\"updated_at\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_820": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_821": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_822": {
        "file": "app/api/analytics/real-time/route.ts",
        "query": "\";\n  }\n\n  private calculateAverageStepTime(workflows: any[]): number {\n    if (!workflows || workflows.length === 0) return 0;\n\n    const stepTimes = workflows.map((w) => {\n      const created = new D...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_823": {
        "file": "app/api/analytics/route.ts",
        "query": "\";\n\nconst analyticsQuerySchema = z.object({\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n  userId: z.string().optional(),\n  limit: z.string().transform(Number).optional(),\n  o...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_824": {
        "file": "app/api/analytics/track-event/route.ts",
        "query": "supabase.from(\"analytics_events\").insert({\n    id: eventId,\n    user_id: userId,\n    event_name: eventData.event_name,\n    properties: validatedProperties,\n    session_id: eventData.session_id || `ses...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["analytics_events"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_825": {
        "file": "app/api/analytics/track-event/route.ts",
        "query": ".insert({\n    id: eventId,\n    user_id: userId,\n    event_name: eventData.event_name,\n    properties: validatedProperties,\n    session_id: eventData.session_id || `session-${Date.now()}`,\n    page_url...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_826": {
        "file": "app/api/analytics/track-event/route.ts",
        "query": "`);\n  }\n\n  return eventId;\n}\n\nasync function getEventMetrics(\n  supabase: any,\n  userId?: string,\n  eventName?: string,\n  days: number = 30,\n) {\n  // Use optimized query with selective columns and sin...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_827": {
        "file": "app/api/analytics/track-event/route.ts",
        "query": "\").insert({\n    id: eventId,\n    user_id: userId,\n    event_name: eventData.event_name,\n    properties: validatedProperties,\n    session_id: eventData.session_id || `session-${Date.now()}`,\n    page_u...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_828": {
        "file": "app/api/analytics/vitals/route.ts",
        "query": "supabase.from(\"web_vitals\").insert({\n      //   metric_name: validated.name,\n      //   value: validated.value,\n      //   rating: validated.rating,\n      //   delta: validated.delta,\n      //   metri...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["web_vitals"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_829": {
        "file": "app/api/analytics/vitals/route.ts",
        "query": ".insert({\n      //   metric_name: validated.name,\n      //   value: validated.value,\n      //   rating: validated.rating,\n      //   delta: validated.delta,\n      //   metric_id: validated.id,\n      /...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_830": {
        "file": "app/api/analytics/vitals/route.ts",
        "query": "`, validated);\n      return NextResponse.json({ success: true });\n    }\n\n    // In production, you could store these metrics\n    try {\n      const supabase = createAdminClient();\n\n      // Check if we...",
        "operationType": "insert",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_831": {
        "file": "app/api/analytics/vitals/route.ts",
        "query": "'ll just acknowledge receipt\n      console.log(`[Analytics] Received ${validated.name} metric:`, validated);\n\n      // Uncomment when web_vitals table is created:\n      // await supabase.from(\"web_vit...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["web_vitals"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_832": {
        "file": "app/api/analytics/vitals/route.ts",
        "query": "\") {\n      console.log(`[Analytics] Web Vital ${validated.name}:`, validated);\n      return NextResponse.json({ success: true });\n    }\n\n    // In production, you could store these metrics\n    try {\n ...",
        "operationType": "insert",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_833": {
        "file": "app/api/analytics/vitals/route.ts",
        "query": "\").insert({\n      //   metric_name: validated.name,\n      //   value: validated.value,\n      //   rating: validated.rating,\n      //   delta: validated.delta,\n      //   metric_id: validated.id,\n     ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_834": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": ".delete(connectionId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_835": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "`,\n          severity: [\"low\", \"medium\"][Math.floor(Math.random() * 2)],\n          message: \"Unusual spike in estimate requests detected\",\n          detectedAt: new Date().toISOString(),\n          aff...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_836": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "`,\n    });\n  }\n\n  private sendQualityUpdate(connectionId: string, data: any): void {\n    this.sendMessage(connectionId, {\n      type: \"quality_update\",\n      data,\n      timestamp: new Date().toISOStr...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_837": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "`,\n    });\n  }\n\n  private sendPredictionUpdate(connectionId: string, data: any): void {\n    this.sendMessage(connectionId, {\n      type: \"prediction_update\",\n      data,\n      timestamp: new Date().to...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_838": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\";\n\n// Store active WebSocket connections\nconst connections = new Map<string, WebSocket>();\nconst subscriptions = new Map<\n  string,\n  {\n    connectionId: string;\n    metrics: string[];\n    filters?: ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_839": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\") {\n        this.sendMetricUpdate(connectionId, {\n          metric: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_840": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\") {\n        this.sendMetricUpdate(connectionId, {\n          metric: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_841": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\") {\n        this.sendMetricUpdate(connectionId, {\n          metric: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_842": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\") {\n        this.sendQualityUpdate(connectionId, {\n          score: 85 + Math.floor(Math.random() * 10),\n          status: [\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_843": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\") {\n        this.sendPredictionUpdate(connectionId, {\n          predictionId: `pred_${Date.now()}`,\n          type: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_844": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\",\n          ],\n        });\n      }\n    });\n  }\n\n  private sendMetricUpdate(connectionId: string, data: any): void {\n    this.sendMessage(connectionId, {\n      type: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_845": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\",\n      data,\n      timestamp: new Date().toISOString(),\n      id: `metric_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    });\n  }\n\n  private sendQualityUpdate(connectionId: string, da...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_846": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\",\n      data,\n      timestamp: new Date().toISOString(),\n      id: `quality_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    });\n  }\n\n  private sendPredictionUpdate(connectionId: string...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_847": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\",\n          onDataUpdate: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_848": {
        "file": "app/api/analytics/websocket/route.ts",
        "query": "\" },\n            },\n          },\n          metricUpdate: {\n            type: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_849": {
        "file": "app/api/audit/compliance/route.ts",
        "query": ".select(\"*\")\n        .order(\"generated_at\", { ascending: false })\n        .limit(20)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_850": {
        "file": "app/api/audit/compliance/route.ts",
        "query": ".select(\"*\")\n        .eq(\"event_type\", \"compliance_violation\")\n        .order(\"created_at\", { ascending: false })\n        .limit(50)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_851": {
        "file": "app/api/audit/compliance/route.ts",
        "query": ".select(\"*\")\n        .gte(\"created_at\", startDate)\n        .lte(\"created_at\", endDate)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_852": {
        "file": "app/api/audit/compliance/route.ts",
        "query": ".select(\"*\")\n        .gte(\"created_at\", hoursAgo)\n        .in(\"event_type\", [\"failed_login\", \"suspicious_access\", \"data_breach\"])",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_853": {
        "file": "app/api/audit/compliance/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_854": {
        "file": "app/api/audit/compliance/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_855": {
        "file": "app/api/audit/compliance/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_856": {
        "file": "app/api/audit/compliance/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_857": {
        "file": "app/api/audit/compliance/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\nasync function handleDELETE(request: NextRequest) {\n  try {\n    const supabase = await createClient();\n\n    const {\n      data: { user },\n      error: userErr...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_858": {
        "file": "app/api/audit/compliance/route.ts",
        "query": "\" });\nexport const DELETE = withAuditLogging(handleDELETE, { logLevel: \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_859": {
        "file": "app/api/audit/events/route.ts",
        "query": ".select(\"*\", { count: \"exact\", head: true })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_860": {
        "file": "app/api/audit/events/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_861": {
        "file": "app/api/collaboration/history/route.ts",
        "query": ".select(\n      `\n      id,\n      estimate_id,\n      user_id,\n      change_type,\n      field_name,\n      old_value,\n      new_value,\n      description,\n      created_at,\n      profiles:user_id (\n      ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_862": {
        "file": "app/api/collaboration/history/route.ts",
        "query": ".select(\"user_id, change_type, created_at, profiles:user_id (full_name)\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_863": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "`);\n  }\n\n  return (data || []).map((item: any) => ({\n    id: item.id,\n    estimate_id: item.estimate_id,\n    user_id: item.user_id,\n    change_type: item.change_type,\n    field_name: item.field_name,\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["collaboration_history"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_864": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "`);\n  }\n\n  const changes = data || [];\n  const userCounts: Record<string, { name: string; count: number }> = {};\n  const changeTypeCounts: Record<string, number> = {};\n  const dailyActivity: Record<st...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_865": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_866": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "\"delete\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_867": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "\")\n    .select(\n      `\n      id,\n      estimate_id,\n      user_id,\n      change_type,\n      field_name,\n      old_value,\n      new_value,\n      description,\n      created_at,\n      profiles:user_id (...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_868": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "\")\n    .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_869": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "\", days),\n  10 * 60 * 1000, // 10 minutes TTL\n)(async function _getCachedCollaborationHistory(\n  supabase: any,\n  estimateId: string,\n  userId: string,\n  days: number,\n  includeMetrics: boolean,\n) {\n ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_870": {
        "file": "app/api/collaboration/history/route.ts",
        "query": "\",\n    days,\n    includeMetrics,\n    {\n      useSelectiveColumns: true,\n      limit: 100,\n      offset: 0,\n    },\n  );\n\n  return result.data;\n});\n\nasync function handleGET(request: NextRequest) {\n  tr...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_871": {
        "file": "app/api/customers/route.ts",
        "query": ".select(\"id\")\n      .eq(\"email\", data.email)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_872": {
        "file": "app/api/customers/route.ts",
        "query": ".select()\n    .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_873": {
        "file": "app/api/customers/route.ts",
        "query": ".select(\"*\", { count: \"exact\" })\n    .order(\"created_at\", { ascending: false })\n    .range(offset, offset + limit - 1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_874": {
        "file": "app/api/customers/route.ts",
        "query": ".insert({\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      company_name: data.company || data.company_name,\n    })\n    .select()\n    .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_875": {
        "file": "app/api/customers/route.ts",
        "query": "`);\n  }\n\n  const { search, limit, offset } = validation.data;\n\n  let query = supabase\n    .from(\"customers\")\n    .select(\"*\", { count: \"exact\" })\n    .order(\"created_at\", { ascending: false })\n    .ra...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["customers"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_876": {
        "file": "app/api/customers/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_877": {
        "file": "app/api/customers/route.ts",
        "query": "\")\n    .insert({\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      company_name: data.company || data.company_name,\n    })\n    .select()\n    .single();\n\n  if (customerErro...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "route.ts_878": {
        "file": "app/api/customers/route.ts",
        "query": "\")\n    .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_879": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": "supabase.from(\"sql_execution_log\").insert({\n      id: crypto.randomUUID(),\n      user_id: userId,\n      sql_statement: sql,\n      operation_type: operationType,\n      description: description || `${op...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["sql_execution_log"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_880": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": ".select(\"role\")\n      .eq(\"id\", user.id)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_881": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": ".select(\"*\")\n    .order(\"executed_at\", { ascending: false })\n    .limit(limit)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_882": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": ".insert({\n      id: crypto.randomUUID(),\n      user_id: userId,\n      sql_statement: sql,\n      operation_type: operationType,\n      description: description || `${operationType} operation`,\n      res...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_883": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": ".rpc(\"execute_sql\", {\n    query: sql,\n  })",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_884": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": "`);\n  }\n\n  return data;\n}\n\nasync function logSqlExecution(\n  supabase: any,\n  userId: string,\n  sql: string,\n  operationType: string,\n  result: any,\n  description?: string,\n) {\n  try {\n    await supab...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["sql_execution_log"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_885": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": "`;\n    if (!rateLimiters.sqlExecution.isAllowed(userKey)) {\n      return NextResponse.json(\n        { error: \"Rate limit exceeded. Please try again later.\" },\n        { status: 429 },\n      );\n    }\n\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["profiles", "sql_execution_log"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_886": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": "\").insert({\n      id: crypto.randomUUID(),\n      user_id: userId,\n      sql_statement: sql,\n      operation_type: operationType,\n      description: description || `${operationType} operation`,\n      r...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_887": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_888": {
        "file": "app/api/database/exec-sql/route.ts",
        "query": "\")\n    .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_889": {
        "file": "app/api/enhanced/route.ts",
        "query": "`;\n\n    // Get company's performance data\n    const companyData = await enhancedAnalyticsService.getBusinessMetrics(\n      startDate,\n      endDate,\n    );\n\n    // Generate benchmark data based on typ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_890": {
        "file": "app/api/enhanced/route.ts",
        "query": "`;\n\n    // Get historical data for analysis\n    const historicalData = await generateHistoricalTrendData(\n      startDate,\n      endDate,\n      metrics,\n      userId,\n    );\n\n    // Detect trends and ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["database"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_891": {
        "file": "app/api/enhanced/route.ts",
        "query": "\"Updated monthly\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_892": {
        "file": "app/api/enhanced/route.ts",
        "query": "\",\n        last_updated: new Date().toISOString(),\n      },\n    };\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_893": {
        "file": "app/api/estimates/[id]/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { id } = await params;\n\n    // Update estimate using the business service\n    const success = await unifiedEstimateServic...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_894": {
        "file": "app/api/estimates/[id]/route.ts",
        "query": "\"Estimate updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_895": {
        "file": "app/api/estimates/[id]/route.ts",
        "query": "\"Failed to update estimate\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_896": {
        "file": "app/api/estimates/[id]/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    // Delete estimate using the business service\n    const { id } = await params;\n    const success = await unifiedEstimateService.deleteEstimate(id);\n\n    if (!success)...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_897": {
        "file": "app/api/estimates/[id]/route.ts",
        "query": "\"Estimate deleted successfully\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_898": {
        "file": "app/api/estimates/[id]/route.ts",
        "query": "\"Failed to delete estimate\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_899": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": ".select(\n        `\n        *,\n        estimates!inner(\n          id,\n          quote_number,\n          customer_name,\n          customer_email,\n          building_name,\n          total_price,\n        ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_900": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_901": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": ".update({\n        ...body,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", flowId)\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_902": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": ".delete()\n      .eq(\"id\", flowId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_903": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\")\n      .select(\n        `\n        *,\n        estimates!inner(\n          id,\n          quote_number,\n          customer_name,\n          customer_email,\n          building_name,\n          total_price,...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_904": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\" },\n        { status: 401 },\n      );\n    }\n\n    const supabase = await createServerSupabaseClient();\n    const { id: flowId } = await params;\n    const body = await request.json();\n\n    // Update es...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_905": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\")\n      .update({\n        ...body,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_906": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\", flowId)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_907": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\"Failed to update estimation flow\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_908": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\"Estimation flow update error:\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_909": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> },\n) {\n  try {\n    // Authenticate request\n    const { u...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_910": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\" },\n        { status: 401 },\n      );\n    }\n\n    const supabase = await createServerSupabaseClient();\n    const { id: flowId } = await params;\n\n    // Delete estimation flow (RLS will ensure user can...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_911": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\")\n      .delete()\n      .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_912": {
        "file": "app/api/estimation-flows/[id]/route.ts",
        "query": "\"Failed to delete estimation flow\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_913": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".select(\"current_step, user_id\")\n        .eq(\"id\", requestBody.flow_id)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_914": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_915": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".select(\"current_step, user_id\")\n      .eq(\"id\", flowId)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_916": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_917": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".select(\n        `\n        *,\n        estimates!inner(\n          id,\n          quote_number,\n          customer_name,\n          created_at,\n          created_by\n        )\n      `,\n      )\n      .eq(\"e...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_918": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".insert({\n        customer_id: sanitizedData.customer_id,\n        status: \"draft\",\n        current_step: 1,\n        user_id: user.id,\n        step: sanitizedData.step,\n        data: sanitizedData.data...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_919": {
        "file": "app/api/estimation-flows/route.ts",
        "query": ".update({\n        ...requestBody,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", flowId)\n      .eq(\"user_id\", user.id) // Double-check ownership\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_920": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "'t have permission to modify this flow\",\n        );\n      }\n\n      // Validate step progression (only allow next/previous step)\n      const currentStep = existingFlow.current_step;\n      const request...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["estimation_flows", "estimation_flows"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_921": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_922": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\")\n      .insert({\n        customer_id: sanitizedData.customer_id,\n        status: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_923": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\",\n        current_step: 1,\n        user_id: user.id,\n        step: sanitizedData.step,\n        data: sanitizedData.data,\n      })\n      .select()\n      .single();\n\n    if (flowError) {\n      logApiEr...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_924": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_925": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\");\n      }\n    }\n\n    // Update the flow\n    const { data: updatedFlow, error: updateError } = await supabase\n      .from(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_926": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\")\n      .update({\n        ...requestBody,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_927": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\", user.id) // Double-check ownership\n      .select()\n      .single();\n\n    if (updateError) {\n      logApiError(updateError, {\n        endpoint: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_928": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\"Update estimation flow\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_929": {
        "file": "app/api/estimation-flows/route.ts",
        "query": "\")\n      .select(\n        `\n        *,\n        estimates!inner(\n          id,\n          quote_number,\n          customer_name,\n          created_at,\n          created_by\n        )\n      `,\n      )\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_930": {
        "file": "app/api/exports/cost-breakdown/route.ts",
        "query": "`;\n\n    const costBreakdownData = await getCachedCostBreakdownData(\n      supabase,\n      validatedParams.estimateId,\n      options,\n    );\n\n    // Filter data based on options\n    if (!validatedParam...",
        "operationType": "delete",
        "complexity": 6,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_931": {
        "file": "app/api/exports/cost-breakdown/route.ts",
        "query": "\",\n    };\n\n    const validatedParams = ExportRequestSchema.parse(rawParams);\n\n    // Create options string for cache key\n    const options = `${validatedParams.includeLineItems}-${validatedParams.incl...",
        "operationType": "delete",
        "complexity": 6,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_932": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", id)\n      .eq(\"created_by\", user.id)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_933": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": ".select(\"*\")\n      .eq(\"facade_analysis_id\", id)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_934": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": ".update({\n        total_facade_sqft:\n          analysisResponse.analysis.measurements.total_facade_sqft,\n        total_glass_sqft:\n          analysisResponse.analysis.measurements.total_glass_sqft,\n  ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_935": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": ".update({\n          ai_analysis_results: {\n            detected_features: aiAnalysis.detected_features || [],\n            material_analysis: aiAnalysis.material_details || {},\n            detected_ele...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_936": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_937": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_938": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\",\n        ground_surfaces: aiAnalysis.ground_surfaces || {},\n        recommendations: aiAnalysis.recommendations || [],\n        confidence_level: aiAnalysis.overall_confidence || 85,\n      },\n    };\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_939": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\")\n      .update({\n        total_facade_sqft:\n          analysisResponse.analysis.measurements.total_facade_sqft,\n        total_glass_sqft:\n          analysisResponse.analysis.measurements.total_glass...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_940": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\",\n        requires_field_verification:\n          analysisResponse.analysis.confidence_level < 80,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_941": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\", id);\n\n    if (updateError) {\n      logger.error(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_942": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\", updateError);\n    }\n\n    // Update each image with AI results\n    for (const image of images) {\n      const { error: imageUpdateError } = await supabase\n        .from(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_943": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\")\n        .update({\n          ai_analysis_results: {\n            detected_features: aiAnalysis.detected_features || [],\n            material_analysis: aiAnalysis.material_details || {},\n            d...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_944": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\", image.id);\n\n      if (imageUpdateError) {\n        logger.error(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_945": {
        "file": "app/api/facade-analysis/[id]/analyze/route.ts",
        "query": "\", imageUpdateError);\n      }\n    }\n\n    // Cache the response\n    await aiResponseCache.set(\n      \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_946": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", id)\n      .eq(\"created_by\", user.id)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_947": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_948": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": ".insert({\n        facade_analysis_id: id,\n        image_url: finalImageUrl,\n        image_type: validatedData.imageType,\n        view_angle: validatedData.viewAngle,\n        uploaded_by: user.id,\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_949": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_950": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    // Add image to facade analysis\n    const { data: facadeImage, error: insertError } = await supabase\n      .from(\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_951": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": "\")\n      .insert({\n        facade_analysis_id: id,\n        image_url: finalImageUrl,\n        image_type: validatedData.imageType,\n        view_angle: validatedData.viewAngle,\n        uploaded_by: user...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_952": {
        "file": "app/api/facade-analysis/[id]/images/route.ts",
        "query": "\", insertError);\n      return NextResponse.json(\n        { error: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_953": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": ".select(\"*\")\n      .eq(\"id\", id)\n      .eq(\"created_by\", user.id)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_954": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\";\nimport { updateFacadeAnalysisSchema } from \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_955": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_956": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\n// PATCH /api/facade-analysis/[id] - Update a facade analysis\nexport async function PATCH(request: NextRequest, { params }: RouteParams) {\n  try {\n    const {...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_957": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n\n    // Validate request body\n    const validatedData = updateFacadeAnalysisSchema.parse(body);\n\n    const service = new FacadeAnal...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_958": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE /api/facade-analysis/[id] - Delete a facade analysis\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\n  try {\n    const...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_959": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const service = new FacadeAnalysisService();\n\n    // Delete the analysis using service\n    await service.deleteAnalysis(id, user.id);\n\n    return NextResponse.json({\n...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_960": {
        "file": "app/api/facade-analysis/[id]/route.ts",
        "query": "\"Error in DELETE /api/facade-analysis/[id]:\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_961": {
        "file": "app/api/facade-analysis/route.ts",
        "query": ".select(\"*\")\n        .eq(\"facade_analysis_id\", analysis.id)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_962": {
        "file": "app/api/facade-analysis/route.ts",
        "query": ".select(\"*\")\n      .eq(\"created_by\", user.id)\n      .order(\"created_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_963": {
        "file": "app/api/facade-analysis/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_964": {
        "file": "app/api/facade-analysis/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_965": {
        "file": "app/api/health/route.ts",
        "query": "supabase.from(\"profiles\").select(\"id\").limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["profiles"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_966": {
        "file": "app/api/health/route.ts",
        "query": ".select(\"id\")\n        .limit(1)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_967": {
        "file": "app/api/health/route.ts",
        "query": ".select(\"id\").limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_968": {
        "file": "app/api/health/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_969": {
        "file": "app/api/health/route.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_970": {
        "file": "app/api/health/secure/route.ts",
        "query": "supabase.from(\"profiles\").select(\"id\").limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["profiles"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_971": {
        "file": "app/api/health/secure/route.ts",
        "query": ".select(\"id\").limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_972": {
        "file": "app/api/health/secure/route.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_973": {
        "file": "app/api/help/analytics/route.ts",
        "query": "supabase.from(\"help_analytics\").insert({\n    id: crypto.randomUUID(),\n    workflow_id: workflowId,\n    help_id: helpId,\n    interaction_type: interaction,\n    help_content: context.helpContent,\n    co...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["help_analytics"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_974": {
        "file": "app/api/help/analytics/route.ts",
        "query": ".insert({\n    id: crypto.randomUUID(),\n    workflow_id: workflowId,\n    help_id: helpId,\n    interaction_type: interaction,\n    help_content: context.helpContent,\n    context_info: context.context,\n  ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_975": {
        "file": "app/api/help/analytics/route.ts",
        "query": "`;\n    if (!rateLimiters.helpAnalytics.isAllowed(userKey)) {\n      return NextResponse.json(\n        { error: \"Rate limit exceeded. Please try again later.\" },\n        { status: 429 },\n      );\n    }\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_976": {
        "file": "app/api/help/analytics/route.ts",
        "query": "\").insert({\n    id: crypto.randomUUID(),\n    workflow_id: workflowId,\n    help_id: helpId,\n    interaction_type: interaction,\n    help_content: context.helpContent,\n    context_info: context.context,\n...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_977": {
        "file": "app/api/help/analytics/route.ts",
        "query": "\", timeframe),\n  15 * 60 * 1000, // 15 minutes TTL\n)(async function _getHelpAnalytics(\n  supabase: any,\n  workflowId: string | null,\n  timeframe: string,\n) {\n  // Use optimized query with selective co...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_978": {
        "file": "app/api/integrations/health/route.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", integration_id)\n        .eq(\"created_by\", user.id)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_979": {
        "file": "app/api/integrations/health/route.ts",
        "query": ".select(\"*\")\n        .eq(\"created_by\", user.id)\n        .eq(\"enabled\", true)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_980": {
        "file": "app/api/integrations/health/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_981": {
        "file": "app/api/integrations/health/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_982": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "supabase.from(\"oauth_states\").delete().eq(\"state\", state)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["oauth_states"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_983": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "supabase.from(\"oauth_states\").insert({\n    user_id: userId,\n    state: state,\n    provider: \"quickbooks\",\n    expires_at: expiresAt,\n  })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["oauth_states"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_984": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": ".select(\"state\")\n      .eq(\"user_id\", user.user.id)\n      .eq(\"state\", state)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_985": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": ".insert({\n    user_id: userId,\n    state: state,\n    provider: \"quickbooks\",\n    expires_at: expiresAt,\n  })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_986": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": ".update({ enabled: false })\n        .eq(\"provider\", \"quickbooks\")\n        .eq(\"created_by\", user.user.id)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_987": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": ".delete().eq(\"state\", state)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_988": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "`);\n    }\n\n    if (!code || !realmId) {\n      return ErrorResponses.badRequest(\n        \"Missing authorization code or realm ID\",\n      );\n    }\n\n    // Verify CSRF state token\n    if (!state) {\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["oauth_states", "oauth_states"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_989": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "`,\n      enabled: true,\n      settings: {\n        sandbox: process.env.NODE_ENV !== \"production\",\n        company_name: authResult.data.company_name,\n      },\n      authentication: {\n        type: \"oa...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["integrations"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_990": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "`,\n      };\n    }\n\n    const data = await response.json();\n\n    return {\n      success: true,\n      data: {\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n        ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["oauth_states"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_991": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_992": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "\").delete().eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_993": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "\")\n        .update({ enabled: false })\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_994": {
        "file": "app/api/integrations/quickbooks/auth/route.ts",
        "query": "\").insert({\n    user_id: userId,\n    state: state,\n    provider: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_995": {
        "file": "app/api/integrations/quickbooks/sync/route.ts",
        "query": ".select(\"*\")\n      .eq(\"provider\", \"quickbooks\")\n      .eq(\"created_by\", user.user.id)\n      .eq(\"enabled\", true)\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_996": {
        "file": "app/api/integrations/quickbooks/sync/route.ts",
        "query": ".update({\n          sync_settings: updatedSyncSettings,\n        })\n        .eq(\"id\", integrationConfig.id)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_997": {
        "file": "app/api/integrations/quickbooks/sync/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_998": {
        "file": "app/api/integrations/quickbooks/sync/route.ts",
        "query": "\",\n            last_sync: lastSync,\n          });\n        }\n      }\n    }\n\n    // Initialize QuickBooks integration\n    const quickbooks = new QuickBooksIntegration(integrationConfig as any);\n\n    // ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_999": {
        "file": "app/api/integrations/quickbooks/sync/route.ts",
        "query": "\")\n        .update({\n          sync_settings: updatedSyncSettings,\n        })\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1000": {
        "file": "app/api/integrations/route.ts",
        "query": ".select(\"*\")\n      .eq(\"created_by\", user.id)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1001": {
        "file": "app/api/integrations/route.ts",
        "query": ".select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1002": {
        "file": "app/api/integrations/route.ts",
        "query": ".update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .eq(\"created_by\", user.id)\n      .select()\n      .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1003": {
        "file": "app/api/integrations/route.ts",
        "query": ".delete()\n      .eq(\"id\", id)\n      .eq(\"created_by\", user.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1004": {
        "file": "app/api/integrations/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1005": {
        "file": "app/api/integrations/route.ts",
        "query": "\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { id, ...updates } = body;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1006": {
        "file": "app/api/integrations/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    // Update integration\n    const { data: integration, error } = await supabase\n      .from(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1007": {
        "file": "app/api/integrations/route.ts",
        "query": "\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1008": {
        "file": "app/api/integrations/route.ts",
        "query": "\", user.id)\n      .select()\n      .single();\n\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n\n    if (!integration) {\n      return NextResponse.json(...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1009": {
        "file": "app/api/integrations/route.ts",
        "query": "\"Integration updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1010": {
        "file": "app/api/integrations/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const supabase = createClient();\n\n    const {\n      data: { user },\n      error: userError,\n ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1011": {
        "file": "app/api/integrations/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    // Delete integration\n    const { error } = await supabase\n      .from(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1012": {
        "file": "app/api/integrations/route.ts",
        "query": "\")\n      .delete()\n      .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1013": {
        "file": "app/api/integrations/route.ts",
        "query": "\"Integration deleted successfully\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1014": {
        "file": "app/api/integrations/sync/route.ts",
        "query": "supabase.from(\"integration_sync_logs\").select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["integration_sync_logs"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1015": {
        "file": "app/api/integrations/sync/route.ts",
        "query": ".select(\"*\")\n        .eq(\"id\", integration_id)\n        .eq(\"created_by\", user.id)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1016": {
        "file": "app/api/integrations/sync/route.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1017": {
        "file": "app/api/integrations/sync/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1018": {
        "file": "app/api/integrations/sync/route.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1019": {
        "file": "app/api/integrations/webhooks/manage/[id]/deliveries/route.ts",
        "query": ".select(\"*\")\n        .eq(\"webhook_id\", webhookId)\n        .eq(\"status\", \"failed\")\n        .order(\"created_at\", { ascending: false })\n        .limit(10)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1020": {
        "file": "app/api/integrations/webhooks/manage/[id]/deliveries/route.ts",
        "query": ".update({\n            status: \"pending\",\n            attempts: 0,\n            error_message: null,\n            next_retry_at: null,\n          })\n          .eq(\"id\", delivery.id)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1021": {
        "file": "app/api/integrations/webhooks/manage/[id]/deliveries/route.ts",
        "query": "`);\n      }\n\n      let retriedCount = 0;\n      for (const delivery of failedDeliveries || []) {\n        // Reset delivery status to pending for retry\n        await supabase\n          .from(\"webhook_de...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["webhook_deliveries"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1022": {
        "file": "app/api/integrations/webhooks/manage/[id]/deliveries/route.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1023": {
        "file": "app/api/integrations/webhooks/manage/[id]/deliveries/route.ts",
        "query": "\")\n          .update({\n            status: \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1024": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "supabase.from(\"customers\").upsert({\n              quickbooks_id: customerData.id,\n              name: customerData.name || customerData.companyName,\n              email: customerData.primaryEmailAddr?...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["customers"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1025": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "supabase.from(\"payments\").insert({\n        stripe_payment_id: paymentData.id,\n        amount: paymentData.amount,\n        currency: paymentData.currency,\n        status: \"completed\",\n        customer_...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["payments"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1026": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "supabase.from(\"payments\").insert({\n        stripe_payment_id: failedPaymentData.id,\n        amount: failedPaymentData.amount,\n        currency: failedPaymentData.currency,\n        status: \"failed\",\n  ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["payments"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1027": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "supabase.from(\"customers\").insert({\n        name: data.name || data.company_name,\n        email: data.email,\n        phone: data.phone,\n        address: data.address,\n        source: source,\n        c...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["customers"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1028": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "supabase.from(\"form_submissions\").insert({\n        form_name: data.form_name,\n        submission_data: data,\n        source: source,\n        created_at: new Date().toISOString(),\n      })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["form_submissions"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1029": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "supabase.from(\"webhook_logs\").insert({\n    source: \"custom\",\n    event_type,\n    payload: webhookData,\n    token,\n    processed: false,\n    created_at: new Date().toISOString(),\n  })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["webhook_logs"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1030": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": ".insert({\n        stripe_payment_id: paymentData.id,\n        amount: paymentData.amount,\n        currency: paymentData.currency,\n        status: \"completed\",\n        customer_email: paymentData.receip...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1031": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": ".insert({\n        stripe_payment_id: failedPaymentData.id,\n        amount: failedPaymentData.amount,\n        currency: failedPaymentData.currency,\n        status: \"failed\",\n        failure_reason: fai...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1032": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": ".insert({\n        name: data.name || data.company_name,\n        email: data.email,\n        phone: data.phone,\n        address: data.address,\n        source: source,\n        created_at: new Date().toIS...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1033": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": ".insert({\n        form_name: data.form_name,\n        submission_data: data,\n        source: source,\n        created_at: new Date().toISOString(),\n      })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1034": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": ".insert({\n    source: \"custom\",\n    event_type,\n    payload: webhookData,\n    token,\n    processed: false,\n    created_at: new Date().toISOString(),\n  })",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1035": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Processing failed\",\n    };\n  }\n}\n\nasync function processQuickBooksWebhook(\n  supabase: any,\n  webho...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": ["QuickBooks", "customers"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1036": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "`\n                : null,\n              updated_at: new Date().toISOString(),\n            });\n          }\n        }\n      }\n      break;\n\n    case \"Invoice\":\n      // Handle invoice updates from Quick...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": ["QuickBooks"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1037": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "`);\n  }\n\n  return { success: true, result: { processed_events: event_type } };\n}\n\nasync function processStripeWebhook(\n  supabase: any,\n  webhookData: z.infer<typeof IncomingWebhookSchema>,\n): Promise...",
        "operationType": "insert",
        "complexity": 6,
        "estimatedLatency": 100,
        "tables": ["payments", "payments"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1038": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "`);\n  }\n\n  return { success: true, result: { processed_events: event_type } };\n}\n\nasync function processAutomationWebhook(\n  supabase: any,\n  webhookData: z.infer<typeof IncomingWebhookSchema>,\n  sour...",
        "operationType": "insert",
        "complexity": 8,
        "estimatedLatency": 115,
        "tables": [
          "automation",
          "customers",
          "website",
          "form_submissions",
          "automation"
        ],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "route.ts_1039": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\":\n      // Sync customer data from QuickBooks\n      if (data.eventNotifications) {\n        for (const notification of data.eventNotifications) {\n          const customerData = notification.dataChange...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["QuickBooks"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1040": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\").upsert({\n              quickbooks_id: customerData.id,\n              name: customerData.name || customerData.companyName,\n              email: customerData.primaryEmailAddr?.address,\n              ...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1041": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\":\n      // Handle invoice updates from QuickBooks\n      // Implement based on your business logic\n      break;\n\n    default:\n      console.log(`Unhandled QuickBooks event: ${event_type}`);\n  }\n\n  ret...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": ["QuickBooks"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1042": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\").insert({\n        stripe_payment_id: paymentData.id,\n        amount: paymentData.amount,\n        currency: paymentData.currency,\n        status: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1043": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\").insert({\n        stripe_payment_id: failedPaymentData.id,\n        amount: failedPaymentData.amount,\n        currency: failedPaymentData.currency,\n        status: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1044": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\").insert({\n        name: data.name || data.company_name,\n        email: data.email,\n        phone: data.phone,\n        address: data.address,\n        source: source,\n        created_at: new Date().to...",
        "operationType": "insert",
        "complexity": 4,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1045": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\").insert({\n        form_name: data.form_name,\n        submission_data: data,\n        source: source,\n        created_at: new Date().toISOString(),\n      });\n      break;\n\n    case \"",
        "operationType": "insert",
        "complexity": 4,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1046": {
        "file": "app/api/integrations/webhooks/receive/route.ts",
        "query": "\").insert({\n    source: \"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1047": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\"),\n  description: z.string().optional(),\n  headers: z.record(z.string()).optional(),\n  timeout_seconds: z.number().min(1).max(30).optional(),\n  retry_attempts: z.number().min(0).max(5).optional(),\n  ...",
        "operationType": "unknown",
        "complexity": 6,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "route.ts_1048": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    const body = await request.json();\n\n    // Validate request body\n    const validationResult = WebhookUpdateSchema.safeParse(body);\n    if (!validation...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1049": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\",\n          details: validationResult.error.errors,\n        },\n        { status: 400 },\n      );\n    }\n\n    const updateData = validationResult.data;\n\n    // Verify webhook ownership\n    const webhoo...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1050": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\" },\n        { status: 404 },\n      );\n    }\n\n    // Update webhook\n    await webhookSystem.updateWebhook(webhookId, updateData, user.id);\n\n    // Get updated webhook\n    const updatedWebhooks = await...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1051": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\",\n      webhook: {\n        ...updatedWebhook,\n        secret: \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1052": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\"Failed to update webhook\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1053": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\" },\n        { status: 404 },\n      );\n    }\n\n    // Delete webhook\n    await webhookSystem.deleteWebhook(webhookId, user.id);\n\n    return NextResponse.json({\n      message: \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1054": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\"Failed to delete webhook\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1055": {
        "file": "app/api/integrations/webhooks/route.ts",
        "query": "\"],\n});\nexport const DELETE = withAuditLogging(withAutoRateLimit(handleDELETE), {\n  logLevel: \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1056": {
        "file": "app/api/monitoring/alerts/route.ts",
        "query": "\"Failed to update alert\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1057": {
        "file": "app/api/monitoring/alerts/route.ts",
        "query": "\"Failed to delete alert\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1058": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "`${section} configuration updated`",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1059": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "`,\n      timestamp: Date.now(),\n    });\n  } catch (error) {\n    console.error(\"Error processing monitoring config action:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process conf...",
        "operationType": "update",
        "complexity": 7,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1060": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\":\n        systemMonitor.updateConfig(config);\n        break;\n\n      case \"",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1061": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\":\n        alertManager.updateConfig(config);\n        break;\n\n      case \"",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1062": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\":\n        systemMonitor.updateConfig({ thresholds: config });\n        break;\n\n      default:\n        return NextResponse.json(\n          { error: \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1063": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\" },\n          { status: 400 },\n        );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: `${section} configuration updated`,\n      timestamp: Date.now(),\n    });\n  } catch ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1064": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\"Failed to update monitoring configuration\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1065": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\" },\n            { status: 400 },\n          );\n        }\n        const currentConfig = alertManager.getConfig();\n        currentConfig.channels.push(data.channel);\n        alertManager.updateConfig(cu...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1066": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\":\n        // Reset configuration to defaults\n        systemMonitor.updateConfig({\n          enabled: true,\n          interval: 30000,\n          retentionDays: 30,\n        });\n        break;\n\n      de...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1067": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE /api/monitoring/config\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const typ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1068": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\" },\n            { status: 404 },\n          );\n        }\n        currentConfig.channels.splice(channelIndex, 1);\n        alertManager.updateConfig(currentConfig);\n        break;\n\n      default:\n      ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1069": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\" }, { status: 400 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: `${type} deleted successfully`,\n      timestamp: Date.now(),\n    });\n  } catch (error) {\n    console.er...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1070": {
        "file": "app/api/monitoring/config/route.ts",
        "query": "\"Failed to delete configuration\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1071": {
        "file": "app/api/monitoring/metrics/route.ts",
        "query": "\"update_config\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1072": {
        "file": "app/api/monitoring/metrics/route.ts",
        "query": "\"Failed to update monitoring\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1073": {
        "file": "app/api/performance/entries/route.ts",
        "query": "\" },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const supabase = await createClient();\n\n    const {\n      data: { user },\n      error: userEr...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1074": {
        "file": "app/api/performance/metrics/route.ts",
        "query": "\"];\n\n    // Get performance metrics\n    const metrics = performanceMonitor.getMetrics();\n\n    // Get performance entries for the time range\n    const entries = performanceMonitor.getEntries({\n      si...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1075": {
        "file": "app/api/performance/vitals/route.ts",
        "query": ".select(\"*\")\n      .gte(\"created_at\", since.toISOString())\n      .order(\"created_at\", { ascending: false })",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1076": {
        "file": "app/api/performance/vitals/route.ts",
        "query": "\")\n      .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1077": {
        "file": "app/api/photos/upload/route.ts",
        "query": "\");\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Authenticate request\n    const { user, error: authError } = await authenticateRequest(request);\n    if (authError || !use...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1078": {
        "file": "app/api/photos/upload/route.ts",
        "query": "\" },\n        { status: 400 },\n      );\n    }\n\n    // Delete photo\n    await photoService.deletePhoto(photoId);\n\n    return NextResponse.json({\n      success: true,\n      message: \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1079": {
        "file": "app/api/photos/upload/route.ts",
        "query": "\"Delete photo error:\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1080": {
        "file": "app/api/photos/upload/route.ts",
        "query": "\"Failed to delete photo\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1081": {
        "file": "app/api/process/route.ts",
        "query": "supabase.from(\"pdf_processing_history\").insert({\n        user_id: user.user.id,\n        filename: file.name,\n        file_size: file.size,\n        pages_processed: processingResult.metadata.pageCount,...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["pdf_processing_history"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1082": {
        "file": "app/api/process/route.ts",
        "query": ".insert({\n        user_id: user.user.id,\n        filename: file.name,\n        file_size: file.size,\n        pages_processed: processingResult.metadata.pageCount,\n        text_extracted: processingResu...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1083": {
        "file": "app/api/process/route.ts",
        "query": "\").insert({\n        user_id: user.user.id,\n        filename: file.name,\n        file_size: file.size,\n        pages_processed: processingResult.metadata.pageCount,\n        text_extracted: processingRe...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1084": {
        "file": "app/api/support/issue-report/route.ts",
        "query": ".select(\"id\")\n    .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1085": {
        "file": "app/api/support/issue-report/route.ts",
        "query": ".select(\"*\")\n    .eq(\"user_id\", userId)\n    .order(\"created_at\", { ascending: false })\n    .limit(limit)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1086": {
        "file": "app/api/support/issue-report/route.ts",
        "query": ".insert({\n      id: crypto.randomUUID(),\n      user_id: userId,\n      type: issueData.type,\n      title: issueData.title,\n      description: issueData.description,\n      priority: issueData.priority,\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1087": {
        "file": "app/api/support/issue-report/route.ts",
        "query": "`, {\n      id: issueId,\n      title: issueData.title,\n      priority: issueData.priority,\n    });\n\n    // TODO: Implement actual notification system\n    // - Send email to support team\n    // - Create...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1088": {
        "file": "app/api/support/issue-report/route.ts",
        "query": "`;\n    if (!rateLimiters.issueReport.isAllowed(userKey)) {\n      return NextResponse.json(\n        { error: \"Rate limit exceeded. Please try again later.\" },\n        { status: 429 },\n      );\n    }\n\n ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["issue_reports"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1089": {
        "file": "app/api/support/issue-report/route.ts",
        "query": "\")\n    .insert({\n      id: crypto.randomUUID(),\n      user_id: userId,\n      type: issueData.type,\n      title: issueData.title,\n      description: issueData.description,\n      priority: issueData.pri...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1090": {
        "file": "app/api/support/issue-report/route.ts",
        "query": "\",\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    })\n    .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1091": {
        "file": "app/api/support/issue-report/route.ts",
        "query": "\")\n    .single();\n\n  if (error) {\n    throw new Error(`Failed to create issue report: ${error.message}`);\n  }\n\n  return data.id;\n}\n\nasync function notifySupport(\n  issueId: string,\n  issueData: z.infe...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "route.ts_1092": {
        "file": "app/api/support/issue-report/route.ts",
        "query": "\")\n    .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-schemas.ts_1093": {
        "file": "app/api/weather/enhanced/schemas/weather-schemas.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-schemas.ts_1094": {
        "file": "app/api/weather/enhanced/schemas/weather-schemas.ts",
        "query": "\"delete\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1095": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "`;\n\n        // In production, this would save to database\n        const subscription = {\n          id: newSubscriptionId,\n          user_id: userId,\n          locations: locations,\n          alert_typ...",
        "operationType": "update",
        "complexity": 9,
        "estimatedLatency": 125,
        "tables": ["database", "database"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "weather-post-handlers.ts_1096": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "`,\n              locations: [\"Example Location\"],\n              alert_types: [\"severe_weather\"],\n              status: \"active\",\n              created_at: new Date().toISOString(),\n            },\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1097": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1098": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "\"Subscription ID is required for updates\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1099": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "\"Weather alerts subscription updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1100": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "\"delete\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1101": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "\" },\n            { status: 400 },\n          );\n        }\n\n        // In production, this would delete from database\n        return NextResponse.json({\n          success: true,\n          subscription_i...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["database"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "weather-post-handlers.ts_1102": {
        "file": "app/api/weather/enhanced/services/weather-post-handlers.ts",
        "query": "\"Invalid action. Use: create, update, delete, or list\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1103": {
        "file": "lib/supabase/admin.ts",
        "query": ".select('*')\n *   .eq('role', 'admin')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1104": {
        "file": "lib/supabase/admin.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1105": {
        "file": "lib/supabase/admin.ts",
        "query": "`typescript\n * // Basic usage\n * const adminClient = createAdminClient();\n *\n * // With audit logging enabled\n * const adminClient = createAdminClient({\n *   enableAuditLog: true\n * });\n *\n * // Use f...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1106": {
        "file": "lib/supabase/admin.ts",
        "query": "`\n *\n * @security\n * - Only use for trusted server-side operations\n * - Never expose admin client to client-side code\n * - Always audit admin operations in production\n * - Implement rate limiting for ...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "admin.ts_1107": {
        "file": "lib/supabase/admin.ts",
        "query": "`typescript\n * const users = await withAdminOperation(\n *   async (client) => {\n *     const { data } = await client.from('users').select('*');\n *     return data;\n *   },\n *   'LIST_ALL_USERS',\n *   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1108": {
        "file": "lib/supabase/admin.ts",
        "query": "')\n *   .select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1109": {
        "file": "lib/supabase/admin.ts",
        "query": "');\n * ```\n *\n * @security\n * - Only use for trusted server-side operations\n * - Never expose admin client to client-side code\n * - Always audit admin operations in production\n * - Implement rate limi...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "admin.ts_1110": {
        "file": "lib/supabase/admin.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1111": {
        "file": "lib/supabase/admin.ts",
        "query": "\" as const,\n    });\n  }\n};\n\n/**\n * Create an admin Supabase client with elevated permissions\n *\n * @description Creates a Supabase client using the service role key,\n * which bypasses Row Level Securi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "admin.ts_1112": {
        "file": "lib/supabase/admin.ts",
        "query": "\",\n        details: {\n          bypassRLS: options.bypassRLS !== false,\n          rateLimiting: options.enableRateLimiting,\n        },\n        success: false, // Will be updated on success\n        dur...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "client-factory.ts_1113": {
        "file": "lib/supabase/client-factory.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1114": {
        "file": "lib/supabase/client-factory.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1115": {
        "file": "lib/supabase/client-factory.ts",
        "query": "`;\n\n    // Check if we already have a pooled client for this configuration\n    if (this.pooledClients.has(clientKey)) {\n      const usage = this.clientUsage.get(clientKey) || 0;\n      this.clientUsage...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "client-factory.ts_1116": {
        "file": "lib/supabase/client-factory.ts",
        "query": "\");\n    }\n\n    return client;\n  }\n\n  /**\n   * Add monitoring to client operations\n   */\n  private static addClientMonitoring(\n    client: TypedSupabaseClient,\n    context: string,\n  ) {\n    const orig...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1117": {
        "file": "lib/supabase/client-factory.ts",
        "query": "\", table, context, startTime);\n        return result;\n      };\n\n      queryBuilder.insert = (...args: any[]) => {\n        const result = originalInsert(...args);\n        this.trackQueryPerformance(\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1118": {
        "file": "lib/supabase/client-factory.ts",
        "query": "\", table, context, startTime);\n        return result;\n      };\n\n      queryBuilder.update = (...args: any[]) => {\n        const result = originalUpdate(...args);\n        this.trackQueryPerformance(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1119": {
        "file": "lib/supabase/client-factory.ts",
        "query": "\", table, context, startTime);\n        return result;\n      };\n\n      queryBuilder.delete = (...args: any[]) => {\n        const result = originalDelete(...args);\n        this.trackQueryPerformance(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1120": {
        "file": "lib/supabase/client-factory.ts",
        "query": "\" ||\n      this.pooledClients.has(`pooled_${JSON.stringify({})}`)\n    ) {\n      releasePooledClient(client);\n    }\n  }\n\n  /**\n   * Get client usage statistics\n   */\n  static getUsageStats() {\n    retu...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client-factory.ts_1121": {
        "file": "lib/supabase/client-factory.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client.ts_1122": {
        "file": "lib/supabase/client.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client.ts_1123": {
        "file": "lib/supabase/client.ts",
        "query": "`typescript\n * import { supabase } from '@/lib/supabase/client';\n *\n * // Use the client\n * const { data, error } = await supabase\n *   .from('users')\n *   .select('*');\n *\n * // Auth operations\n * co...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client.ts_1124": {
        "file": "lib/supabase/client.ts",
        "query": "')\n *   .select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "client.ts_1125": {
        "file": "lib/supabase/client.ts",
        "query": "\",\n        );\n      }\n\n      // Create the client with browser-specific configuration\n      instance = createSupabaseClient<Database>(\n        config.url,\n        config.anonKey,\n        BROWSER_CLIEN...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connection-pool.ts_1126": {
        "file": "lib/supabase/connection-pool.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connection-pool.ts_1127": {
        "file": "lib/supabase/connection-pool.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connection-pool.ts_1128": {
        "file": "lib/supabase/connection-pool.ts",
        "query": "`typescript\n * // Old usage:\n * import { withConnection } from './connection-pool';\n * const result = await withConnection(async (client) => {\n *   return await client.from('users').select('*');\n * })...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users", "users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connection-pool.ts_1129": {
        "file": "lib/supabase/connection-pool.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connection-pool.ts_1130": {
        "file": "lib/supabase/connection-pool.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1131": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".select(\"id\")\n          .limit(1)\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1132": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".select(\"id\").limit(1),\n        // Auth verification\n        connection.client.auth.getSession(),\n        // Simple database function test\n        connection.client.rpc(\"version\"), // Built-in Postgre...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1133": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".delete(testConnection.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1134": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".delete(connection.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1135": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".delete(id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1136": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".delete(connection.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1137": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".delete(connection.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1138": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": ".rpc(\"version\"), // Built-in Postgres function\n      ])",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1139": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "`);\n        }\n      } finally {\n        // Clean up test connection\n        this.connections.delete(testConnection.id);\n      }\n\n      // Test pool capacity\n      const stats = this.getStatistics();\n ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1140": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "`, error);\n    }\n  }\n\n  private async scaleUp(targetIncrease: number): Promise<void> {\n    const connectionPromises = Array.from(\n      { length: targetIncrease },\n      async () => {\n        try {\n  ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1141": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "`;\n    }\n\n    return \"Unknown reason\";\n  }\n\n  private getHealthRecommendations(stats: any): string[] {\n    const recommendations: string[] = [];\n\n    if (stats.utilization > 90) {\n      recommendation...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1142": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "`,\n          error,\n        );\n      }\n    });\n\n    await Promise.allSettled(healthCheckPromises);\n  }\n\n  /**\n   * Perform comprehensive health check on individual connection\n   */\n  private async per...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": ["profiles"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1143": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "`,\n        error,\n      );\n      connection.healthScore = Math.max(0, connection.healthScore - 30);\n      connection.errors++;\n      connection.state = ConnectionState.ERROR;\n      return false;\n    }...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1144": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "`, error);\n      }\n    }\n  }\n\n  /**\n   * Handle degraded pool state with performance optimization\n   */\n  private async handleDegradedPool(): Promise<void> {\n    console.warn(\"⚠️ Pool degraded - optim...",
        "operationType": "delete",
        "complexity": 5,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1145": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\");\n      return;\n    }\n\n    // Update connection metrics and health score\n    const responseTime = Date.now() - connection.lastUsed.getTime();\n    connection.totalResponseTime += responseTime;\n    co...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1146": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1147": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\",\n          success: !error,\n          latency: dbLatency,\n        });\n\n        if (error) {\n          errors.push(`Database connectivity test failed: ${error.message}`);\n        }\n      } finally {\n...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1148": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\", error);\n          return null;\n        }\n      },\n    );\n\n    await Promise.all(connectionPromises);\n  }\n\n  private async scaleDown(targetDecrease: number): Promise<void> {\n    // Find idle connect...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1149": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\", error);\n      }\n    }, this.config.healthCheckInterval);\n\n    // Individual connection health monitoring with adaptive frequency\n    setInterval(async () => {\n      await this.performBulkConnection...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1150": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\").select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1151": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\",\n      ).length;\n      const healthPercentage = (successfulTests / healthTests.length) * 100;\n\n      // Update health score based on comprehensive test results\n      if (healthPercentage === 100) {\n...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1152": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\");\n\n    // Remove failed connections\n    const failedConnections = Array.from(this.connections.values()).filter(\n      (c) => c.state === ConnectionState.ERROR || c.healthScore < 20,\n    );\n\n    fail...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dynamic-connection-pool.ts_1153": {
        "file": "lib/supabase/dynamic-connection-pool.ts",
        "query": "\");\n\n    // Identify and replace poorly performing connections\n    const unhealthyConnections = Array.from(this.connections.values()).filter(\n      (c) => !c.inUse && c.healthScore < 50,\n    );\n\n    c...",
        "operationType": "delete",
        "complexity": 5,
        "estimatedLatency": 85,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1154": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".select(options.select)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1155": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".select(\"*\")",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1156": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".select(options.returning)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1157": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".select(options.returning)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1158": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".select(options.returning)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1159": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".select(options.returning)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1160": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".insert(records)",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1161": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".insert(batch)",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1162": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".update(data)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1163": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".delete()",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1164": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": ".rpc(functionName, parameters)",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1165": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`;\n      const cachedResult = await this.cache.get<TableRow<T>[]>(cacheKey);\n\n      if (cachedResult !== null) {\n        const executionTime = Date.now() - startTime;\n        this.recordMetrics({\n    ...",
        "operationType": "select",
        "complexity": 6,
        "estimatedLatency": 100,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1166": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`;\n        const ttl = options.cacheTTL || this.cacheConfig.defaultTTL;\n        await this.cache.set(cacheKey, data, {\n          ttl,\n          tags: [table, \"select\"],\n          dependencies: this.ge...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1167": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`INSERT INTO ${table}`",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1168": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`UPDATE ${table}`",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1169": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`UPDATE ${table}`",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1170": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`DELETE FROM ${table}`",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1171": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`DELETE FROM ${table}`",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1172": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`SELECT ${functionName}(...)`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1173": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`SELECT ${functionName}(...)`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1174": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`SELECT ${functionName}(...)`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1175": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`BATCH INSERT INTO ${table}`",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1176": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "`;\n  }\n\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      has...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1177": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\";\nimport type {\n  TypedSupabaseClient,\n  TableName,\n  TableRow,\n  TableInsert,\n  TableUpdate,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1178": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\";\n\n// Query performance metrics\ninterface QueryMetrics {\n  queryId: string;\n  sql: string;\n  parameters: unknown[];\n  executionTime: number;\n  rowsAffected?: number;\n  fromCache: boolean;\n  timestamp...",
        "operationType": "insert",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1179": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"],\n  },\n};\n\n/**\n * Advanced Query Optimizer with prepared statements and caching\n */\nexport class QueryOptimizer {\n  private client: TypedSupabaseClient;\n  private preparedStatements = new Map<string...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1180": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\", table, options);\n\n    // Check cache first if enabled\n    if (options.useCache !== false && this.cacheConfig.enabled) {\n      const cacheKey = `query:${queryId}`;\n      const cachedResult = await t...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1181": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1182": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"INSERT\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1183": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"UPDATE\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1184": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"DELETE\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1185": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\", functionName, { parameters });\n\n    // Check cache first if enabled\n    if (options.useCache !== false && this.cacheConfig.enabled) {\n      const cacheKey = `rpc:${queryId}`;\n      const cachedResu...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1186": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"],\n        });\n      }\n\n      // Record metrics\n      this.recordMetrics({\n        queryId,\n        sql: `SELECT ${functionName}(...)`,\n        parameters: Object.values(parameters),\n        executio...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1187": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\" });\n  }\n\n  // Private helper methods\n\n  private async executeBatchInsert<T extends TableName>(\n    table: T,\n    records: TableInsert<T>[],\n    options: any,\n    queryId: string,\n    startTime: numb...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "query-optimizer.ts_1188": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\");\n    }\n\n    const selectQueries = analytics.slowQueries.filter((q) =>\n      q.sql.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "query-optimizer.ts_1189": {
        "file": "lib/supabase/query-optimizer.ts",
        "query": "\"),\n    );\n    if (selectQueries.length > 5) {\n      recommendations.push(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1190": {
        "file": "lib/supabase/schema-validator.ts",
        "query": ".select(\"*\")\n        .eq(\"table_name\", tableName)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1191": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`);\n      }\n\n      // Apply transformations if enabled\n      let transformedData = data;\n      const transformations: string[] = [];\n\n      if (options.transform !== false) {\n        const transformRe...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1192": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`,\n            warnings,\n          );\n        }\n\n        const result: ValidationResult<any> = {\n          success: false,\n          errors,\n          warnings,\n          transformations:\n            ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["select"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1193": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`Update application schema to include: ${extraFields.join(\", \")}`",
        "operationType": "unknown",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1194": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`Review type mismatches and update schema accordingly`",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1195": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`],\n      };\n    }\n  }\n\n  /**\n   * Get validation performance metrics\n   */\n  getMetrics(): ValidationMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset validation metrics\n   */\n  resetMe...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1196": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`;\n\n    // Check memory cache first\n    if (this.schemas.has(schemaKey)) {\n      return this.schemas.get(schemaKey)!;\n    }\n\n    // Load schema from cache or database\n    return await this.loadSchema(...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["cache"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1197": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`, error);\n      return null;\n    }\n  }\n\n  private createSchemaForTable(\n    tableName: string,\n    operation: \"insert\" | \"update\" | \"select\",\n  ): z.ZodSchema | null {\n    // Define schemas for known...",
        "operationType": "select",
        "complexity": 27,
        "estimatedLatency": 310,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 3
      },
      "schema-validator.ts_1198": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`);\n          }\n        } catch (error) {\n          // Ignore parsing errors\n        }\n      }\n    }\n\n    return { data: transformedData, transformations };\n  }\n\n  private generateWarnings(\n    data: ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1199": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`;\n  }\n\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      has...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1200": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`);\n      }\n    }\n  }\n\n  private updateCacheHitMetrics(): void {\n    const totalRequests = this.metrics.totalValidations;\n    const cacheHits =\n      Math.round(this.metrics.cacheHitRate * (totalReque...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1201": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "`, driftResult);\n          }\n        }\n      } catch (error) {\n        console.error(\"Schema drift monitoring failed:\", error);\n      }\n    }, this.config.driftCheckInterval);\n  }\n}\n\n// Singleton inst...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1202": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\";\nimport type {\n  TypedSupabaseClient,\n  TableName,\n  TableRow,\n  TableInsert,\n  TableUpdate,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1203": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\";\n\n// Validation result interface\ninterface ValidationResult<T = unknown> {\n  success: boolean;\n  data?: T;\n  errors?: z.ZodError[];\n  warnings?: string[];\n  transformations?: string[];\n  performance...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1204": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1205": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1206": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1207": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1208": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"],\n          });\n        }\n\n        return result;\n      } else {\n        this.metrics.failedValidations++;\n\n        const errors = validationResult.error ? [validationResult.error] : [];\n        con...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1209": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\",\n              message: error instanceof Error ? error.message : String(error),\n              path: [],\n            },\n          ]),\n        ],\n        performance: { validationTime },\n      };\n    ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1210": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\", {\n      strict: true,\n      transform: true,\n      ...options,\n    });\n  }\n\n  /**\n   * Validate and transform data for update operations\n   */\n  async validateUpdate<T extends TableName>(\n    table...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1211": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\", {\n      allowUnknown: true,\n      transform: true,\n      ...options,\n    });\n  }\n\n  /**\n   * Validate query results from select operations\n   */\n  async validateSelect<T extends TableName>(\n    tab...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["select"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1212": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\" as any)\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1213": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\")}`,\n        );\n      }\n      if (extraFields.length > 0) {\n        recommendations.push(\n          `Update application schema to include: ${extraFields.join(\"",
        "operationType": "unknown",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1214": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\")}`,\n        );\n      }\n      if (typeChanges.length > 0) {\n        recommendations.push(\n          `Review type mismatches and update schema accordingly`,\n        );\n      }\n\n      return {\n        ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1215": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1216": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1217": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1218": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1219": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1220": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1221": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1222": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1223": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1224": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1225": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\",\n          ]),\n          notes: z.string().max(2000).optional(),\n          expires_at: BaseSchemas.timestamp.optional(),\n          created_by: BaseSchemas.uuid,\n        }),\n        update: z.object(...",
        "operationType": "update",
        "complexity": 7,
        "estimatedLatency": 120,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1226": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"])\n            .optional(),\n          notes: z.string().max(2000).optional(),\n          expires_at: BaseSchemas.timestamp.optional(),\n          updated_at: BaseSchemas.timestamp.optional(),\n        }...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1227": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"),\n        }),\n        update: z.object({\n          email: BaseSchemas.email.optional(),\n          full_name: z.string().min(1).max(255).optional(),\n          company_name: z.string().max(255).option...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1228": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"]).optional(),\n          updated_at: BaseSchemas.timestamp.optional(),\n        }),\n        select: z.object({\n          id: z.string(),\n          email: z.string(),\n          full_name: z.string(),\n ...",
        "operationType": "select",
        "complexity": 17,
        "estimatedLatency": 210,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 3
      },
      "schema-validator.ts_1229": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"DELETE FROM\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1230": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"insert\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1231": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "schema-validator.ts_1232": {
        "file": "lib/supabase/schema-validator.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1233": {
        "file": "lib/supabase/server-pooled.ts",
        "query": ".select(\"id\")\n        .limit(1)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1234": {
        "file": "lib/supabase/server-pooled.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1235": {
        "file": "lib/supabase/server-pooled.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1236": {
        "file": "lib/supabase/server-pooled.ts",
        "query": ".delete(id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1237": {
        "file": "lib/supabase/server-pooled.ts",
        "query": ".delete(connection.id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1238": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "`;\n\n    const client = createClient<Database>(\n      config.url,\n      config.serviceRoleKey!,\n      ADMIN_CLIENT_CONFIG,\n    ) as TypedSupabaseClient;\n\n    const connection: PooledConnection = {\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1239": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "`);\n    }\n  }\n\n  private cleanupIdleConnections(): void {\n    const now = Date.now();\n    const minConnections = this.config.minConnections;\n\n    Array.from(this.connections.entries()).forEach(([id, c...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1240": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "`);\n        }\n      }\n    });\n  }\n\n  private setupProcessHandlers(): void {\n    // Cleanup on process exit\n    process.once(\"exit\", () => this.shutdown());\n    process.once(\"SIGINT\", () => this.shutdo...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1241": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "`);\n\n      for (let i = 0; i < needed; i++) {\n        try {\n          await this.createConnection();\n        } catch (error) {\n          console.error(\"Failed to create replacement connection:\", error...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1242": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "`typescript\n * const client = await createPooledClient();\n * try {\n *   const { data } = await client.from('users').select('*');\n *   // Use data\n * } finally {\n *   releasePooledClient(client);\n * }\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1243": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "`typescript\n * const users = await withPooledClient(async (client) => {\n *   const { data } = await client.from('users').select('*');\n *   return data;\n * });\n * `",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1244": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "'re at max capacity and degraded, consider if some connections are unhealthy\n    const stats = this.getStatistics();\n    if (\n      stats.inUse === stats.total &&\n      stats.total === this.config.max...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1245": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1246": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1247": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1248": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "\", result.errors);\n        await this.handleDegradedPool(result);\n      }\n\n      // Update connection health scores\n      this.updateConnectionHealthScores(result);\n\n      // Log health metrics period...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1249": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "\", error);\n      await this.handleHealthCheckFailure(error);\n    }\n  }\n\n  private cleanupOldMetrics(): void {\n    const cutoff = Date.now() - 3600000; // Keep last hour\n    const cutoffDate = new Date...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1250": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "\");\n\n    // Remove failed connections\n    const failedConnections = Array.from(this.connections.values()).filter(\n      (c) => c.state === ConnectionState.ERROR,\n    );\n\n    failedConnections.forEach(...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1251": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "\");\n      // Note: In production, you might want to add logic to detect and recover stuck connections\n    }\n  }\n\n  private updateConnectionHealthScores(result: HealthCheckResult): void {\n    // For th...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "server-pooled.ts_1252": {
        "file": "lib/supabase/server-pooled.ts",
        "query": "\", error.message);\n\n    // If health checks are consistently failing, we might have a systemic issue\n    // For now, we'll just log it, but in production you might want to:\n    // 1. Alert monitoring ...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": ["the", "users", "users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1253": {
        "file": "lib/supabase/server.ts",
        "query": ".select('*')\n *     .eq('user_id', user.id)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1254": {
        "file": "lib/supabase/server.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1255": {
        "file": "lib/supabase/server.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1256": {
        "file": "lib/supabase/server.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1257": {
        "file": "lib/supabase/server.ts",
        "query": ".delete(name)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1258": {
        "file": "lib/supabase/server.ts",
        "query": "`typescript\n * // In a Server Component\n * import { createServerClient } from '@/lib/supabase/server';\n *\n * export default async function Page() {\n *   const supabase = await createServerClient();\n *...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["posts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1259": {
        "file": "lib/supabase/server.ts",
        "query": "`typescript\n * // In a Route Handler\n * import { createServerClient } from '@/lib/supabase/server';\n * import { NextResponse } from 'next/server';\n *\n * export async function GET() {\n *   const supaba...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["items"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1260": {
        "file": "lib/supabase/server.ts",
        "query": "`, error);\n            }\n          },\n          remove(name: string, options: any) {\n            try {\n              // Note: Removing cookies in Server Components is not supported\n              // Th...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1261": {
        "file": "lib/supabase/server.ts",
        "query": "`typescript\n * const result = await createServerClientSafe();\n * if (result.success && result.client) {\n *   const { data } = await result.client.from('items').select('*');\n * } else {\n *   console.er...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["items"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1262": {
        "file": "lib/supabase/server.ts",
        "query": "`typescript\n * const posts = await withServerClient(async (client) => {\n *   const { data } = await client.from('posts').select('*');\n *   return data;\n * });\n * `",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["posts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1263": {
        "file": "lib/supabase/server.ts",
        "query": "')\n *     .select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1264": {
        "file": "lib/supabase/server.ts",
        "query": "')\n *     .select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1265": {
        "file": "lib/supabase/server.ts",
        "query": "');\n *\n *   if (error) {\n *     return NextResponse.json({ error: error.message }, { status: 500 });\n *   }\n *\n *   return NextResponse.json({ data });\n * }\n * ```\n */\nexport const createServerClient ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1266": {
        "file": "lib/supabase/server.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1267": {
        "file": "lib/supabase/server.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1268": {
        "file": "lib/supabase/server.ts",
        "query": "\";\n\n/**\n * Create a server-side Supabase client with user session\n *\n * @description Creates a Supabase client for server-side operations in Next.js\n * Route Handlers and Server Components. Automatica...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["posts", "items"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1269": {
        "file": "lib/supabase/server.ts",
        "query": "\",\n        false,\n        { originalError: error },\n      );\n    }\n\n    // Create the server client with cookie handling\n    const client = createSupabaseServerClient<Database>(\n      config.url,\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["items"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "server.ts_1270": {
        "file": "lib/supabase/server.ts",
        "query": "\",\n  );\n\n  return {\n    success: result.success,\n    client: result.data,\n    error: result.error,\n  };\n};\n\n/**\n * Create a server client with retry logic\n *\n * @param {ServerClientOptions} options - ...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": ["posts"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "supabase-config.ts_1271": {
        "file": "lib/supabase/supabase-config.ts",
        "query": "\");\n        throw new Error(`Supabase configuration validation failed: ${issues}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get configuration or throw if not loaded\n   */\n  getConfig(): Supab...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1272": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1273": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1274": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "`\n */\nexport async function createSupabaseClientSafe(\n  options: SupabaseFactoryOptions = {},\n): Promise<{\n  success: boolean;\n  client?: TypedSupabaseClient;\n  error?: Error;\n}> {\n  const result = aw...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1275": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "`typescript\n * // Automatic client selection\n * const users = await withSupabaseClient(async (client) => {\n *   const { data } = await client.from('users').select('*');\n *   return data;\n * });\n *\n * ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users", "users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1276": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "'re in a Next.js server context\n    require(\"next/headers\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Unified factory for creating Supabase clients\n *\n * @description Creates the a...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1277": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "', result.error);\n * }\n * ```\n */\nexport async function createSupabaseClientSafe(\n  options: SupabaseFactoryOptions = {},\n): Promise<{\n  success: boolean;\n  client?: TypedSupabaseClient;\n  error?: Err...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1278": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1279": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "').select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1280": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Unified factory for creating Supabase clients\n *\n * @description Creates the appropriate Supabase client based on the environment\n * an...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-factory.ts_1281": {
        "file": "lib/supabase/supabase-factory.ts",
        "query": "\",\n  );\n\n  return {\n    success: result.success,\n    client: result.data,\n    error: result.error,\n  };\n}\n\n/**\n * Execute an operation with automatic client selection\n *\n * @param {Function} operation...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["users", "users"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-types.ts_1282": {
        "file": "lib/supabase/supabase-types.ts",
        "query": "\"];\n\n/**\n * Utility type for extracting table insert types\n */\nexport type TableInsert<T extends TableName> =\n  Database[\"",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-types.ts_1283": {
        "file": "lib/supabase/supabase-types.ts",
        "query": "\"Insert\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "supabase-types.ts_1284": {
        "file": "lib/supabase/supabase-types.ts",
        "query": "\"Update\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "universal-client.ts_1285": {
        "file": "lib/supabase/universal-client.ts",
        "query": ".select('*')",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "universal-client.ts_1286": {
        "file": "lib/supabase/universal-client.ts",
        "query": "`typescript\n * // Automatic environment detection\n * const client = createClient();\n *\n * // Use the client\n * const { data, error } = await client\n *   .from('items')\n *   .select('*');\n * `",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["items"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "universal-client.ts_1287": {
        "file": "lib/supabase/universal-client.ts",
        "query": "')\n *   .select('",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "universal-client.ts_1288": {
        "file": "lib/supabase/universal-client.ts",
        "query": "\";\n}\n\n/**\n * Create a universal Supabase client that works in any environment\n *\n * @description Creates a Supabase client that automatically adapts to the\n * current runtime environment. In browser e...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["items"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ThreeDDemoPageDynamic.tsx_1289": {
        "file": "components/3d-demo/ThreeDDemoPageDynamic.tsx",
        "query": "\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Demo Selection Card Skeleton */}\n      <Card>\n        <CardContent className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1290": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } catch (error) {\n        logger.error(\"Export failed:\"...",
        "operationType": "unknown",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1291": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1292": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "\">\n          <Select\n            value={dashboard.timeRange}\n            onValueChange={dashboard.setTimeRange}\n          >\n            <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1293": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1294": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "\">Last 24h</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1295": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "\">Last 7 days</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAnalyticsDashboard.tsx_1296": {
        "file": "components/ai/AIAnalyticsDashboard.tsx",
        "query": "\">Last 30 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAssistantChatEnhanced.tsx_1297": {
        "file": "components/ai/AIAssistantChatEnhanced.tsx",
        "query": "`,\n    )\n    .refine(\n      (msg) => msg.trim().length > 0,\n      \"Message cannot contain only whitespace\",\n    ),\n});\n\ntype EnhancedChatMessageData = z.infer<typeof enhancedChatMessageSchema>;\n\ninter...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["useAIAssistant"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIAssistantChatEnhanced.tsx_1298": {
        "file": "components/ai/AIAssistantChatEnhanced.tsx",
        "query": "\",\n  showFeatures = true,\n}: AIAssistantChatEnhancedProps) {\n  const [messageStatuses, setMessageStatuses] = useState<\n    Record<string, MessageStatus>\n  >({});\n  const [isRecording, setIsRecording] ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIErrorBoundary.tsx_1299": {
        "file": "components/ai/AIErrorBoundary.tsx",
        "query": "\";\n\n// Base error boundary class for reuse\nexport abstract class BaseErrorBoundary extends Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    supe...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIErrorRecovery.tsx_1300": {
        "file": "components/ai/AIErrorRecovery.tsx",
        "query": "'ll try a different model.\",\n        icon: AlertCircle,\n        color: \"text-yellow-600\",\n        canRetry: true,\n      };\n    }\n\n    return {\n      type: \"general\",\n      title: \"AI Service Error\",\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIErrorRecovery.tsx_1301": {
        "file": "components/ai/AIErrorRecovery.tsx",
        "query": "\" onClick={onDismiss}>\n                Dismiss\n              </Button>\n            )}\n          </div>\n        </div>\n      </AlertDescription>\n    </Alert>\n  );\n}\n\ninterface AIServiceStatusProps {\n  ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIInputValidator.tsx_1302": {
        "file": "components/ai/AIInputValidator.tsx",
        "query": "`),\n            );\n          } else {\n            errors.push(\"Validation failed\");\n          }\n        }\n      }\n\n      // Additional AI-specific validations\n      if (typeof sanitizedData === \"strin...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "AIInputValidator.tsx_1303": {
        "file": "components/ai/AIInputValidator.tsx",
        "query": "\",\n    ),\n\n  // Building type selection\n  buildingType: z.enum([\n    \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIInputValidator.tsx_1304": {
        "file": "components/ai/AIInputValidator.tsx",
        "query": "\",\n  ]),\n\n  // Service type selection\n  serviceType: z.enum([\n    \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1305": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "`,\n    requests: aggregated.hourlyDistribution[hour] || 0,\n  }));\n\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884D8\"];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Heade...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1306": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1307": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1308": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1309": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "\">Last Hour</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1310": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "\">Last Day</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIMetricsDashboard.tsx_1311": {
        "file": "components/ai/AIMetricsDashboard.tsx",
        "query": "\">Last Week</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Button\n            variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIUsageDisplay.tsx_1312": {
        "file": "components/ai/AIUsageDisplay.tsx",
        "query": "'ve used {monthlyPercentage.toFixed(0)}% of your monthly\n                  quota\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIUsageDisplay.tsx_1313": {
        "file": "components/ai/AIUsageDisplay.tsx",
        "query": "\">\n                <CardTitle>Usage Over Time</CardTitle>\n                <select\n                  value={timeRange}\n                  onChange={(e) => setTimeRange(e.target.value)}\n                 ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AIUsageDisplay.tsx_1314": {
        "file": "components/ai/AIUsageDisplay.tsx",
        "query": "\">Last 30 Days</option>\n                </select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1315": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "`}\n          aria-haspopup=\"listbox\"\n          aria-autocomplete=\"list\"\n          aria-activedescendant={\n            selectedIndex >= 0\n              ? `",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1316": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "`}\n                type=\"button\"\n                onClick={() => handleSelectPrediction(prediction.value)}\n                onMouseDown={(e) => e.preventDefault()} // Prevent focus issues\n              ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1317": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "`}\n                role=\"option\"\n                aria-selected={index === selectedIndex}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span cla...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1318": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\",\n}: PredictiveInputProps) {\n  const [predictions, setPredictions] = useState<PredictiveInputType>({\n    field,\n    predictions: [],\n    isLoading: false,\n  });\n  const [showPredictions, setShowPredi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1319": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\",\n            preferences: {},\n          },\n        };\n\n        const predictiveInput =\n          await SmartDefaultsEngine.generatePredictiveInputs(\n            field,\n            value,\n           ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1320": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\":\n        e.preventDefault();\n        setSelectedIndex((prev) =>\n          prev < predictions.predictions.length - 1 ? prev + 1 : prev,\n        );\n        break;\n      case \"",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1321": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\":\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev > 0 ? prev - 1 : -1));\n        break;\n      case \"",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1322": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\":\n        e.preventDefault();\n        if (selectedIndex >= 0) {\n          handleSelectPrediction(predictions.predictions[selectedIndex].value);\n        }\n        break;\n      case \"",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1323": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\":\n        setShowPredictions(false);\n        setSelectedIndex(-1);\n        break;\n    }\n  };\n\n  const handleSelectPrediction = (predictionValue: string) => {\n    onChange(predictionValue);\n    setSho...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1324": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\"\n          aria-activedescendant={\n            selectedIndex >= 0\n              ? `${field}-prediction-${selectedIndex}`\n              : undefined\n          }\n        />\n\n        {predictions.predict...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1325": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\"\n                onClick={() => handleSelectPrediction(prediction.value)}\n                onMouseDown={(e) => e.preventDefault()} // Prevent focus issues\n                className={`w-full text-left ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "PredictiveInput.tsx_1326": {
        "file": "components/ai/PredictiveInput.tsx",
        "query": "\"\n                aria-selected={index === selectedIndex}\n              >\n                <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1327": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\",\n      aiExtractedData: undefined,\n    },\n  });\n\n  const handleUpdateData = (field: string, value: unknown) => {\n    const fieldParts = field.split(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1328": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\");\n    const updatedData = { ...demoData };\n\n    if (fieldParts.length === 2) {\n      if (!updatedData[fieldParts[0] as keyof GuidedFlowData]) {\n        (updatedData as any)[fieldParts[0]] = {};\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1329": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                    }\n                    onChange={(value) =>\n                      handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1330": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                    }\n                    onChange={(value) =>\n                      handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1331": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                    }\n                    onChange={(value) =>\n                      handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1332": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                    }\n                    onChange={(value) =>\n                      handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1333": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1334": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                    }\n                    onChange={(value) =>\n                      handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1335": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                    }\n                    onChange={(value) =>\n                      handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartDefaultsDemo.tsx_1336": {
        "file": "components/ai/SmartDefaultsDemo.tsx",
        "query": "\"\n                }\n                onChange={(value) => handleUpdateData(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1337": {
        "file": "components/ai/SmartField.tsx",
        "query": "` : undefined,\n    }),\n    [\n      inputId,\n      value,\n      placeholder,\n      disabled,\n      required,\n      showSmartDefault,\n      description,\n    ],\n  );\n\n  // Memoize onChange handler\n  cons...",
        "operationType": "select",
        "complexity": 5,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1338": {
        "file": "components/ai/SmartField.tsx",
        "query": "`,\n                );\n\n                return (\n                  <SelectItem\n                    key={`",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1339": {
        "file": "components/ai/SmartField.tsx",
        "query": "`}\n                    value={safeValue}\n                  >\n                    {safeLabel}\n                  </SelectItem>\n                );\n              })}\n            </SelectContent>\n         ...",
        "operationType": "unknown",
        "complexity": 10,
        "estimatedLatency": 125,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "SmartField.tsx_1340": {
        "file": "components/ai/SmartField.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1341": {
        "file": "components/ai/SmartField.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1342": {
        "file": "components/ai/SmartField.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1343": {
        "file": "components/ai/SmartField.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1344": {
        "file": "components/ai/SmartField.tsx",
        "query": "\"\n            />\n          );\n        }\n\n        return (\n          <Select\n            value={value || \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1345": {
        "file": "components/ai/SmartField.tsx",
        "query": "\"SmartField Select onChange error:\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SmartField.tsx_1346": {
        "file": "components/ai/SmartField.tsx",
        "query": "\"}\n            >\n              <SelectValue placeholder={placeholder} />\n            </SelectTrigger>\n            <SelectContent>\n              {safeOptions.map((option, index) => {\n                //...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1347": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "'m having trouble responding right now. Please try again.\",\n      };\n      setNonStreamingMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setNonStreamingLoading(false);\n    }\n  };\n\n...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1348": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1349": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\")}\n              />\n              Streaming\n            </Label>\n          </div>\n        </div>\n        <Select value={mode} onValueChange={setMode}>\n          <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1350": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\">\n            <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1351": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1352": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\">General Help</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1353": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\">Estimation Guidance</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1354": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\">Technical Support</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant-enhanced.tsx_1355": {
        "file": "components/ai/ai-assistant-enhanced.tsx",
        "query": "\">Business Advice</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Card className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1356": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1357": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\">AI Assistant</h2>\n        <Select value={mode} onValueChange={setMode}>\n          <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1358": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\">\n            <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1359": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1360": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\">General Help</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1361": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\">Estimation Guidance</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1362": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\">Technical Support</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ai-assistant.tsx_1363": {
        "file": "components/ai/ai-assistant.tsx",
        "query": "\">Business Advice</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Card className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FacadeAnalyzerInput.tsx_1364": {
        "file": "components/ai/facade-analyzer/FacadeAnalyzerInput.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FacadeAnalyzerInput.tsx_1365": {
        "file": "components/ai/facade-analyzer/FacadeAnalyzerInput.tsx",
        "query": "\">Building Type</Label>\n          <Select value={buildingType} onValueChange={setBuildingType}>\n            <SelectTrigger id=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FacadeAnalyzerInput.tsx_1366": {
        "file": "components/ai/facade-analyzer/FacadeAnalyzerInput.tsx",
        "query": "\"Select building type\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FacadeAnalyzerInput.tsx_1367": {
        "file": "components/ai/facade-analyzer/FacadeAnalyzerInput.tsx",
        "query": "\">Commercial</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FacadeAnalyzerInput.tsx_1368": {
        "file": "components/ai/facade-analyzer/FacadeAnalyzerInput.tsx",
        "query": "\">Residential</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FacadeAnalyzerInput.tsx_1369": {
        "file": "components/ai/facade-analyzer/FacadeAnalyzerInput.tsx",
        "query": "\">Industrial</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <Button\n          onClick={onAnalyze}\n          disabled={isAnalyzing || !imageUrl.trim()}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "initial-contact.tsx_1370": {
        "file": "components/ai/initial-contact.tsx",
        "query": "\";\n}\n\ninterface ExtractedData {\n  customer: Customer;\n  requirements: Requirements;\n  timeline: Timeline;\n  budget: Budget;\n  decisionMakers: {\n    primaryContact: string;\n    approvers: string[];\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "initial-contact.tsx_1371": {
        "file": "components/ai/initial-contact.tsx",
        "query": "\");\n  }\n  return flags;\n}\n\nexport function InitialContact({\n  data,\n  onUpdate,\n  onNext,\n  onBack,\n}: InitialContactProps) {\n  const [loading, setLoading] = useState(false);\n  const [contactData, set...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "initial-contact.tsx_1372": {
        "file": "components/ai/initial-contact.tsx",
        "query": "\",\n      });\n    }\n    setLoading(false);\n  };\n\n  const handleNext = () => {\n    onUpdate({ initialContact: contactData });\n    onNext();\n  };\n\n  return (\n    <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "initial-contact.tsx_1373": {
        "file": "components/ai/initial-contact.tsx",
        "query": "\">\n          Start by entering the email thread, meeting notes, or details from\n          your initial contact.\n        </p>\n      </div>\n\n      {/* Contact Method Selection */}\n      <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["your"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1374": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "`,\n      file,\n      type,\n      url,\n      uploaded: false,\n    };\n  }, []);\n\n  const handleFileSelect = useCallback(\n    (selectedFiles: FileList | null) => {\n      if (!selectedFiles) return;\n\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1375": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\";\n  url: string;\n  uploaded?: boolean;\n  photoId?: string;\n  analysis?: {\n    windows?: {\n      count: number;\n      totalArea: number;\n      gridPattern: string;\n      confidence: number;\n    };\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1376": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\";\n\n    return {\n      id: `${Date.now()}-${Math.random().toString(36).substring(2)}`,\n      file,\n      type,\n      url,\n      uploaded: false,\n    };\n  }, []);\n\n  const handleFileSelect = useCallbac...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1377": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\"Please select valid image files\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1378": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\"],\n        compress: true,\n      });\n\n      if (result.success && result.data) {\n        // Update files with analysis results\n        setFiles((prev) =>\n          prev.map((file) => {\n            if...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1379": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\">\n            Click to select or drag and drop images here\n          </p>\n          <Button variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1380": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\">\n            Select Files\n          </Button>\n          <input\n            ref={fileInputRef}\n            type=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "photo-upload-analysis.tsx_1381": {
        "file": "components/ai/photo-upload-analysis.tsx",
        "query": "\"\n            onChange={(e) => handleFileSelect(e.target.files)}\n          />\n        </div>\n      </Card>\n\n      {/* File Preview Grid */}\n      {files.length > 0 && (\n        <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "scope-details.tsx_1382": {
        "file": "components/ai/scope-details.tsx",
        "query": "\";\n\ninterface ScopeDetailsData {\n  selectedServices: string[];\n  serviceOrder: string[];\n  autoAddedServices: string[];\n  overrides: Record<string, { price?: number; reason?: string }>;\n  scopeNotes: ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "scope-details.tsx_1383": {
        "file": "components/ai/scope-details.tsx",
        "query": "\" },\n];\n\nconst COMMON_BUNDLES = [\n  // Example: { name: 'Full Restoration', services: ['GR', 'FR', 'WC'] }\n];\n\n// Skeleton for ScopeDetails component\nexport function ScopeDetails({\n  data,\n  onUpdate,...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "scope-details.tsx_1384": {
        "file": "components/ai/scope-details.tsx",
        "query": "\">Scope Details</h2>\n      {/* Service selection, bundles, notes, etc. will go here */}\n      <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SimpleServiceSuggestions.tsx_1385": {
        "file": "components/ai/service-suggestions/SimpleServiceSuggestions.tsx",
        "query": "\";\n\ninterface SimpleServiceSuggestionsProps {\n  projectDescription: string;\n  selectedServices: ServiceType[];\n  onServicesSuggested: (services: ServiceType[]) => void;\n  className?: string;\n}\n\ninterf...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SimpleServiceSuggestions.tsx_1386": {
        "file": "components/ai/service-suggestions/SimpleServiceSuggestions.tsx",
        "query": "\",\n}: SimpleServiceSuggestionsProps) {\n  const [suggestions, setSuggestions] = useState<SimpleSuggestion[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [addedSuggestions, setAdde...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SimpleServiceSuggestions.tsx_1387": {
        "file": "components/ai/service-suggestions/SimpleServiceSuggestions.tsx",
        "query": "\",\n        confidence: 0.85,\n      });\n    }\n\n    return suggestions;\n  };\n\n  const handleAddSuggestion = (serviceType: ServiceType) => {\n    const newServices = [...selectedServices, serviceType];\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "hooks.ts_1388": {
        "file": "components/ai/shared/hooks.ts",
        "query": ".delete(options.cacheKey)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "hooks.ts_1389": {
        "file": "components/ai/shared/hooks.ts",
        "query": "`);\n        }\n\n        return response.json();\n      };\n\n      const result = await retryWithBackoff(fetchFn, options?.retries || 3);\n\n      setData(result);\n\n      // Cache the result\n      if (optio...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "hooks.ts_1390": {
        "file": "components/ai/shared/hooks.ts",
        "query": "\", err);\n        options?.onError?.(err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [url, options]);\n\n  const clearCache = useCallback(() => {\n    if (options?.cacheKey) {\n      cach...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "utils.ts_1391": {
        "file": "components/ai/shared/utils.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "utils.ts_1392": {
        "file": "components/ai/shared/utils.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "utils.ts_1393": {
        "file": "components/ai/shared/utils.ts",
        "query": "\",\n  ];\n\n  const message = error.message.toLowerCase();\n  return retryableMessages.some((msg) => message.includes(msg));\n};\n\n// Retry logic with exponential backoff\nexport const retryWithBackoff = asy...",
        "operationType": "delete",
        "complexity": 6,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1394": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "`,\n      name: newRule.name,\n      field: newRule.field,\n      operator: newRule.operator || \"equals\",\n      value: newRule.value,\n      isActive: newRule.isActive !== false,\n    };\n\n    setNewFilter(...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1395": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1396": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\",\n      isActive: true,\n    });\n  }, [newRule]);\n\n  const toggleFilterFavorite = useCallback((filterId: string) => {\n    setSavedFilters((prev) =>\n      prev.map((filter) =>\n        filter.id === fil...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1397": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Field</Label>\n                      <Select\n                        value={newRule.field || \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1398": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\"}\n                        onValueChange={(value) =>\n                          setNewRule((prev) => ({ ...prev, field: value }))\n                        }\n                      >\n                     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1399": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n                          <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1400": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1401": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Revenue</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1402": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n                            Customer Type\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1403": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n                            Service Type\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1404": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n                            Created Date\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1405": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Status</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1406": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Operator</Label>\n                      <Select\n                        value={newRule.operator || \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1407": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\"}\n                        onValueChange={(value: any) =>\n                          setNewRule((prev) => ({ ...prev, operator: value }))\n                        }\n                      >\n             ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1408": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1409": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Equals</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1410": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Contains</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1411": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n                            Greater Than\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1412": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Less Than</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1413": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Between</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1414": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\"\n          />\n        </div>\n        <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\n          <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1415": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1416": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Sort by Name</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1417": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Sort by Created</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1418": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Sort by Usage</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Filters List */}\n      <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1419": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\" />\n                      Duplicate\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      onClick={() => de...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1420": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n              {filter.descriptio...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1421": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n            <div>\n              <Label>Theme</Label>\n              <Select\n                value={settings.theme}\n                onValueChange={(value: any) =>\n                  setSettings((prev)...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1422": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Light</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1423": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Dark</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1424": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Auto</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Density</Label>\n              <Select\n                value={set...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1425": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Compact</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1426": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Comfortable</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1427": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Spacious</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1428": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Real-time Updates</Label>\n              <Switch\n                id=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1429": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">\n            <div>\n              <Label>Default Chart Type</Label>\n              <Select\n                value={settings.chartDefaults.type}\n                onValueChange={(value: any) =>\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1430": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Line Chart</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1431": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Bar Chart</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1432": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Area Chart</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AdvancedFilteringPersonalization.tsx_1433": {
        "file": "components/analytics/AdvancedFilteringPersonalization.tsx",
        "query": "\">Pie Chart</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1434": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n            <BarChart3 className=...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1435": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "`}\n            />\n            <span>\n              {isLoading\n                ? \"Updating...\"\n                : lastUpdated\n                  ? `",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1436": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "\",\n  });\n  const [showExportDialog, setShowExportDialog] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const [r...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1437": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "\">\n          {/* Last updated indicator */}\n          <div className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1438": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "\"\n                : lastUpdated\n                  ? `Updated ${lastUpdated.toLocaleTimeString()}`\n                  : \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1439": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "\">\n          <BenchmarkComparison\n            benchmarks={benchmarks}\n            currentMetrics={metrics}\n            onBenchmarkSelect={(benchmark) => {\n              // Handle benchmark selection\n ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsDashboard.tsx_1440": {
        "file": "components/analytics/AnalyticsDashboard.tsx",
        "query": "\">\n          <UserPerformanceTable\n            userStats={userStats}\n            onUserSelect={(userId) => {\n              // Handle user selection - could filter data\n              devLog(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsFilters.tsx_1441": {
        "file": "components/analytics/AnalyticsFilters.tsx",
        "query": "\"Select date\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsFilters.tsx_1442": {
        "file": "components/analytics/AnalyticsFilters.tsx",
        "query": "\"\n                onClick={() => {\n                  const current = filters.templates || [];\n                  const updated = current.includes(template)\n                    ? current.filter((t) => t...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsFilters.tsx_1443": {
        "file": "components/analytics/AnalyticsFilters.tsx",
        "query": "\"\n                onClick={() => {\n                  const current = filters.steps || [];\n                  const updated = current.includes(step)\n                    ? current.filter((s) => s !== ste...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsFilters.tsx_1444": {
        "file": "components/analytics/AnalyticsFilters.tsx",
        "query": "\">\n                    {filters.templates.length} selected\n                  </Badge>\n                </div>\n              )}\n              {filters.steps?.length && (\n                <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AnalyticsFilters.tsx_1445": {
        "file": "components/analytics/AnalyticsFilters.tsx",
        "query": "\">\n                    {filters.steps.length} selected\n                  </Badge>\n                </div>\n              )}\n              {filters.qualityRange && (\n                <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1446": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "`}>\n                      {currentValue.toFixed(1)}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <spa...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1447": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\";\n\ninterface BenchmarkComparisonProps {\n  benchmarks: WorkflowBenchmark[];\n  currentMetrics: AnalyticsMetric[];\n  onBenchmarkSelect?: (benchmark: WorkflowBenchmark) => void;\n  className?: string;\n}\n\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1448": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\",\n}: BenchmarkComparisonProps) {\n  const [selectedBenchmark, setSelectedBenchmark] =\n    useState<WorkflowBenchmark | null>(null);\n\n  const getBenchmarkIcon = (type: string) => {\n    switch (type) {\n...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1449": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\";\n  };\n\n  const handleBenchmarkClick = (benchmark: WorkflowBenchmark) => {\n    setSelectedBenchmark(benchmark);\n    onBenchmarkSelect?.(benchmark);\n  };\n\n  if (benchmarks.length === 0) {\n    return (...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1450": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">90th %ile</div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Detailed Benchmark View */}\n      {selectedB...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1451": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                {getBenchmarkTitle(selectedBenchmark.benchmarkType)} Benchmark\n                Details\n              </h3>\n              <Button\n                variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1452": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\"\n                onClick={() => setSelectedBenchmark(null)}\n              >\n                Close\n              </Button>\n            </div>\n\n            <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1453": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\",\n                      value: selectedBenchmark.p25,\n                      color: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1454": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\",\n                      value: selectedBenchmark.p50,\n                      color: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1455": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\",\n                      value: selectedBenchmark.p75,\n                      color: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1456": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\",\n                      value: selectedBenchmark.p90,\n                      color: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1457": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\",\n                      value: selectedBenchmark.p95,\n                      color: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1458": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                      {getCurrentValue(selectedBenchmark.benchmarkType).toFixed(\n                        1,\n                      )}\n                    </div>\n                  </div>\n\n           ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1459": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                      {selectedBenchmark.average.toFixed(1)}\n                    </div>\n                  </div>\n\n                  <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1460": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                      {selectedBenchmark.sampleSize.toLocaleString()}\n                    </div>\n                  </div>\n\n                  <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1461": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                      Last Updated\n                    </div>\n                    <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1462": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                      {selectedBenchmark.lastUpdated.toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n      ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1463": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\">\n                {selectedBenchmark.benchmarkType === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1464": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\" && (\n                  <>\n                    <p>• Focus on streamlining your slowest workflow steps</p>\n                    <p>• Consider using more AI assistance and templates</p>\n                ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "BenchmarkComparison.tsx_1465": {
        "file": "components/analytics/BenchmarkComparison.tsx",
        "query": "\" && (\n                  <>\n                    <p>• Increase validation checkpoints in your workflow</p>\n                    <p>• Spend more time on data verification steps</p>\n                    <p...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1466": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "`}\n            </CardTitle>\n\n            <div className=\"flex items-center gap-2\">\n              {enableFilters && (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1467": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1468": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">\n                          Aggregation\n                        </label>\n                        <Select\n                          value={filterState.aggregation}\n                          onValueCha...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1469": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1470": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">Sum</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1471": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">Average</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1472": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">Count</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1473": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">Maximum</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ChartOptimizations.tsx_1474": {
        "file": "components/analytics/ChartOptimizations.tsx",
        "query": "\">Minimum</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1475": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error(\"Export failed:\", ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1476": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1477": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\";\nimport {\n  useRealTimeMetrics,\n  useDataQualityUpdates,\n  useAIPredictionUpdates,\n  useAnomalyAlerts,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1478": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\");\n  const [refreshInterval, setRefreshInterval] = useState(300000); // 5 minutes\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date(...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1479": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\"]);\n  const { latestQuality, isConnected: qualityConnected } =\n    useDataQualityUpdates();\n  const { latestPrediction, isConnected: predictionsConnected } =\n    useAIPredictionUpdates();\n  const {\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1480": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\",\n      );\n      if (predictionsResponse.ok) {\n        const predictionsData = await predictionsResponse.json();\n        setAiPredictions(predictionsData.data);\n      }\n\n      setLastUpdated(new Date...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1481": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchRealTimeData();\n    const interval = setInterval(fetchRealTimeData, refreshInterval);\n    return () ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1482": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">\n              Updated: {new Date(metric.timestamp).toLocaleTimeString()}\n            </p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n\n  const renderDataQualityPanel = () => ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1483": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1484": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1485": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">7 days</SelectItem>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1486": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">30 days</SelectItem>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1487": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">90 days</SelectItem>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1488": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\">1 year</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button\n              variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConsolidatedAnalyticsDashboard.tsx_1489": {
        "file": "components/analytics/ConsolidatedAnalyticsDashboard.tsx",
        "query": "\"}\n                  {effectiveAnomalies.length} anomalies detected\n                </>\n              ) : (\n                <>\n                  Last updated: {lastUpdated.toLocaleTimeString()} •\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1490": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "`;\n\n    const blob = new Blob([content], { type: \"text/plain\" });\n    return URL.createObjectURL(blob);\n  };\n\n  const handleExport = async () => {\n    setIsExporting(true);\n\n    try {\n      // Simulat...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1491": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "`;\n\n      setExportComplete(true);\n    } catch (error) {\n      logError(\"Analytics export failed\", {\n        component: \"ExportDialog\",\n        action: \"handleExport\",\n        exportType,\n        sele...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1492": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\");\n  const [selectedSections, setSelectedSections] = useState<string[]>([\n    \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1493": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\",\n    },\n  ];\n\n  const handleSectionToggle = (sectionId: string) => {\n    setSelectedSections((prev) =>\n      prev.includes(sectionId)\n        ? prev.filter((id) => id !== sectionId)\n        : [...pr...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1494": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\" });\n    return URL.createObjectURL(blob);\n  };\n\n  const handleExport = async () => {\n    setIsExporting(true);\n\n    try {\n      // Simulate export process\n      await new Promise((resolve) => setTim...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1495": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\",\n        exportType,\n        selectedSections,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const reset...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1496": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\")[0]}.${exportType}`;\n                    link.click();\n\n                    // Clean up the object URL after download\n                    setTimeout(() => {\n                      if ((window as any)...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1497": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\">\n              {/* Export Type Selection */}\n              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1498": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\">\n                            {type.description}\n                          </span>\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1499": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\"\n                    >\n                      <Checkbox\n                        id={section.id}\n                        checked={selectedSections.includes(section.id)}\n                        onChecke...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1500": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\">Frequency</Label>\n                        <select className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1501": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\">\n                          <option>Daily</option>\n                          <option>Weekly</option>\n                          <option>Monthly</option>\n                        </select>\n             ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1502": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\">\n                        <span>Templates:</span>\n                        <span>{filters.templates.length} selected</span>\n                      </div>\n                    )}\n                  </div>...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1503": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\">\n                    Based on your selections, the export will be approximately{\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ExportDialog.tsx_1504": {
        "file": "components/analytics/ExportDialog.tsx",
        "query": "\"\n                  onClick={() => {\n                    resetDialog();\n                    onClose();\n                  }}\n                >\n                  Cancel\n                </Button>\n       ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1505": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\",\n}: InsightPanelProps) {\n  const [selectedInsight, setSelectedInsight] =\n    useState<PredictiveInsight | null>(null);\n  const [filterType, setFilterType] = useState<string>(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1506": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\").length,\n    },\n  ];\n\n  const handleInsightClick = (insight: PredictiveInsight) => {\n    setSelectedInsight(insight);\n    onInsightClick?.(insight);\n  };\n\n  if (insights.length === 0) {\n    return (...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1507": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleInsightClick(insight);\n                        }}\n                      >\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1508": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\"\n                onClick={() => setSelectedInsight(null)}\n              >\n                <XCircle className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1509": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                      {selectedInsight.prediction}\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1510": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                        <span>Confidence:</span>\n                        <span>\n                          {(selectedInsight.confidence * 100).toFixed(1)}%\n                        </span>\n          ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1511": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                        <span>Probability:</span>\n                        <span>\n                          {(selectedInsight.probability * 100).toFixed(1)}%\n                        </span>\n        ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1512": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                          {selectedInsight.impact}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n        ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1513": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                        {selectedInsight.affectedUsers.join(\"",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1514": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                        {selectedInsight.affectedWorkflows.length} workflows\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </Ta...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1515": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                  {selectedInsight.recommendations.map((rec, index) => (\n                    <div key={index} className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InsightPanel.tsx_1516": {
        "file": "components/analytics/InsightPanel.tsx",
        "query": "\">\n                  {selectedInsight.actionItems.map((item, index) => (\n                    <Card key={index} className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedAnalyticsDashboard.tsx_1517": {
        "file": "components/analytics/UnifiedAnalyticsDashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedAnalyticsDashboard.tsx_1518": {
        "file": "components/analytics/UnifiedAnalyticsDashboard.tsx",
        "query": "\";\nimport {\n  useRealTimeMetrics,\n  useDataQualityUpdates,\n  useAIPredictionUpdates,\n  useAnomalyAlerts,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedAnalyticsDashboard.tsx_1519": {
        "file": "components/analytics/UnifiedAnalyticsDashboard.tsx",
        "query": "\");\n  const [data, setData] = useState<UnifiedAnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [refreshin...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedAnalyticsDashboard.tsx_1520": {
        "file": "components/analytics/UnifiedAnalyticsDashboard.tsx",
        "query": "\",\n  });\n\n  // Use standard analytics hook for basic mode\n  const analyticsResult = config.features.standardAnalytics\n    ? useAnalytics(filters, userId, teamId)\n    : {\n        metrics: [],\n        i...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedAnalyticsDashboard.tsx_1521": {
        "file": "components/analytics/UnifiedAnalyticsDashboard.tsx",
        "query": "\"]\n        : [],\n    );\n\n  const { latestQuality, isConnected: qualityConnected } =\n    useDataQualityUpdates(enableWebSocket && config.features.dataQuality);\n\n  const { latestPrediction, isConnected:...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedAnalyticsDashboard.tsx_1522": {
        "file": "components/analytics/UnifiedAnalyticsDashboard.tsx",
        "query": "\")?.value || 0,\n            revenueGrowthRate: 0.15,\n            averageDealSize: 5000,\n            winRate: 0.65,\n            salesCycleLength: 21,\n            customerAcquisitionCost: 500,\n         ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1523": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "`hover:bg-gray-50 cursor-pointer ${\n                      selectedUser === user.userId ? \"bg-blue-50\" : \"\"\n                    }`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1524": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "\";\n\ninterface UserPerformanceTableProps {\n  userStats: UserWorkflowStats[];\n  onUserSelect?: (userId: string) => void;\n  className?: string;\n}\n\ntype SortField =\n  | \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1525": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "\";\n\nexport function UserPerformanceTable({\n  userStats,\n  onUserSelect,\n  className = \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1526": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "\");\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1527": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "\" ? aValue - bValue : bValue - aValue;\n      }\n\n      return 0;\n    });\n  }, [userStats, sortField, sortDirection]);\n\n  const handleUserClick = (userId: string) => {\n    setSelectedUser(selectedUser =...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1528": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "\">\n                  Monthly Rate\n                </SortableHeader>\n                <TableHead>Trends</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            <...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UserPerformanceTable.tsx_1529": {
        "file": "components/analytics/UserPerformanceTable.tsx",
        "query": "\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onUserSelect?.(user.userId);\n                        }}\n                      >\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1530": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "` : value))\n        .join(\",\"),\n    );\n    return [headers, ...rows].join(\"\\n\");\n  };\n\n  // Custom tooltip with more details\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (acti...",
        "operationType": "select",
        "complexity": 7,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1531": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "`}\n            >\n              {getTrendIcon(data.overview.yearOverYear)}\n              <span className=\"ml-1\">\n                {formatPercentage(Math.abs(data.overview.yearOverYear))} vs last\n       ...",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1532": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "`\n                  }\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"revenue\"\n                  onClick={(data) => {\n                    console.log(\"Se...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1533": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "`}\n                      fill={COLORS[index % COLORS.length]}\n                    />\n                  ))}\n                </Pie>\n                <Tooltip\n                  formatter={(value) => [\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1534": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\", // Gray\n];\n\nexport function AnalyticsOverview({ data }: AnalyticsOverviewProps) {\n  const [selectedDateRange, setSelectedDateRange] = useState<number>(12);\n  const [zoomDomain, setZoomDomain] = use...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1535": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\")\n                ? formatCurrency(entry.value)\n                : entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Filter data based on selected d...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1536": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\"\n            onClick={() => setSelectedDateRange(3)}\n          >\n            3M\n          </Button>\n          <Button\n            variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1537": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\"\n            onClick={() => setSelectedDateRange(6)}\n          >\n            6M\n          </Button>\n          <Button\n            variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1538": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\"\n            onClick={() => setSelectedDateRange(12)}\n          >\n            12M\n          </Button>\n        </div>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1539": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\">\n              <div>\n                <CardTitle>Revenue Trend</CardTitle>\n                <CardDescription>\n                  Monthly revenue over selected period\n                </CardDescription>\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1540": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\"Selected service:\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1541": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\"Selected service:\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-analytics-overview.tsx_1542": {
        "file": "components/analytics/enhanced-analytics-overview.tsx",
        "query": "\"Selected customer:\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1543": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "`}\n      >\n        <div className=\"flex items-center space-x-3\">\n          <EventTypeIcon eventType={event.event_type} />\n          <div>\n            <div className=\"font-medium\">{event.action}</div>\n...",
        "operationType": "select",
        "complexity": 7,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1544": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error detecting suspicious activity\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      }...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1545": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1546": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\";\n  message: string;\n  details?: unknown;\n}\n\n// Custom hook for debounced filters\nconst useAuditFilters = (initialFilters: AuditFilters = {}) => {\n  const [filters, setFilters] = useState<AuditFilter...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1547": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\", result.error);\n        }\n      });\n    },\n    [filters],\n  );\n\n  const clearFilters = useCallback(() => {\n    startTransition(() => {\n      setFilters({});\n    });\n  }, []);\n\n  return {\n    filters...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1548": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\" />,\n    estimate_updated: <FileText className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1549": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">\n      Unable to load the audit dashboard\n    </p>\n    <Button onClick={() => window.location.reload()}>Reload Page</Button>\n  </div>\n);\n\n// Virtual List Item Component\nconst AuditEventItem: React.F...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1550": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"\n        onClick={() => data.onSelectEvent(event)}\n        role=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1551": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\") {\n            e.preventDefault();\n            data.onSelectEvent(event);\n          }\n        }}\n        aria-label={`Audit event: ${event.action} at ${new Date(event.created_at).toLocaleString()}`}...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1552": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">{event.compliance_tags[0]}</Badge>\n          )}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport const AuditDashboard: React.FC = () => {\n  const { filters, updateFilters, clearFilters,...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1553": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"}\n                    onChange={(e) =>\n                      updateFilters({ startDate: e.target.value })\n                    }\n                    aria-label=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1554": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"}\n                    onChange={(e) => updateFilters({ endDate: e.target.value })}\n                    aria-label=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1555": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"\n                  >\n                    Severity\n                  </label>\n                  <Select\n                    onValueChange={(value) =>\n                      updateFilters({ severity: [v...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1556": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"\n                    >\n                      <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1557": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1558": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">Low</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1559": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">Medium</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1560": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">High</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1561": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">Critical</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label\n                    htmlFor={eventTypeId}...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1562": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"\n                  >\n                    Event Type\n                  </label>\n                  <Select\n                    onValueChange={(value) =>\n                      updateFilters({ eventTypes...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1563": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"\n                    >\n                      <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1564": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1565": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">User Login</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1566": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">API Access</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1567": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">Data Access</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1568": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">\n                        Security Violation\n                      </SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1569": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">System Error</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label\n                    htmlFor={userIdFi...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1570": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"}\n                    onChange={(e) => updateFilters({ userId: e.target.value })}\n                    maxLength={100}\n                    aria-label=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1571": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\"\n                >\n                  <List\n                    height={384}\n                    itemCount={eventsData?.events?.length || 0}\n                    itemSize={80}\n                    itemD...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1572": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">\n                      Analyze user behavior patterns for security threats\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1573": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">{selectedEvent.event_type}</p>\n                </div>\n                <div>\n                  <label className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1574": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">Severity</label>\n                  <SeverityBadge severity={selectedEvent.severity} />\n                </div>\n                <div>\n                  <label className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1575": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">{selectedEvent.user_id || \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1576": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">{selectedEvent.ip_address || \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1577": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">\n                    {selectedEvent.resource_type\n                      ? `${selectedEvent.resource_type}:${selectedEvent.resource_id}`\n                      : \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1578": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">\n                    {new Date(selectedEvent.created_at).toLocaleString()}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1579": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">{selectedEvent.action}</p>\n              </div>\n\n              <div>\n                <label className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "audit-dashboard.tsx_1580": {
        "file": "components/audit/audit-dashboard.tsx",
        "query": "\">\n                  {selectedEvent.compliance_tags.map((tag, index) => (\n                    <Badge key={index} variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "two-factor-setup.tsx_1581": {
        "file": "components/auth/two-factor-setup.tsx",
        "query": ".select(\"enabled, verified, backup_codes_generated\")\n        .eq(\"user_id\", user.id)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "two-factor-setup.tsx_1582": {
        "file": "components/auth/two-factor-setup.tsx",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DynamicFormLoader.tsx_1583": {
        "file": "components/calculator/DynamicFormLoader.tsx",
        "query": "\">\n        No service selected\n      </div>\n    );\n  }\n\n  const renderForm = () => {\n    const commonProps = {\n      onSubmit,\n      onCancel,\n      estimateId,\n    };\n\n    switch (serviceType) {\n    ...",
        "operationType": "select",
        "complexity": 25,
        "estimatedLatency": 230,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "biofilm-removal-form.tsx_1584": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1585": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1586": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1587": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1588": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1589": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1590": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Biofilm Severity</FormLabel>\n                      <Select\n                        onValueC...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1591": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1592": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Light</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1593": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Moderate</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1594": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Severe</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Light: $0.75/sq ft, Moderate: $0.87/sq ft...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1595": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Surface Type</FormLabel>\n                      <Select\n                        onValueChang...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1596": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1597": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Concrete</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1598": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Stone</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1599": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Metal</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1600": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Glass</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "biofilm-removal-form.tsx_1601": {
        "file": "components/calculator/forms/biofilm-removal-form.tsx",
        "query": "\">Mixed Surfaces</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Type of surface affected by biofi...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1602": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "` state from the hook\n    } catch (error) {\n      toast({\n        title: \"Analysis failed\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["the"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1603": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1604": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Building Type</FormLabel>\n                      <Select\n                        onValueChan...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1605": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1606": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                            Office Building\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1607": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                            Retail/Shopping\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1608": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                            Residential\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1609": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Industrial</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1610": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Mixed Use</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1611": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                            Institutional\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1612": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                          <Select\n                            value={img.type}\n                            onValueChange={(value) => {\n                              const updated = [...uploadedImag...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1613": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1614": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Aerial</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1615": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Ground</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1616": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Drone</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1617": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                                Satellite\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n\n                          <Se...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1618": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1619": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Front</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1620": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Rear</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1621": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Left Side</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1622": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Right Side</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1623": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Oblique</SelectItem>\n                              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_1624": {
        "file": "components/calculator/forms/facade-analysis-form.tsx",
        "query": "\">Top</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </CardContent>\n                      </Card>\n                    ))}\n       ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "final-clean-form.tsx_1625": {
        "file": "components/calculator/forms/final-clean-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "final-clean-form.tsx_1626": {
        "file": "components/calculator/forms/final-clean-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "final-clean-form.tsx_1627": {
        "file": "components/calculator/forms/final-clean-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "final-clean-form.tsx_1628": {
        "file": "components/calculator/forms/final-clean-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "final-clean-form.tsx_1629": {
        "file": "components/calculator/forms/final-clean-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "final-clean-form.tsx_1630": {
        "file": "components/calculator/forms/final-clean-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1631": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1632": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1633": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1634": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1635": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1636": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1637": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Frame Condition</FormLabel>\n                      <Select\n                        onValueCh...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1638": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1639": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\">Good Condition</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1640": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\">Fair Condition</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "frame-restoration-form.tsx_1641": {
        "file": "components/calculator/forms/frame-restoration-form.tsx",
        "query": "\">Poor Condition</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Good: 1.0x, Fair: 1.2x, Poor: 1.5...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "glass-restoration-form.tsx_1642": {
        "file": "components/calculator/forms/glass-restoration-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "glass-restoration-form.tsx_1643": {
        "file": "components/calculator/forms/glass-restoration-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "glass-restoration-form.tsx_1644": {
        "file": "components/calculator/forms/glass-restoration-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "glass-restoration-form.tsx_1645": {
        "file": "components/calculator/forms/glass-restoration-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "glass-restoration-form.tsx_1646": {
        "file": "components/calculator/forms/glass-restoration-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "glass-restoration-form.tsx_1647": {
        "file": "components/calculator/forms/glass-restoration-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1648": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1649": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1650": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1651": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1652": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1653": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1654": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Granite Condition</FormLabel>\n                      <Select\n                        onValue...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1655": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1656": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Good Condition</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1657": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Fair Condition</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1658": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Poor Condition</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Current condition of the granite ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1659": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Level</FormLabel>\n                      <Select\n                        onValueChan...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1660": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1661": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">Clean Only</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1662": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">\n                            Clean and Seal\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "granite-reconditioning-form.tsx_1663": {
        "file": "components/calculator/forms/granite-reconditioning-form.tsx",
        "query": "\">\n                            Restore and Seal\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1664": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1665": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1666": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1667": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1668": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1669": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1670": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Surface Complexity</FormLabel>\n                      <Select\n                        onValu...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1671": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1672": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\">Simple</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1673": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\">Moderate</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "high-dusting-form.tsx_1674": {
        "file": "components/calculator/forms/high-dusting-form.tsx",
        "query": "\">Complex</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Simple: $0.37/sq ft, Moderate: $0.55/sq ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1675": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1676": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1677": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1678": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1679": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1680": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1681": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Deck Level</FormLabel>\n                      <Select\n                        onValueChange=...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1682": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1683": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Ground Level</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1684": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Elevated</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1685": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">\n                            Underground\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1686": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Type</FormLabel>\n                      <Select\n                        onValueChang...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1687": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1688": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Sweep Only</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1689": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Wash Only</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1690": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">\n                            Sweep and Wash\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1691": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Drainage Complexity</FormLabel>\n                      <Select\n                        onVal...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1692": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1693": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Simple</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "parking-deck-form.tsx_1694": {
        "file": "components/calculator/forms/parking-deck-form.tsx",
        "query": "\">Complex</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Complexity of drainage system\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1695": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1696": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1697": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1698": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1699": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1700": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1701": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Surface Material</FormLabel>\n                      <Select\n                        onValueC...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1702": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1703": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">Brick</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1704": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">Concrete</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1705": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">Mixed Materials</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Brick: 160 sq ft/hr, Concrete: 1...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1706": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sealer Type</FormLabel>\n                      <Select\n                        onValueChange...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1707": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1708": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">\n                            Standard ($1.25/sq ft)\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1709": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">\n                            Premium ($1.35/sq ft)\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1710": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Coats</FormLabel>\n                      <Select\n                        onValueCh...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1711": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1712": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">1 Coat</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1713": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">2 Coats (+30%)</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-wash-seal-form.tsx_1714": {
        "file": "components/calculator/forms/pressure-wash-seal-form.tsx",
        "query": "\">3 Coats (+60%)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Each additional coat adds 30% to ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1715": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1716": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1717": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1718": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1719": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1720": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1721": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Surface Type</FormLabel>\n                      <Select\n                        onValueChang...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1722": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1723": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\">\n                            Regular Facade\n                          </SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1724": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\">Ornate Facade</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pressure-washing-form.tsx_1725": {
        "file": "components/calculator/forms/pressure-washing-form.tsx",
        "query": "\">Mixed Surfaces</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Regular: $0.35/sq ft, Ornate: $0....",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1726": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1727": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select\n                        onValueChange={f...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1728": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1729": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Raleigh</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1730": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Charlotte</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1731": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Greensboro</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1732": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Surface Material</FormLabel>\n                      <Select\n                        onValueC...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1733": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1734": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Vinyl</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1735": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Stucco</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1736": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Wood</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1737": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Composite</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1738": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Mixed Materials</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Type of surface material to be c...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1739": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contamination Level</FormLabel>\n                      <Select\n                        onVal...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1740": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1741": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Light</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1742": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Moderate</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "soft-washing-form.tsx_1743": {
        "file": "components/calculator/forms/soft-washing-form.tsx",
        "query": "\">Heavy</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Level of mold, mildew, or algae contaminat...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1744": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1745": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location*</FormLabel>\n                        <Select\n                          onVal...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1746": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">\n                              Raleigh ($75/hr)\n                            </SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1747": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">\n                              Charlotte ($65/hr)\n                            </SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1748": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">\n                              Greensboro ($75/hr)\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <For...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1749": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Crew Size</FormLabel>\n                        <Select\n                          onVal...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1750": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">1 Person</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1751": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">2 People</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1752": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">3 People</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1753": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">4 People</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n  ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1754": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Shift Length</FormLabel>\n                        <Select\n                          on...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1755": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">8 Hours</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "window-cleaning-form.tsx_1756": {
        "file": "components/calculator/forms/window-cleaning-form.tsx",
        "query": "\">10 Hours</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n  ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "lazy-forms.tsx_1757": {
        "file": "components/calculator/lazy-forms.tsx",
        "query": "\",\n);\n\n// Legacy dynamic form loader - use DynamicFormLoader from ./DynamicFormLoader.tsx instead\n// @deprecated This is kept for backward compatibility only\nexport const LegacyDynamicFormLoader = ({\n...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-calculator.tsx_1758": {
        "file": "components/calculator/service-calculator.tsx",
        "query": "`cursor-pointer transition-all hover:scale-105 hover:shadow-lg hover:border-border-focus active:scale-[1.02] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-action focus-vis...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-calculator.tsx_1759": {
        "file": "components/calculator/service-calculator.tsx",
        "query": "`}>\n                    <Icon className=\"h-6 w-6\" />\n                  </div>\n                  {service.popular && (\n                    <Badge\n                      variant=\"secondary\"\n             ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-calculator.tsx_1760": {
        "file": "components/calculator/service-calculator.tsx",
        "query": "\">\n        {SERVICES.map((service) => {\n          const Icon = service.icon;\n          const isSelected = services.some((s) => s.serviceType === service.id);\n\n          return (\n            <Card\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-calculator.tsx_1761": {
        "file": "components/calculator/service-calculator.tsx",
        "query": "\"\n                    >\n                      Popular\n                    </Badge>\n                  )}\n                  {isSelected && (\n                    <CheckCircle className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-calculator.tsx_1762": {
        "file": "components/calculator/service-calculator.tsx",
        "query": "\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Selected Services Summary */}\n      {services.length > 0 && (\n        <Car...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaBuilder.tsx_1763": {
        "file": "components/canvas/AreaBuilder.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1764": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\";\n\ninterface ShapeManager {\n  shapes: Shape[];\n  measurements: Measurement[];\n  selectedShapeId: string | null;\n  selectedMeasurementId: string | null;\n}\n\nexport function DrawingCanvas({\n  background...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1765": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\", error);\n          // TODO: Add user-facing error notification\n        });\n    }\n  }, [backgroundImage, drawingService]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Set canvas size\n  u...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": ["top"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1766": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1767": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\":\n          const newPoints = [...currentPoints, point];\n          setCurrentPoints(newPoints);\n\n          // Check for polygon completion (double-click or near first point)\n          if (newPoints.l...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1768": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\":\n          if (currentPoints.length === 0) {\n            setCurrentPoints([point]);\n          } else {\n            // Complete measurement\n            try {\n              const measurement = drawing...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1769": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\", error);\n              setCurrentPoints([]);\n              // TODO: Add user-facing error notification\n            }\n          }\n          break;\n      }\n    },\n    [\n      drawingService,\n      cur...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1770": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\") return;\n\n      const endPoint = getMousePosition(e);\n\n      // Only create rectangle if it has meaningful size\n      const width = Math.abs(endPoint.x - currentPoints[0].x);\n      const height = Ma...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1771": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\", error);\n          // TODO: Add user-facing error notification\n        }\n      }\n\n      setIsDrawing(false);\n      setCurrentPoints([]);\n      redrawCanvas();\n    },\n    [\n      drawingService,\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1772": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\" && currentPoints.length >= 3) {\n        // Complete polygon on double-click\n        try {\n          const shape = drawingService?.drawPolygon(currentPoints);\n          updateShapeManager();\n        ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1773": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\", error);\n          setCurrentPoints([]);\n          // TODO: Add user-facing error notification\n        }\n      }\n    },\n    [currentTool, currentPoints, drawingService, updateShapeManager],\n  );\n\n  ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1774": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\"Delete\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1775": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\") {\n        // Delete selected shape or measurement\n        if (shapeManager.selectedShapeId) {\n          drawingService?.removeShape(shapeManager.selectedShapeId);\n          updateShapeManager();\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DrawingCanvas.tsx_1776": {
        "file": "components/canvas/DrawingCanvas.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ToolPalette.tsx_1777": {
        "file": "components/canvas/ToolPalette.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ToolPalette.tsx_1778": {
        "file": "components/canvas/ToolPalette.tsx",
        "query": "\"Select\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "types.ts_1779": {
        "file": "components/canvas/types.ts",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1780": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\",\n    },\n  ];\n\n  const handleDataUpdate = (newData: any) => {\n    setSampleData((prev) => ({ ...prev, ...newData }));\n  };\n\n  return (\n    <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1781": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\">\n                  WebSocket-based real-time communication using Supabase&apos;s\n                  real-time infrastructure for instant updates.\n                </p>\n              </div>\n\n          ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1782": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\">\n                    Sub-second latency for real-time updates\n                  </span>\n                </li>\n                <li className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1783": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\">\n                    Optimistic updates with conflict recovery\n                  </span>\n                </li>\n                <li className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1784": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\">Simulation Mode:</label>\n                <select\n                  value={simulationMode}\n                  onChange={(e) => setSimulationMode(e.target.value as any)}\n                  className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1785": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\">Conflict Scenario</option>\n                </select>\n              </div>\n            </div>\n\n            <Alert className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1786": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\"\n            >\n              <CollaborativeStepExample\n                data={sampleData}\n                onUpdate={handleDataUpdate}\n                onNext={() => console.log(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationDemo.tsx_1787": {
        "file": "components/collaboration/CollaborationDemo.tsx",
        "query": "\">\n                  <div>\n                    1. User makes change → CollaborativeField captures input\n                  </div>\n                  <div>\n                    2. Change broadcasted → Rea...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1788": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "supabase.from(\"estimate_collaborators\").insert({\n        estimate_id: session.estimateId,\n        user_id: existingUser.id,\n        role,\n        permissions: getDefaultPermissions(role) as any,\n     ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": ["estimate_collaborators"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1789": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": ".select(\"id, email\")\n        .eq(\"email\", email)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1790": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": ".insert({\n        estimate_id: session.estimateId,\n        user_id: existingUser.id,\n        role,\n        permissions: getDefaultPermissions(role) as any,\n        invited_by: currentUser?.userId,\n   ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1791": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": ".delete()\n        .eq(\"estimate_id\", session.estimateId)\n        .eq(\"user_id\", userId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1792": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\";\n\ninterface CollaborationContextType {\n  // Session state\n  session: CollaborationSession | null;\n  isConnected: boolean;\n  isConnecting: boolean;\n  connectionError: string | null;\n\n  // Participant...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1793": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\",\n        },\n      );\n\n      // Set up event handlers\n      collaborationEngine.onPresenceUpdate((newParticipants) => {\n        setParticipants(newParticipants);\n\n        // Update current user info\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1794": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\",\n      );\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  /**\n   * Broadcast change to other collaborators\n   */\n  const broadcastChange = async (\n    stepId: string,\n    fieldPath: stri...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1795": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\")\n        .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1796": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\").insert({\n        estimate_id: session.estimateId,\n        user_id: existingUser.id,\n        role,\n        permissions: getDefaultPermissions(role) as any,\n        invited_by: currentUser?.userId,\n ...",
        "operationType": "insert",
        "complexity": 2,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1797": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\")\n        .delete()\n        .eq(\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1798": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\",\n      });\n    }\n  }, [autoConnect, estimateId, isConnected, isConnecting]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (engine) {\n        engine.disconnect();\n      }\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1799": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\":\n      return {\n        canEdit: true,\n        canComment: true,\n        canShare: true,\n        canDelete: true,\n        allowedSteps: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        restrictedFields: [],\n   ...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1800": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\":\n      return {\n        canEdit: true,\n        canComment: true,\n        canShare: false,\n        canDelete: false,\n        allowedSteps: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        restrictedFields: [\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborationProvider.tsx_1801": {
        "file": "components/collaboration/CollaborationProvider.tsx",
        "query": "\":\n      return {\n        canEdit: false,\n        canComment: true,\n        canShare: false,\n        canDelete: false,\n        allowedSteps: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        restrictedFields: [\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1802": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1803": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1804": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\",\n  showCollaborationInfo = true,\n  debounceMs = 500,\n}: CollaborativeFieldProps) {\n  const {\n    canEdit,\n    getFieldStatus,\n    getUserCursor,\n    activeUsers,\n    broadcastChange,\n    updatePrese...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1805": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\";\n\n  // Get users currently viewing/editing this field\n  const activeFieldUsers = activeUsers.filter((user) => {\n    const cursor = getUserCursor(user.userId);\n    return cursor?.fieldId === field;\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["external"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1806": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\", error);\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  // Handle focus events\n  const handleFocus = async () => {\n    setIsFocused(true);\n\n    if (canEditField) {\n      // Update presenc...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1807": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1808": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\"}\n            onValueChange={(newValue) => {\n              handleInputChange(newValue);\n            }}\n            disabled={isLocked}\n            onOpenChange={(open) => {\n              if (open) ha...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1809": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\">\n                      +{activeFieldUsers.length - 3}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Update indicator */}\n              {i...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeField.tsx_1810": {
        "file": "components/collaboration/CollaborativeField.tsx",
        "query": "\" />\n              <span>\n                Last updated by {recentChanges[0].userName}{\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeStepExample.tsx_1811": {
        "file": "components/collaboration/CollaborativeStepExample.tsx",
        "query": "\";\n\ninterface CollaborativeStepExampleProps {\n  data: any;\n  onUpdate: (data: any) => void;\n  onNext: () => void;\n  onBack: () => void;\n  stepId: string;\n}\n\nexport function CollaborativeStepExample({\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeStepExample.tsx_1812": {
        "file": "components/collaboration/CollaborativeStepExample.tsx",
        "query": "\")),\n      cursor: {\n        stepId,\n      },\n    });\n  }, [stepId, updatePresence]);\n\n  const handleFieldChange = async (field: string, value: any) => {\n    const oldValue = localData[field];\n    con...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeStepExample.tsx_1813": {
        "file": "components/collaboration/CollaborativeStepExample.tsx",
        "query": "\" />\n                <span>\n                  Last updated by {stepChanges[0].userName} -{\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeStepExample.tsx_1814": {
        "file": "components/collaboration/CollaborativeStepExample.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaborativeStepExample.tsx_1815": {
        "file": "components/collaboration/CollaborativeStepExample.tsx",
        "query": "\">\n                    updated {change.fieldPath}\n                  </span>\n                </div>\n                <span className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaboratorAvatars.tsx_1816": {
        "file": "components/collaboration/CollaboratorAvatars.tsx",
        "query": "`}\n                      />\n                    </div>\n                  </TooltipTrigger>\n                  <TooltipContent side={position}>\n                    <div className=\"text-center\">\n        ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaboratorAvatars.tsx_1817": {
        "file": "components/collaboration/CollaboratorAvatars.tsx",
        "query": "\"\n                  />\n                  <select\n                    value={inviteRole}\n                    onChange={(e) =>\n                      setInviteRole(e.target.value as \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaboratorAvatars.tsx_1818": {
        "file": "components/collaboration/CollaboratorAvatars.tsx",
        "query": "\">\n                      Viewer - Can view and comment\n                    </option>\n                  </select>\n                </div>\n                <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaboratorAvatars.tsx_1819": {
        "file": "components/collaboration/CollaboratorAvatars.tsx",
        "query": "\") {\n                      handleInviteCollaborator();\n                    }\n                  }}\n                />\n                <select\n                  value={inviteRole}\n                  onCh...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CollaboratorAvatars.tsx_1820": {
        "file": "components/collaboration/CollaboratorAvatars.tsx",
        "query": "\">Viewer - Can view and comment</option>\n                </select>\n              </div>\n              <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1821": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\";\n\ninterface ConflictResolutionDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  conflict?: any;\n}\n\nexport function ConflictResolutionDialog({\n  isOpen,\n  onClose,\n  conflict,\n}: ConflictReso...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1822": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\");\n\n  if (!isOpen || !conflict) return null;\n\n  const { localChanges, incomingChange } = conflict;\n  const localChange = localChanges?.[0];\n\n  // Get user information\n  const incomingUser = activeUse...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1823": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\" ? mergedValue : undefined;\n      await resolveConflict(\n        conflict.id || incomingChange.id,\n        selectedResolution,\n        mergeValue,\n      );\n\n      onClose();\n    } catch (error) {\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1824": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\">\n            Modified {new Date(incomingChange.timestamp).toLocaleString()}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderResolutionOptions = () => {\n    return (\n      <Ra...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1825": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\">\n              Combine both changes manually by editing the content below.\n            </p>\n\n            {selectedResolution === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1826": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                onClick={handleResolve}\n                disabled={\n                  isResolving ||\n          ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1827": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\"}\n              </Button>\n            </div>\n          </div>\n\n          {/* Resolution Summary */}\n          {selectedResolution && (\n            <Alert className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1828": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\">\n                <strong>Resolution Summary:</strong>\n                {selectedResolution === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1829": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\"}\n                {selectedResolution === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ConflictResolutionDialog.tsx_1830": {
        "file": "components/collaboration/ConflictResolutionDialog.tsx",
        "query": "\"}\n                {selectedResolution === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1831": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": ".delete(id))",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1832": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "`Updated ${fieldName}`",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1833": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "`;\n      case \"calculation_update\":\n        return `",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1834": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "\";\n\n  // Animate new changes\n  useEffect(() => {\n    const newChangeIds = relevantChanges\n      .filter((change) => !animatingChanges.has(change.id))\n      .map((change) => change.id);\n\n    if (newCha...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1835": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "\"field_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1836": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "\"calculation_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1837": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "\"field_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1838": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "\"calculation_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeChangeIndicator.tsx_1839": {
        "file": "components/collaboration/RealTimeChangeIndicator.tsx",
        "query": "\">\n                    {formatChangeDescription(change)}\n                  </div>\n\n                  {/* Show value changes for field updates */}\n                  {change.changeType === \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "constants.ts_1840": {
        "file": "components/drone/constants.ts",
        "query": "\",\n    DRONE_SELECTION_REQUIRED:\n      \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "constants.ts_1841": {
        "file": "components/drone/constants.ts",
        "query": "\",\n    DRONE_SELECTED: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "constants.ts_1842": {
        "file": "components/drone/constants.ts",
        "query": "\",\n  },\n\n  // Feature Flags (can be overridden by environment)\n  FEATURES: {\n    ENABLE_3D_MAPPING: true,\n    ENABLE_THERMAL_IMAGING: false,\n    ENABLE_LIVE_STREAMING: false,\n    ENABLE_AUTO_PILOT: tr...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 1
      },
      "drone-dashboard.tsx_1843": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\");\n  const [isEnabled, setIsEnabled] = useState(config.features.drone);\n  const [availableDrones, setAvailableDrones] = useState<DroneSpec[]>([]);\n  const [flightPlans, setFlightPlans] = useState<Fli...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1844": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\",\n        metadata: { projectId, objectives, droneId: selectedDrone.id },\n      });\n    } finally {\n      setIsCreatingPlan(false);\n    }\n  };\n\n  const executeFlightPlan = async (flightPlanId: string...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1845": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\",\n        metadata: { flightPlanId },\n      });\n    }\n  };\n\n  const getFlightSuitability = () => {\n    const drone = selectedDrone;\n    if (!drone) return { suitable: false, issues: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1846": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\">\n            {availableDrones.map((drone) => (\n              <Card\n                key={drone.id}\n                className={\n                  selectedDrone?.id === drone.id\n                    ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1847": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\" />\n                      {drone.name}\n                    </span>\n                    <Badge\n                      variant={\n                        selectedDrone?.id === drone.id ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1848": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\"\n                      }\n                    >\n                      {selectedDrone?.id === drone.id\n                        ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1849": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\">\n                          {cert}\n                        </Badge>\n                      ))}\n                    </div>\n\n                    <Button\n                      onClick={() => setSelectedD...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1850": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\"\n                    >\n                      {selectedDrone?.id === drone.id\n                        ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "drone-dashboard.tsx_1851": {
        "file": "components/drone/drone-dashboard.tsx",
        "query": "\"Select Drone\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "error-boundary.tsx_1852": {
        "file": "components/drone/error-boundary.tsx",
        "query": "\";\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  resetKeys?: Array<string | number>;\n  resetOnPropsChange?: boolea...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "error-boundary.tsx_1853": {
        "file": "components/drone/error-boundary.tsx",
        "query": "\",\n        errorCount: this.state.errorCount + 1,\n      },\n    });\n\n    // Update state with error details\n    this.setState((prevState) => ({\n      errorInfo,\n      errorCount: prevState.errorCount +...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1854": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "`),\n    reason: z.string().min(1, \"Please provide a reason for the override\"),\n    customReason: z.string().optional(),\n  })\n  .refine(\n    (data) => {\n      if (data.reason === \"Other (specify below)...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": ["dropdown"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1855": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1856": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\"Please select a service\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1857": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\"\n        : data.reason;\n    onOverride(data.service, parseFloat(data.duration), finalReason);\n\n    // Reset form\n    form.reset();\n    setShowForm(false);\n  };\n\n  const handleCancel = () => {\n    for...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1858": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\");\n    return serviceDurations.find((sd) => sd.service === selectedService);\n  };\n\n  // Filter out already overridden services from dropdown (unless allowing re-override)\n  const availableServices = ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["dropdown"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1859": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Service</FormLabel>\n                        <Select\n                          onValue...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1860": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {availableServices.map((sd) => (\n      ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1861": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\">\n                                    Current: {sd.finalDuration} days\n                                  </span>\n                                </div>\n                              </SelectItem>\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1862": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\"}\n                            {formatDurationChange(\n                              getSelectedServiceData()?.finalDuration || 0,\n                              parseFloat(form.watch(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1863": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Reason for Override</FormLabel>\n                        <Select\n                     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1864": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {OVERRIDE_REASONS.map((reasonOption) =>...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1865": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\">\n                            <span>Original Duration:</span>\n                            <span>\n                              {getSelectedServiceData()?.baseDuration || 0} days\n                     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1866": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\">\n                            <span>Weather Impact:</span>\n                            <span>\n                              +{getSelectedServiceData()?.weatherImpact || 0}{\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualOverride.tsx_1867": {
        "file": "components/duration/ManualOverride.tsx",
        "query": "\">\n                            <span>Current Total:</span>\n                            <span>\n                              {getSelectedServiceData()?.finalDuration || 0}{\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1868": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "`,\n        );\n        return;\n      }\n\n      // Sanitize reason input (prevent XSS)\n      const sanitizedReason = adjustmentForm.reason\n        .trim()\n        .replace(/[<>]/g, \"\")\n        .substring...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1869": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "`;\n  };\n\n  const calculatePosition = useCallback(\n    (date: Date): number => {\n      if (!date || isNaN(date.getTime())) return 0;\n      const daysSinceStart = Math.max(\n        0,\n        Math.ceil(...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1870": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "`absolute h-8 rounded-md cursor-pointer transition-all hover:shadow-md ${getServiceColor(\n                                entry.service,\n                                entry.weatherRisk,\n            ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1871": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "`,\n                                top: \"50%\",\n                                transform: \"translateY(-50%)\",\n                              }}\n                              onClick={() => setSelectedS...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1872": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1873": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\";\n\nexport function TimelineVisualization({\n  timeline,\n  onAdjust,\n  showDetails = true,\n}: TimelineVisualizationProps) {\n  const [selectedService, setSelectedService] = useState<string | null>(null)...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1874": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\" />\n          <p>Invalid timeline data</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const { validEntries, startDate, endDate, totalDays } = timelineBounds;\n\n  const handleOpenAdjustmentDial...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1875": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\",\n    });\n    setIsAdjustmentDialogOpen(true);\n  };\n\n  const handleAdjustmentSubmit = useCallback(() => {\n    if (selectedService && onAdjust) {\n      // Validate and sanitize date input\n      const ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1876": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\")\n        .substring(0, 500);\n\n      const adjustment = {\n        service: selectedService,\n        newStartDate,\n        newDuration,\n        adjustmentType: adjustmentForm.adjustmentType,\n        r...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1877": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\",\n      });\n    }\n  }, [selectedService, onAdjust, adjustmentForm]);\n\n  const getServiceColor = (\n    service: string,\n    weatherRisk: string,\n    status?: string,\n  ) => {\n    let baseColor = SERVI...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1878": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\",\n        }),\n        isWeekend: markerDate.getDay() === 0 || markerDate.getDay() === 6,\n      });\n    }\n    return markers;\n  }, [startDate, totalDays]);\n\n  // Memoize overlapping services calculati...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1879": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\"} ${\n                                selectedService === entry.service\n                                  ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1880": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\",\n                              }}\n                              onClick={() => setSelectedService(entry.service)}\n                            >\n                              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1881": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\"\n                  onClick={() => setSelectedService(entry.service)}\n                >\n                  <CardContent className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1882": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\"}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n        ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1883": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\">\n                  Service Details: {selectedService}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(() => {\n                  const details =...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1884": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\"\n                          onClick={() => {\n                            const entry = timeline.find(\n                              (t) => t.service === selectedService,\n                            );...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1885": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\">\n                              Adjustment Type\n                            </Label>\n                            <Select\n                              value={adjustmentForm.adjustmentType}\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1886": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\",\n                              ) =>\n                                setAdjustmentForm((prev) => ({\n                                  ...prev,\n                                  adjustmentType: value,...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1887": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\">\n                                  Delay Start\n                                </SelectItem>\n                                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1888": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\">\n                                  Advance Start\n                                </SelectItem>\n                                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1889": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\">\n                                  Extend Duration\n                                </SelectItem>\n                                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TimelineVisualization.tsx_1890": {
        "file": "components/duration/TimelineVisualization.tsx",
        "query": "\">\n                                  Reduce Duration\n                                </SelectItem>\n                              </SelectContent>\n                            </Select>\n                ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EnhancedErrorDisplay.tsx_1891": {
        "file": "components/error/EnhancedErrorDisplay.tsx",
        "query": "`p-4 border rounded-lg transition-all ${\n                      selectedAction?.id === action.id\n                        ? \"border-blue-300 bg-blue-50\"\n                        : \"border-gray-200 hover:...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EnhancedErrorDisplay.tsx_1892": {
        "file": "components/error/EnhancedErrorDisplay.tsx",
        "query": "\",\n}: EnhancedErrorDisplayProps) {\n  const [selectedAction, setSelectedAction] =\n    useState<ErrorRecoveryAction | null>(null);\n  const [executingAction, setExecutingAction] = useState<string | null>...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EnhancedErrorDisplay.tsx_1893": {
        "file": "components/error/EnhancedErrorDisplay.tsx",
        "query": "\">\n  >({});\n\n  // Auto-select primary recovery action\n  useEffect(() => {\n    if (errorMessage.recoveryActions.length > 0 && !selectedAction) {\n      setSelectedAction(errorMessage.recoveryActions[0])...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EnhancedErrorDisplay.tsx_1894": {
        "file": "components/error/EnhancedErrorDisplay.tsx",
        "query": "\">\n                {errorMessage.recoveryActions.map((action, index) => (\n                  <div\n                    key={action.id}\n                    className={`p-4 border rounded-lg transition-al...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorBoundary.tsx_1895": {
        "file": "components/error/ErrorBoundary.tsx",
        "query": "\",\n        error,\n      );\n      return;\n    }\n\n    // Check for infinite update loop specifically\n    if (error.message.includes(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorBoundary.tsx_1896": {
        "file": "components/error/ErrorBoundary.tsx",
        "query": "\"Infinite update loop detected, stopping error boundary processing:\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorBoundary.tsx_1897": {
        "file": "components/error/ErrorBoundary.tsx",
        "query": "\"Infinite Update Loop Detected\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorBoundary.tsx_1898": {
        "file": "components/error/ErrorBoundary.tsx",
        "query": "\"React detected an infinite update loop. This is likely caused by state updates in render functions.\"",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorBoundary.tsx_1899": {
        "file": "components/error/ErrorBoundary.tsx",
        "query": "\";\n    }\n  };\n\n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n    // Clear error history on unmount\n    this.errorHistory.clear();\n  }\n\n  /**\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1900": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1901": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">Demo Mode:</label>\n                  <Select\n                    value={demoMode}\n                    onValueChange={(value) =>\n                      setDemoMode(\n                        value as \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1902": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\",\n                      )\n                    }\n                  >\n                    <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1903": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1904": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">\n                        Smart Notifications\n                      </SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1905": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">Enhanced Display</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1906": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">\n                        Live Integration\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1907": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">Error Type:</label>\n                  <Select\n                    value={simulatedError}\n                    onValueChange={setSimulatedError}\n                  >\n                    <SelectTrigger ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ErrorRecoveryDemo.tsx_1908": {
        "file": "components/error/ErrorRecoveryDemo.tsx",
        "query": "\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {errorTypes.map((type) => (\n                        <SelectItem ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-card.tsx_1909": {
        "file": "components/estimates/estimate-card.tsx",
        "query": "\";\n\ninterface EstimateCardProps {\n  estimate: EstimateStoreState;\n  onView?: (estimateId: string) => void;\n  onEdit?: (estimateId: string) => void;\n  onDuplicate?: (estimateId: string) => void;\n  onDe...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-card.tsx_1910": {
        "file": "components/estimates/estimate-card.tsx",
        "query": "\",\n  });\n};\n\nexport const EstimateCard = memo(function EstimateCard({\n  estimate,\n  onView,\n  onEdit,\n  onDuplicate,\n  onDelete,\n  className,\n}: EstimateCardProps) {\n  return (\n    <Card\n      classNa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-card.tsx_1911": {
        "file": "components/estimates/estimate-card.tsx",
        "query": "\" />\n                  Duplicate\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={() => onDelete?.(estimate.id...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-card.tsx_1912": {
        "file": "components/estimates/estimate-card.tsx",
        "query": "\"\n                >\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-editor-optimized.tsx_1913": {
        "file": "components/estimates/estimate-editor-optimized.tsx",
        "query": "\",\n    },\n  });\n\n  // Load estimate data when component mounts\n  useEffect(() => {\n    if (estimateId) {\n      loadEstimate(estimateId);\n    }\n  }, [estimateId, loadEstimate]);\n\n  // Update form when ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-editor.tsx_1914": {
        "file": "components/estimates/estimate-editor.tsx",
        "query": "\",\n    },\n  });\n\n  // Load estimate data when component mounts\n  useEffect(() => {\n    if (estimateId) {\n      loadEstimate(estimateId);\n    }\n  }, [estimateId, loadEstimate]);\n\n  // Update form when ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1915": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "`}>\n      {/* Controls */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Search */}\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1916": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1917": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\";\n\ninterface EstimateListProps {\n  estimates: EstimateStoreState[];\n  onView?: (estimateId: string) => void;\n  onEdit?: (estimateId: string) => void;\n  onDuplicate?: (estimateId: string) => void;\n  o...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1918": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\"];\n\nexport const EstimateList = memo(function EstimateList({\n  estimates,\n  onView,\n  onEdit,\n  onDuplicate,\n  onDelete,\n  loading = false,\n  className,\n}: EstimateListProps) {\n  const [searchQuery, ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1919": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\"\n          />\n        </div>\n\n        {/* Status Filter */}\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1920": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\">\n            <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1921": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\" />\n          </SelectTrigger>\n          <SelectContent>\n            {statusOptions.map((status) => (\n              <SelectItem key={status} value={status}>\n                {status.charAt(0).toUpperC...",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1922": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\"\n                  : ` (${estimates.filter((e) => e.status === status).length})`}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        {/* Sort & View Con...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-list.tsx_1923": {
        "file": "components/estimates/estimate-list.tsx",
        "query": "\"\n          }\n        >\n          {filteredEstimates.map((estimate) => (\n            <EstimateCard\n              key={estimate.id}\n              estimate={estimate}\n              onView={onView}\n     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1924": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1925": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                 ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1926": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\">\n                      <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1927": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1928": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\"></div>\n                        <span>Draft</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1929": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\"></div>\n                        <span>Sent</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1930": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\"></div>\n                        <span>Approved</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "estimate-summary-section.tsx_1931": {
        "file": "components/estimates/estimate-summary-section.tsx",
        "query": "\"></div>\n                        <span>Rejected</span>\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n                <Form...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1932": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\";\n\ninterface FlowStep {\n  id: string;\n  title: string;\n  description: string;\n  component: React.ComponentType<any>;\n  validation?: (data: GuidedFlowData) => { isValid: boolean; errors: string[] };\n}...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1933": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\");\n      if (!data.scopeDetails?.selectedServices?.length)\n        errors.push(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1934": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\"Service selection\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1935": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\" &&\n    env.NEXT_PUBLIC_LEGACY_FLOW_SUPPORT;\n  const steps = isLegacyMode ? LEGACY_FLOW : FOUR_STEP_FLOW;\n\n  // Core state\n  const [currentStep, setCurrentStep] = useState(0);\n  const [flowData, setF...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1936": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\");\n    if (selectedTemplateId) {\n      // Import WorkflowTemplateService dynamically to avoid circular dependencies\n      import(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1937": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\").then(\n        ({ WorkflowTemplateService }) => {\n          const templateData = WorkflowTemplateService.applyTemplate(\n            selectedTemplateId,\n            {},\n          );\n          setFlow...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "EstimateFlowProvider.tsx_1938": {
        "file": "components/estimation/EstimateFlowProvider.tsx",
        "query": "\");\n        },\n      );\n    }\n  }, []);\n\n  // Auto-save hook with proper debouncing to prevent excessive saves\n  const { isSaving, lastSaved, hasUnsavedChanges } = useAutoSave({\n    data: flowData,\n  ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["auto", "auto"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1939": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "`}\n                  variant=\"outline\"\n                >\n                  <div className=\"flex items-center gap-1\">\n                    {getConfidenceIcon(pricingResult.confidence)}\n                 ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1940": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\";\n\n// Real-time Cost Breakdown Display Component\n// Shows live pricing updates throughout the guided workflow\n\nimport React, { useEffect, useState, useMemo } from \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1941": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\";\n\ninterface RealTimeCostBreakdownProps {\n  flowData: GuidedFlowData;\n  estimateId: string;\n  isCompact?: boolean;\n  showValidation?: boolean;\n  showConfidenceMetrics?: boolean;\n  enableLiveUpdates?:...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1942": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\",\n  onPricingUpdate,\n}: RealTimeCostBreakdownProps) {\n  // State management\n  const [pricingResult, setPricingResult] =\n    useState<RealTimePricingResult | null>(null);\n  const [isExpanded, setIsExp...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1943": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    calculateInitial();\n\n    // Subscribe to live updates if enabled\n    if (enableLiveUpdates) {\n      const unsubscribe = pr...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1944": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\") {\n          unsubscribe();\n        }\n      };\n    }\n  }, [\n    estimateId,\n    memoizedFlowData,\n    enableLiveUpdates,\n    pricingService,\n    // Removed onPricingUpdate to prevent re-subscription...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1945": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\">\n                Updated {lastUpdate.toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CollapsibleContent>\n          <CardContent classNa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1946": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\">\n                        Missing data affects accuracy: {missing}\n                      </AlertDescription>\n                    </Alert>\n                  ))}\n                </div>\n              )}...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RealTimeCostBreakdown.tsx_1947": {
        "file": "components/estimation/guided-flow/RealTimeCostBreakdown.tsx",
        "query": "\">\n              Last updated: {pricingResult.lastUpdated.toLocaleString()}\n              {enableLiveUpdates && (\n                <span className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StepContentArea.tsx_1948": {
        "file": "components/estimation/guided-flow/StepContentArea.tsx",
        "query": "\";\n\ninterface Step {\n  id: number;\n  name: string;\n  component: React.ComponentType<any>;\n}\n\ninterface StepContentAreaProps {\n  CurrentStepComponent: React.ComponentType<any>;\n  flowData: GuidedFlowDa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StepContentArea.tsx_1949": {
        "file": "components/estimation/guided-flow/StepContentArea.tsx",
        "query": "\">• Swipe to navigate</span>}\n          </p>\n        </div>\n\n        <CurrentStepComponent\n          data={flowData}\n          onUpdate={onUpdate}\n          onNext={onNext}\n          onBack={onBack}\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplatePreviewModal.tsx_1950": {
        "file": "components/estimation/guided-flow/TemplatePreviewModal.tsx",
        "query": "`This template scores ${Math.round(score)}% match based on your selected services (${services.length}), building type (${buildingType || \"not specified\"}), and project complexity.`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplatePreviewModal.tsx_1951": {
        "file": "components/estimation/guided-flow/TemplatePreviewModal.tsx",
        "query": "\";\n\ninterface TemplatePreviewModalProps {\n  template: WorkflowTemplate | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectTemplate: (template: WorkflowTemplate) => void;\n  existingData?: Part...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplatePreviewModal.tsx_1952": {
        "file": "components/estimation/guided-flow/TemplatePreviewModal.tsx",
        "query": "\" ? 90 : 70;\n      const categoryMatch = buildingType === template.category ? 85 : 60;\n\n      const score = Math.min(\n        95,\n        Math.max(\n          50,\n          (hasMatchingServices ? 85 : ...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "TemplatePreviewModal.tsx_1953": {
        "file": "components/estimation/guided-flow/TemplatePreviewModal.tsx",
        "query": "\">\n          <Button\n            onClick={() => onSelectTemplate(template)}\n            className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1954": {
        "file": "components/estimation/guided-flow/TemplateStatusDisplay.tsx",
        "query": "\";\n\ninterface TemplateStatusDisplayProps {\n  selectedTemplate: WorkflowTemplate | null;\n  onChangeTemplate: () => void;\n  className?: string;\n}\n\nexport function TemplateStatusDisplay({\n  selectedTempl...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1955": {
        "file": "components/estimation/guided-flow/TemplateStatusDisplay.tsx",
        "query": "\",\n}: TemplateStatusDisplayProps) {\n  if (!selectedTemplate) return null;\n\n  return (\n    <div\n      className={`p-3 bg-blue-50 rounded-lg border border-blue-200 ${className}`}\n    >\n      <div classN...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1956": {
        "file": "components/estimation/guided-flow/TemplateStatusDisplay.tsx",
        "query": "\">{selectedTemplate.icon}</span>\n          <div>\n            <span className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1957": {
        "file": "components/estimation/guided-flow/TemplateStatusDisplay.tsx",
        "query": "\">\n              Using Template: {selectedTemplate.name}\n            </span>\n            <p className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1958": {
        "file": "components/estimation/guided-flow/TemplateStatusDisplay.tsx",
        "query": "\">\n              {selectedTemplate.description}\n            </p>\n          </div>\n        </div>\n        <button\n          onClick={onChangeTemplate}\n          className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StepContentArea.tsx_1959": {
        "file": "components/estimation/guided-flow/components/StepContentArea.tsx",
        "query": "\";\n\ninterface Step {\n  id: number;\n  name: string;\n  component: React.ComponentType<StepComponentProps>;\n}\n\ninterface StepContentAreaProps {\n  CurrentStepComponent: React.ComponentType<StepComponentPr...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StepContentArea.tsx_1960": {
        "file": "components/estimation/guided-flow/components/StepContentArea.tsx",
        "query": "\";\n  onApplyAutoFix?: (fieldPath: string, suggestedValue: unknown) => void;\n  onRequestHelp?: (hint: ProgressiveHint) => void;\n}\n\nexport const StepContentArea: React.FC<StepContentAreaProps> = ({\n  Cu...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StepContentArea.tsx_1961": {
        "file": "components/estimation/guided-flow/components/StepContentArea.tsx",
        "query": "\");\n      const stepData: Partial<GuidedFlowData> = {};\n\n      // Build nested object structure for update\n      if (fieldParts.length === 2) {\n        const [section, field] = fieldParts;\n        (st...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StepContentArea.tsx_1962": {
        "file": "components/estimation/guided-flow/components/StepContentArea.tsx",
        "query": "\">\n        <CurrentStepComponent\n          data={flowData}\n          onUpdate={onUpdate}\n          onNext={onNext}\n          onBack={onBack}\n        />\n      </div>\n\n      {/* Progressive Validation -...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1963": {
        "file": "components/estimation/guided-flow/components/TemplateStatusDisplay.tsx",
        "query": "\";\n\ninterface TemplateStatusDisplayProps {\n  selectedTemplate: WorkflowTemplate | null;\n  onChangeTemplate: () => void;\n}\n\nexport const TemplateStatusDisplay: React.FC<TemplateStatusDisplayProps> = ({...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TemplateStatusDisplay.tsx_1964": {
        "file": "components/estimation/guided-flow/components/TemplateStatusDisplay.tsx",
        "query": "\">\n        Using template: <strong>{selectedTemplate.name}</strong>\n      </p>\n      <Button variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1965": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "`, {\n        error,\n      });\n    },\n    onConflictDetected: (conflictData) => {\n      logger.warn(\n        \"Save conflict detected - will attempt automatic resolution\",\n        { conflictData },\n    ...",
        "operationType": "update",
        "complexity": 11,
        "estimatedLatency": 140,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "index.tsx_1966": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "`] = error;\n                return acc;\n              },\n              {} as Record<string, string>,\n            );\n\n            if (Object.keys(validationErrors).length > 0) {\n              handleFor...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1967": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "`,\n          { errors: validation.errors },\n        );\n      }\n    } else if (currentStep > 1) {\n      setValidationResults((prev) => ({\n        ...prev,\n        [currentStep]: {\n          isValid: fa...",
        "operationType": "select",
        "complexity": 9,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "index.tsx_1968": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\";\nimport { TemplateSelector } from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1969": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\";\n\n// StepComponentProps now uses unified GuidedFlowData\nexport interface StepComponentProps {\n  data: GuidedFlowData;\n  onUpdate: (stepData: Partial<GuidedFlowData>) => void;\n  onNext: () => void;\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1970": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\", component: Summary },\n];\n\ninterface GuidedEstimationFlowProps {\n  customerId?: string;\n  enableCollaboration?: boolean;\n  estimateId?: string;\n}\n\nexport function GuidedEstimationFlow({\n  customerId...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1971": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\";\n  const {\n    data: flowData,\n    updateData: updateFlowData,\n    saveImmediately,\n    saveError,\n    clearSaveError,\n  } = useSmartAutoSaveData(baseFlowData, smartAutoSave, currentStepId);\n\n  cons...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1972": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\",\n    flowData,\n    enableAutoRecovery: true,\n    maxRetryAttempts: 3,\n  });\n\n  useEffect(() => {\n    if (flowData && JSON.stringify(flowData) !== JSON.stringify(baseFlowData)) {\n      setBaseFlowDat...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1973": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\", { totalCost: result.totalCost });\n    },\n    onValidationUpdate: (result) => {\n      if (!result.isValid) {\n        logger.debug(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1974": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\", error);\n    },\n  });\n\n  const CurrentStepComponent = STEPS[currentStep - 1].component;\n\n  const handleUpdate = (stepData: Partial<GuidedFlowData>) => {\n    handleAsyncOperation(\n      async () => {...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1975": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\");\n        realTimePricing.updatePricing(updatedFlowData, currentStepId);\n\n        const currentStepData = GuidedFlowValidator.getStepData(\n          currentStep,\n          updatedFlowData,\n        )...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1976": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\",\n            },\n          );\n          setValidationResults((prev) => ({\n            ...prev,\n            [currentStep]: validation,\n          }));\n\n          if (!validation.isValid) {\n            ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1977": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\"UPDATE_FAILED\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1978": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\");\n    const stepData: any = {};\n\n    if (fieldParts.length === 2) {\n      stepData[fieldParts[0]] = { [fieldParts[1]]: value };\n    } else if (fieldParts.length === 3) {\n      stepData[fieldParts[0]...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1979": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\") ===\n          smartNavResult.nextStep?.id,\n      );\n\n      if (nextStepIndex !== -1) {\n        setCurrentStep(nextStepIndex + 1);\n        setAttemptedNavigation(false);\n\n        if (smartNavResult....",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1980": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\", error);\n      setAvailableSteps([1]);\n    }\n  }, []);\n\n  const handleSelectTemplate = (\n    template: WorkflowTemplate,\n    appliedData: GuidedFlowData,\n  ) => {\n    setSelectedTemplate(template);\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1981": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\",\n      sanitizedAppliedData,\n    );\n    setConditionalActions(actions);\n  };\n\n  const handleSkipTemplate = () => {\n    const initialFlowData: GuidedFlowData = flowData || {\n      initialContact: und...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1982": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\">\n            <AutoSaveStatusDisplay\n              smartAutoSave={smartAutoSave}\n              saveError={saveError}\n              clearSaveError={clearSaveError}\n              onSaveNow={saveImmedia...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1983": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\", {\n                  total: result.totalCost,\n                  confidence: result.confidence,\n                  services: result.serviceBreakdown.length,\n                });\n              }}\n      ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.tsx_1984": {
        "file": "components/estimation/guided-flow/index.tsx",
        "query": "\");\n                }\n              }}\n            />\n          )}\n\n          {isMobile && (\n            <MobileStepNavigation\n              steps={STEPS}\n              currentStep={currentStep}\n     ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork-Integration.tsx_1985": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork-Integration.tsx",
        "query": "\";\n\ninterface AreaOfWorkCompleteProps {\n  data: GuidedFlowData;\n  onUpdate: (data: Partial<GuidedFlowData>) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\n// Main component that combines all ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork-Integration.tsx_1986": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork-Integration.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork-Integration.tsx_1987": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork-Integration.tsx",
        "query": "\")) {\n      const result = await importService.importFromNearmap(file);\n      setBackgroundImage(result.imageUrl);\n      if (result.metadata?.scale) {\n        setScale({ pixelsPerFoot: result.metadata...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork-Integration.tsx_1988": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork-Integration.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1989": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "`,\n      type: \"exterior\" as const,\n      geometry: {\n        type: shape.type,\n        coordinates: shape.points.map((point) => [point.x, point.y]),\n        area: shape.area,\n        perimeter: calcu...",
        "operationType": "update",
        "complexity": 7,
        "estimatedLatency": 110,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1990": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1991": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\";\n\ninterface AreaOfWorkProps extends StepComponentProps {}\n\nfunction AreaOfWorkComponent({\n  data,\n  onUpdate,\n  onNext,\n  onBack,\n}: AreaOfWorkProps) {\n  const [areaData, setAreaData] = useState<Are...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1992": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\");\n  const [shapes, setShapes] = useState<Shape[]>([]);\n  const [measurements, setMeasurements] = useState<Measurement[]>([]);\n  const [isScaleMode, setIsScaleMode] = useState(false);\n  const [isUplo...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 100,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1993": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\", updateCanvasSize);\n    return () => window.removeEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1994": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\", updateCanvasSize);\n  }, []);\n\n  useEffect(() => {\n    // Convert existing work areas to shapes when component mounts\n    if (areaData.workAreas.length > 0) {\n      const convertedShapes = convertWo...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1995": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\"\n        ? areaData.scale\n        : areaData.scale?.pixelsPerFoot || 1;\n    return perimeter / scale;\n  };\n\n  const handleShapesChange = (\n    newShapes: Shape[],\n    newMeasurements: Measurement[],\n...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1996": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\",\n      );\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleClearAll = () => {\n    setShapes([]);\n    setMeasurements([]);\n    setAreaData((prev) => ({ ...prev, workAreas: [] })...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1997": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\");\n      return;\n    }\n\n    onUpdate({ areaOfWork: areaData });\n    onNext();\n  };\n\n  const totalArea = areaData.workAreas.reduce(\n    (sum, area) => sum + area.geometry.area,\n    0,\n  );\n\n  // Extra...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": ["initial"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1998": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\",\n    materials: [],\n    features: [],\n  };\n\n  const handle3DAnalysisUpdate = (analysis: any) => {\n    // Update area data with 3D analysis\n    setAreaData((prev) => ({\n      ...prev,\n      totalArea...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "AreaOfWork.tsx_1999": {
        "file": "components/estimation/guided-flow/steps/AreaOfWork.tsx",
        "query": "\">\n            <EnhancedBuilding3D\n              buildingData={buildingData}\n              measurements={measurements}\n              serviceAreas={areaData.workAreas}\n              onAnalysisUpdate={h...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2000": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2001": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\";\n  criticalPath: boolean;\n}\n\ninterface DurationProps {\n  data: GuidedFlowData;\n  onUpdate: (data: Partial<GuidedFlowData>) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\n// Service duration...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2002": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\"], // Soft wash after pressure wash (if both selected)\n  PC: [\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2003": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\"], // Deck cleaning after interior walls\n};\n\nexport function Duration({ data, onUpdate, onNext, onBack }: DurationProps) {\n  const [loading, setLoading] = useState(true);\n  const [serviceDurations, s...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["now"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2004": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\";\n  const buildingHeight = Math.ceil(\n    (data.filesPhotos?.summary?.measurements?.buildingHeight || 40) / 10,\n  );\n\n  useEffect(() => {\n    calculateDurations();\n  }, [selectedServices, measurement...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2005": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\", // Default difficulty\n        );\n      });\n\n      // Get weather analysis\n      const weatherService = new WeatherService();\n      const weather = await weatherService.analyzeWeatherForLocation(\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2006": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\",\n      });\n      // Fallback to basic calculations\n      const fallbackDurations = selectedServices.map((service: string) => ({\n        service,\n        baseDuration: 2,\n        weatherImpact: 0.5,\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2007": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\" as const,\n        dependencies:\n          SERVICE_DEPENDENCIES[service as keyof typeof SERVICE_DEPENDENCIES] ||\n          [],\n      }));\n      setServiceDurations(fallbackDurations);\n    } finally {...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2008": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\")[0];\n  };\n\n  const handleNext = () => {\n    onUpdate({\n      duration: {\n        estimatedDuration: timeline?.totalDuration || totalDuration || 0,\n        serviceDurations,\n        totalDuration: ti...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2009": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\">\n            Intelligent duration calculation with weather analysis and timeline\n            optimization\n          </p>\n        </div>\n\n        {/* Start Date Selection */}\n        <Card>\n         ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Duration.tsx_2010": {
        "file": "components/estimation/guided-flow/steps/Duration.tsx",
        "query": "\",\n            }))}\n            onAdjust={(service, newStart) => {\n              // Handle timeline adjustments if needed\n            }}\n          />\n        )}\n\n        {/* Weather Analysis */}\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2011": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2012": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\";\n\n// Import new expense management components\nimport { EquipmentSelector } from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2013": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\";\nimport { VendorSelector } from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2014": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\";\n\ninterface Equipment {\n  id: string;\n  name: string;\n  category: string;\n  dailyRate: number;\n  quantity: number;\n  days: number;\n  total: number;\n  vendor: string;\n  required?: boolean;\n}\n\ninterfa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2015": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\");\n  const [showVendorSelector, setShowVendorSelector] = useState<{\n    type: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2016": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\";\n    item: any;\n    index: number;\n  } | null>(null);\n  const [showAddOther, setShowAddOther] = useState(false);\n\n  // Extract data from previous steps\n  const selectedServices = data.scopeDetails?....",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["previous"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2017": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\";\n\n  useEffect(() => {\n    calculateInitialCosts();\n  }, [selectedServices, measurements, serviceDurations, buildingHeight]);\n\n  const calculateInitialCosts = async () => {\n    setLoading(true);\n\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2018": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateTotalCosts = (\n    equipment: Equipment[],\n    materials: Material[],\n    labor: Labor[],\n    other: OtherCost[],\n  )...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2019": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\") {\n      updated.equipment[index] = {\n        ...updated.equipment[index],\n        vendor: vendor.name,\n        dailyRate: pricing.dailyRate || updated.equipment[index].dailyRate,\n        total:\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2020": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">\n            {/* Cost Breakdown */}\n            <CostBreakdown\n              equipment={expensesData.equipment.map((eq) => ({\n                id: eq.id,\n                name: eq.name,\n              ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2021": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\",\n              }))}\n              labor={expensesData.labor.map((lab) => ({\n                service: lab.service,\n                role: lab.role,\n                regularHours: lab.hours * 0.9, // As...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2022": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\" />\n                Equipment Rental\n              </CardTitle>\n              <CardDescription>\n                Auto-selected based on services and building height\n              </CardDescription>\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2023": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\"\n                          onClick={() =>\n                            setShowVendorSelector({\n                              type: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2024": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\"\n                          onClick={() =>\n                            setShowVendorSelector({\n                              type: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2025": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">\n          {/* Historical Comparison */}\n          <HistoricalComparison\n            currentCosts={{\n              equipment: expensesData.totalCosts.equipment,\n              materials: expensesData...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2026": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">\n            <VendorSelector\n              type={showVendorSelector.type}\n              item={showVendorSelector.item}\n              onSelect={handleVendorSelect}\n              onCancel={() => setSh...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2027": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">\n                  Category\n                </label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2028": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2029": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">Permits & Fees</SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2030": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">Insurance</SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2031": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">\n                      Travel & Transportation\n                    </SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2032": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\">Miscellaneous</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Expenses.tsx_2033": {
        "file": "components/estimation/guided-flow/steps/Expenses.tsx",
        "query": "\"; // Would get from select\n                    if (description && amount > 0) {\n                      handleAddOtherCost(description, amount, category);\n                    }\n                  }}\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["select"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2034": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "`,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      url: URL.createObjectURL(file),\n      uploadedAt: new Date(),\n      file,\n      status: \"pending\" as const,\n    }));\n\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2035": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "`,\n        {\n          error,\n          fileName: file.file?.name || file.name,\n          component: \"FilesPhotos\",\n          action: \"photo_analysis_retry\",\n        },\n      );\n\n      let errorMessag...",
        "operationType": "unknown",
        "complexity": 5,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2036": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "`, {\n            error,\n            fileName: file.file?.name || file.name,\n            component: \"FilesPhotos\",\n            action: \"file_analysis\",\n          });\n\n          // Determine error messa...",
        "operationType": "unknown",
        "complexity": 6,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2037": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "\",\n};\n\ninterface FilesPhotosProps extends StepComponentProps {}\n\nfunction FilesPhotosComponent({\n  data,\n  onUpdate,\n  onNext,\n  onBack,\n}: FilesPhotosProps) {\n  const { isMobile, isTablet } = useMobi...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2038": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "\", errorMessage: undefined }\n          : f,\n      ),\n    }));\n\n    try {\n      const analysis = await analyzePhoto(file);\n\n      // Update with results\n      setFilesData((prev) => ({\n        ...prev,...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2039": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "\") {\n        // Update status to analyzing\n        setFilesData((prev) => ({\n          ...prev,\n          files: prev.files.map((f) =>\n            f.id === file.id ? { ...f, status: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2040": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "\" } : f,\n          ),\n        }));\n\n        try {\n          const analysis = await analyzePhoto(file);\n\n          // Update with results\n          setFilesData((prev) => ({\n            ...prev,\n      ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "FilesPhotos.tsx_2041": {
        "file": "components/estimation/guided-flow/steps/FilesPhotos.tsx",
        "query": "\" />;\n      default:\n        return null;\n    }\n  };\n\n  const handleNext = () => {\n    onUpdate({ filesPhotos: filesData });\n    onNext();\n  };\n\n  // Mobile-specific photo handling\n  const handleMobil...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2042": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "`,\n          );\n        }\n\n        const result = await response.json();\n\n        // Detect red flags based on extracted data\n        const redFlags = detectRedFlags(result.aiExtractedData);\n\n        ...",
        "operationType": "select",
        "complexity": 9,
        "estimatedLatency": 110,
        "tables": ["your", "the"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "InitialContact.tsx_2043": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "`}\n        >\n          {CONTACT_METHODS.map((method) => {\n            const IconComponent = method.icon;\n            const isSelected = contactData.contactMethod === method.id;\n\n            return (\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2044": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "`w-8 h-8 mx-auto mb-2 ${\n                      isSelected ? \"text-blue-600\" : \"text-gray-400\"\n                    }`",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2045": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\",\n  },\n];\n\ninterface InitialContactProps extends StepComponentProps {}\n\nfunction InitialContactComponent({\n  data,\n  onUpdate,\n  onNext,\n  onBack,\n}: InitialContactProps) {\n  const { isMobile } = use...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2046": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\",\n    aiExtractedData: data?.initialContact?.aiExtractedData,\n  });\n\n  const [isExtracting, setIsExtracting] = useState(false);\n  const [extractionComplete, setExtractionComplete] = useState(false);\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["parent"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2047": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\";\n    }\n  };\n\n  const triggerAutoPopulation = async (aiExtractedData: AIExtractedData) => {\n    try {\n      setIsAutoPopulating(true);\n\n      // Create updated flow data with the new extracted data\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2048": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\",\n        },\n      );\n    } finally {\n      setIsAutoPopulating(false);\n    }\n  };\n\n  const handleNext = useCallback(() => {\n    onUpdate({ initialContact: contactData });\n    onNext();\n  }, [contact...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2049": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\">\n          Start by selecting how you received this project inquiry and enter the\n          details.\n        </p>\n      </div>\n\n      {/* Contact Method Selector */}\n      <div>\n        <HelpTooltip...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2050": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\"Contact Method Selection\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2051": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\"],\n            lastUpdated: new Date().toISOString(),\n          }}\n        >\n          <h3 className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2052": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\"}`}\n        >\n          {CONTACT_METHODS.map((method) => {\n            const IconComponent = method.icon;\n            const isSelected = contactData.contactMethod === method.id;\n\n            return (...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2053": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\">\n                  <IconComponent\n                    className={`w-8 h-8 mx-auto mb-2 ${\n                      isSelected ? \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2054": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\"],\n              lastUpdated: new Date().toISOString(),\n            }}\n          >\n            <h3 className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2055": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\"],\n              lastUpdated: new Date().toISOString(),\n            }}\n          >\n            <Button\n              onClick={handleEmailExtraction}\n              disabled={\n                !contactD...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2056": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\">\n                      Building type selector encountered an error. Please\n                      refresh the page or continue manually.\n                    </p>\n                  </div>\n            ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InitialContact.tsx_2057": {
        "file": "components/estimation/guided-flow/steps/InitialContact.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2058": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "`,\n        length: \"\",\n        width: \"\",\n        height: \"\",\n        calculated: 0,\n      },\n    ]);\n  };\n\n  // Remove area\n  const removeArea = (id: string) => {\n    if (areas.length > 1) {\n      se...",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": ["drawing"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2059": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\";\n\ninterface AreaInput {\n  id: string;\n  name: string;\n  length: string;\n  width: string;\n  height: string;\n  calculated: number;\n}\n\nexport default function Measurements() {\n  const { flowData, updat...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2060": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\",\n  );\n\n  // Photo analysis state\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2061": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\")) {\n        // Pressure washing: ground area\n        return length * width;\n      } else {\n        // Default: total surface area\n        return length * width;\n      }\n    },\n    [flowData.scopeDet...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2062": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\",\n      }));\n\n    updateFlowData({\n      areaOfWork: {\n        workAreas: measurements.map((m) => ({\n          id: m.id,\n          name: m.label || \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2063": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\",\n          measurements: [m],\n          totalArea: m.area,\n          services: flowData.scopeDetails?.selectedServices || [],\n        })),\n        measurements,\n        totalArea,\n        buildingDe...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2064": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\",\n        calculated: 0,\n      },\n    ]);\n  };\n\n  // Remove area\n  const removeArea = (id: string) => {\n    if (areas.length > 1) {\n      setAreas(areas.filter((area) => area.id !== id));\n    }\n  };\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2065": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\">\n      {/* Input Method Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2066": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\">Building Type</Label>\n                    <select\n                      id=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2067": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\">Hotel/Restaurant</option>\n                    </select>\n                  </div>\n\n                  <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2068": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\">\n                          <Input\n                            value={area.name}\n                            onChange={(e) =>\n                              updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2069": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\"\n                              value={area.length}\n                              onChange={(e) =>\n                                updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2070": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\"\n                              value={area.width}\n                              onChange={(e) =>\n                                updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2071": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\"\n                              value={area.height}\n                              onChange={(e) =>\n                                updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2072": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\"} selected\n                        </p>\n                        <Button\n                          onClick={analyzePhotos}\n                          disabled={isAnalyzing}\n                          cl...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Measurements.tsx_2073": {
        "file": "components/estimation/guided-flow/steps/Measurements.tsx",
        "query": "\">\n              {flowData.scopeDetails?.selectedServices?.map((service) => {\n                let calculation = \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2074": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "`,\n        length: \"\",\n        width: \"\",\n        height: \"\",\n        calculated: 0,\n      },\n    ]);\n  };\n\n  // Remove area\n  const removeArea = (id: string) => {\n    if (areas.length > 1) {\n      se...",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": ["drawing"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2075": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\";\n\ninterface AreaInput {\n  id: string;\n  name: string;\n  length: string;\n  width: string;\n  height: string;\n  calculated: number;\n}\n\nfunction MeasurementsWithFacade() {\n  const { flowData, updateFlow...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2076": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\");\n\n  // Facade analysis state\n  const [showFacadeForm, setShowFacadeForm] = useState(false);\n  const [selectedFacadeId, setSelectedFacadeId] = useState<string | null>(null);\n\n  // Get facade analysi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2077": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\",\n  );\n\n  // Photo analysis state\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2078": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\")) {\n        // Pressure washing: ground area\n        return length * width;\n      } else {\n        // Default: total surface area\n        return length * width;\n      }\n    },\n    [flowData.scopeDet...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2079": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\",\n          calculated: facadeAnalysis.parking_sqft,\n        });\n      }\n\n      if (newAreas.length > 0) {\n        setAreas(newAreas);\n\n        // Update building type if available\n        if (facade...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2080": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\",\n      }));\n\n    updateFlowData({\n      areaOfWork: {\n        workAreas: measurements.map((m) => ({\n          id: m.id,\n          name: m.label || \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2081": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\",\n          measurements: [m],\n          totalArea: m.area,\n          services: flowData.scopeDetails?.selectedServices || [],\n        })),\n        measurements,\n        totalArea,\n        buildingDe...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2082": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\",\n        calculated: 0,\n      },\n    ]);\n  };\n\n  // Remove area\n  const removeArea = (id: string) => {\n    if (areas.length > 1) {\n      setAreas(areas.filter((area) => area.id !== id));\n    }\n  };\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2083": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\",\n          calculated: data.calculations.totalArea,\n        },\n      ]);\n    }\n  };\n\n  // Handle facade analysis creation\n  const handleFacadeAnalysisCreated = (analysisId: string) => {\n    setSelec...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2084": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\">\n      {/* Input Method Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2085": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\">Building Type</Label>\n                    <select\n                      id=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2086": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\">Hotel/Restaurant</option>\n                    </select>\n                  </div>\n\n                  <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2087": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\">\n                          <Input\n                            value={area.name}\n                            onChange={(e) =>\n                              updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2088": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\"\n                              value={area.length}\n                              onChange={(e) =>\n                                updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2089": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\"\n                              value={area.width}\n                              onChange={(e) =>\n                                updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2090": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\"\n                              value={area.height}\n                              onChange={(e) =>\n                                updateArea(area.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2091": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\"} selected\n                        </p>\n                        <Button\n                          onClick={analyzePhotos}\n                          disabled={isAnalyzing}\n                          cl...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementsWithFacade.tsx_2092": {
        "file": "components/estimation/guided-flow/steps/MeasurementsWithFacade.tsx",
        "query": "\">\n              {flowData.scopeDetails?.selectedServices?.map((service) => {\n                let calculation = \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Pricing.tsx_2093": {
        "file": "components/estimation/guided-flow/steps/Pricing.tsx",
        "query": "\";\n\nexport function Pricing({\n  data,\n  onUpdate,\n  onNext,\n  onBack,\n}: {\n  data: GuidedFlowData;\n  onUpdate: (data: Partial<GuidedFlowData>) => void;\n  onNext: () => void;\n  onBack: () => void;\n}) {...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Pricing.tsx_2094": {
        "file": "components/estimation/guided-flow/steps/Pricing.tsx",
        "query": "\",\n        previousVendors: [],\n        budgetIndicators: (customerProfile as any).budget || {},\n      },\n      projectComplexity: calculateComplexity(),\n      competitorPricing: marketData.competitor...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Pricing.tsx_2095": {
        "file": "components/estimation/guided-flow/steps/Pricing.tsx",
        "query": "\">\n                ${finalPrice.toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Strategy Comparison */}\n        <StrategyComparison\n          strat...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Pricing.tsx_2096": {
        "file": "components/estimation/guided-flow/steps/Pricing.tsx",
        "query": "\">\n              <DiscountApproval\n                basePrice={markedUpTotal}\n                requestedPrice={finalPrice}\n                discountPercentage={\n                  ((markedUpTotal - finalP...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2097": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\",\n  },\n];\n\nfunction ProjectSetup() {\n  const { flowData, updateFlowData, validateCurrentStep } = useEstimateFlow();\n  const env = validateClientEnv();\n\n  // Local state for form fields\n  const [custo...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2098": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\",\n  );\n  const [selectedServices, setSelectedServices] = useState<ServiceType[]>(\n    flowData.scopeDetails?.selectedServices || [],\n  );\n  const [urgency, setUrgency] = useState(\n    flowData.scopeD...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2099": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\",\n  );\n\n  // Validation state\n  const [errors, setErrors] = useState<string[]>([]);\n  const [touched, setTouched] = useState<Set<string>>(new Set());\n\n  // AI extraction state\n  const [isExtracting, ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2100": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\",\n        projectDetails: projectDescription,\n      },\n      scopeDetails: {\n        selectedServices,\n        projectName,\n        projectDescription,\n        urgency,\n        preferredDate,\n      }...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["text"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2101": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\",\n      };\n\n      setExtractedData(extracted);\n      if (extracted.services.length > 0) {\n        setSelectedServices(extracted.services);\n      }\n      if (extracted.urgency) {\n        setUrgency(ex...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2102": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\" />\n                AI extracted services and details\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Service Selection */}\n          <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2103": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">*</span>\n            </Label>\n\n            {env.NEXT_PUBLIC_ENABLE_AI && (\n              <SimpleServiceSuggestions\n                projectDescription={projectDescription}\n                selectedSer...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2104": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">\n              {SERVICE_OPTIONS.map((service) => {\n                const isSelected = selectedServices.includes(\n                  service.value as ServiceType,\n                );\n                re...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2105": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\",\n                      isSelected && \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2106": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">\n                              {service.label}\n                            </p>\n                            {isSelected && (\n                              <CheckCircle2 className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2107": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\") && selectedServices.length === 0 && (\n              <p className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2108": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\" />\n                Please select at least one service\n              </p>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Timing */}\n          <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2109": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">Urgency Level</Label>\n              <select\n                id=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2110": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">Emergency - ASAP</option>\n              </select>\n            </div>\n\n            <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2111": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\")[0]}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary */}\n      {(customerName || selectedServices.length > 0) && (\n        <Card classNam...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2112": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">({companyName})</span>\n                )}\n              </div>\n            )}\n            {selectedServices.length > 0 && (\n              <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProjectSetup.tsx_2113": {
        "file": "components/estimation/guided-flow/steps/ProjectSetup.tsx",
        "query": "\">\n                  {selectedServices.map((service) => (\n                    <Badge\n                      key={service}\n                      variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ReviewSend.tsx_2114": {
        "file": "components/estimation/guided-flow/steps/ReviewSend.tsx",
        "query": "`)}\n                className=\"flex items-center gap-2\"\n              >\n                <Edit className=\"h-4 w-4\" />\n                Edit Estimate\n              </Button>\n              <Button\n       ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ReviewSend.tsx_2115": {
        "file": "components/estimation/guided-flow/steps/ReviewSend.tsx",
        "query": "\" />\n              Selected Services\n            </p>\n            <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ReviewSend.tsx_2116": {
        "file": "components/estimation/guided-flow/steps/ReviewSend.tsx",
        "query": "\">\n              {scope.selectedServices?.map((service: string) => (\n                <Badge key={service} variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2117": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "`,\n            ]\n          : [],\n    });\n  };\n\n  const calculateServiceOrder = (services: ServiceType[]): ServiceType[] => {\n    return services.sort((a, b) => {\n      const aPriority = (SERVICE_RULES...",
        "operationType": "select",
        "complexity": 4,
        "estimatedLatency": 80,
        "tables": ["Initial"],
        "hasJoins": true,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2118": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "`} variant=\"info\">\n              <Info className=\"h-4 w-4\" />\n              <span>{info}</span>\n            </Alert>\n          ))}\n        </div>\n      )}\n\n      {/* Service Selection */}\n      <div>\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2119": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "`${isSelected ? \"Deselect\" : \"Select\"} ${service.name} service`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2120": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\",\n  },\n];\n\ninterface ScopeDetailsProps extends StepComponentProps {}\n\nfunction ScopeDetailsComponent({\n  data,\n  onUpdate,\n  onNext,\n  onBack,\n}: ScopeDetailsProps) {\n  const [scopeData, setScopeData...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2121": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\",\n    accessRestrictions: data?.scopeDetails?.accessRestrictions || [],\n    specialRequirements: data?.scopeDetails?.specialRequirements || [],\n  });\n\n  const [validation, setValidation] = useState<{...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2122": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\")) {\n        // Cannot remove WC if PW is selected\n        setValidation((prev) => ({\n          ...prev,\n          warnings: [\n            ...prev.warnings,\n            \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2123": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\");\n      }\n    } else {\n      // Add service\n      newServices.push(serviceId);\n    }\n\n    setScopeData((prev) => ({\n      ...prev,\n      selectedServices: newServices,\n      autoAddedServices: [], /...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2124": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\",\n        ],\n      }));\n      return;\n    }\n\n    if (scopeData.selectedServices.length === 0) {\n      setValidation((prev) => ({\n        ...prev,\n        errors: [...prev.errors, \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2125": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\"],\n      }));\n      return;\n    }\n\n    onUpdate({ scopeDetails: scopeData });\n    onNext();\n  };\n\n  return (\n    <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2126": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\">\n          Select the services needed. Dependencies will be automatically\n          managed.\n        </p>\n      </div>\n\n      {/* Auto-populated Data Indicator */}\n      {data?.scopeDetails?.autoPop...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2127": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\" />\n          Quick Select Bundles\n        </h3>\n        <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2128": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\"\n              onClick={() => selectBundle(bundle)}\n            >\n              <h4 className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2129": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\" />\n              <span>{info}</span>\n            </Alert>\n          ))}\n        </div>\n      )}\n\n      {/* Service Selection */}\n      <div>\n        <h3 className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2130": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\">Select Services</h3>\n        <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2131": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\">\n          {SERVICES.map((service) => {\n            const isSelected = scopeData.selectedServices.includes(service.id);\n            const isAutoAdded =\n              scopeData.autoAddedServices?.inc...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2132": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\" && scopeData.selectedServices.includes(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2133": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\");\n\n            return (\n              <Card\n                key={service.id}\n                className={`p-4 cursor-pointer transition-all duration-200 touch-manipulation min-h-[100px] ${\n          ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2134": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\") && !isDisabled) {\n                    e.preventDefault();\n                    toggleService(service.id);\n                  }\n                }}\n                aria-label={`${isSelected ? \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2135": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\"Select\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2136": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\">\n                  <Checkbox\n                    checked={isSelected}\n                    disabled={isDisabled}\n                    className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ScopeDetails.tsx_2137": {
        "file": "components/estimation/guided-flow/steps/ScopeDetails.tsx",
        "query": "\">\n                      {service.category}\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2138": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "`,\n        summary: {\n          totalPrice,\n          totalTime: estimatedDuration,\n          totalArea: data.areaOfWork?.totalArea || 0,\n          serviceCount: selectedServices.length,\n          com...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2139": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "`,\n          quantity: 0,\n          unit: \"sq ft\",\n          unitPrice: 0,\n          price: 0,\n          area_sqft: null,\n          glass_sqft: null,\n          duration: 0,\n          dependencies: [],...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2140": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2141": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\";\n\ninterface ProposalCustomization {\n  introduction: string;\n  closing: string;\n  includeSections: {\n    executiveSummary: boolean;\n    scopeDetails: boolean;\n    timeline: boolean;\n    investment: b...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2142": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\" &&\n            data.duration.estimatedDuration\n          ? data.duration.estimatedDuration.days +\n            data.duration.estimatedDuration.hours / 24\n          : 0;\n    const selectedServices = d...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2143": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\",\n        winProbability: data.pricing?.winProbability || 0.5,\n      },\n      timeline: {\n        startDate: new Date(),\n        endDate: new Date(Date.now() + estimatedDuration * 24 * 60 * 60 * 1000...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2144": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">\n          Last updated: {summaryData.proposal.generatedAt.toLocaleString()}\n        </span>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2145": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">\n                    Format\n                  </label>\n                  <Select\n                    value={exportOptions.format}\n                    onValueChange={(value) =>\n                      ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2146": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">PDF Document</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2147": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">Word Document</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2148": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">Web Page</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2149": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">\n                    Delivery Method\n                  </label>\n                  <Select\n                    value={exportOptions.delivery}\n                    onValueChange={(value) =>\n           ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2150": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">Email</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2151": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">Download</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2152": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\">Client Portal</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Summary.tsx_2153": {
        "file": "components/estimation/guided-flow/steps/Summary.tsx",
        "query": "\" />\n            Save Draft\n          </Button>\n          <Button\n            onClick={() => {\n              onUpdate({ summary: summaryData });\n              // In a real app, this might navigate to ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2154": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2155": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\";\n\ninterface TakeoffProps {\n  data: GuidedFlowData;\n  onUpdate: (data: Partial<GuidedFlowData>) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nconst MEASUREMENT_CATEGORIES = {\n  glass: {\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2156": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\",\n    ],\n  },\n};\n\nexport function Takeoff({ data, onUpdate, onNext, onBack }: TakeoffProps) {\n  const [measurements, setMeasurements] = useState<\n    Record<string, MeasurementEntry[]>\n  >({});\n  con...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2157": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\");\n\n  const selectedServices = data.scopeDetails?.selectedServices || [];\n  const photoAnalysis = data.filesPhotos?.summary || {};\n  const areaMeasurements = data.areaOfWork?.measurements || [];\n\n  /...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["existing"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2158": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\";\n    const newSuggestions = engine.getSuggestionsForBuildingType(\n      buildingType,\n      selectedServices,\n      allMeasurements,\n    );\n    setSuggestions(newSuggestions);\n\n    // Validate measu...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2159": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\" as const,\n    },\n  ];\n\n  // Filter categories based on existing measurements and selected services\n  const relevantCategories = measurementCategories.filter((cat) => {\n    const hasData = measuremen...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2160": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\") return true;\n      return false;\n    });\n    return hasData || isRelevant;\n  });\n\n  // Add default categories if none are relevant\n  const displayCategories =\n    relevantCategories.length > 0\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2161": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\">\n          Enter measurements for the selected services\n        </p>\n      </div>\n\n      {/* Import/Export Options */}\n      <Card>\n        <CardHeader>\n          <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "Takeoff.tsx_2162": {
        "file": "components/estimation/guided-flow/steps/Takeoff.tsx",
        "query": "\">\n        {displayCategories.map(({ key, label, calculation }) => (\n          <MeasurementTable\n            key={key}\n            category={key}\n            categoryLabel={label}\n            entries=...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2163": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\" },\n];\n\nfunction UnifiedPricing() {\n  const { flowData, updateFlowData, validateCurrentStep } = useEstimateFlow();\n  const env = validateClientEnv();\n\n  // Duration state\n  const [workDays, setWorkDa...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2164": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\"\n      ? totalHours * parseFloat(hourlyRate)\n      : parseFloat(fixedPrice) || 0;\n\n  // Calculate total expenses\n  const totalExpenses = expenses.reduce(\n    (sum, expense) => sum + (expense.amount |...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2165": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\")[0]);\n    }\n  }, [startDate, workDays]);\n\n  // Update flow data\n  useEffect(() => {\n    updateFlowData({\n      duration: {\n        workDays: parseInt(workDays) || 1,\n        hoursPerDay: parseFloat(...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2166": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\",\n      amount: 0,\n      quantity: 1,\n      unitPrice: 0,\n    };\n    setExpenses([...expenses, newExpense]);\n  };\n\n  // Remove expense\n  const removeExpense = (id: string) => {\n    setExpenses(expens...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2167": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\">\n          {/* Pricing Method Selection */}\n          <Tabs\n            value={pricingMethod}\n            onValueChange={(v) => setPricingMethod(v as any)}\n          >\n            <TabsList classNam...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2168": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\">\n                        <Input\n                          value={expense.name}\n                          onChange={(e) =>\n                            updateExpense(expense.id, { name: e.target.value...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2169": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\"\n                            value={expense.quantity}\n                            onChange={(e) =>\n                              updateExpense(expense.id, {\n                                quantity: ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "UnifiedPricing.tsx_2170": {
        "file": "components/estimation/guided-flow/steps/UnifiedPricing.tsx",
        "query": "\"\n                              value={expense.unitPrice}\n                              onChange={(e) =>\n                                updateExpense(expense.id, {\n                                  u...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2171": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\";\n\ninterface TemplateSelectorProps {\n  onSelectTemplate: (\n    template: WorkflowTemplate,\n    appliedData: GuidedFlowData,\n  ) => void;\n  onSkipTemplate: () => void;\n  existingData?: Partial<GuidedF...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2172": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2173": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\");\n  const [selectedComplexity, setSelectedComplexity] = useState<string>(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2174": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\");\n  const [templates, setTemplates] = useState<WorkflowTemplate[]>([]);\n  const [suggestedTemplates, setSuggestedTemplates] = useState<\n    WorkflowTemplate[]\n  >([]);\n  const [popularTemplates, set...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2175": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\"Based on building type and selected services\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2176": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\", error);\n        // Fallback to empty arrays to prevent UI crashes\n        setTemplates([]);\n        setSuggestedTemplates([]);\n        setPopularTemplates([]);\n      }\n    };\n\n    loadTemplates();\n...",
        "operationType": "select",
        "complexity": 13,
        "estimatedLatency": 140,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "template-selector.tsx_2177": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\" || template.category === selectedCategory;\n    const matchesComplexity =\n      selectedComplexity === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2178": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\" ||\n      template.complexity === selectedComplexity;\n\n    return matchesSearch && matchesCategory && matchesComplexity;\n  });\n\n  const handleSelectTemplate = async (template: WorkflowTemplate) => {\n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2179": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\");\n        return;\n      }\n\n      onSelectTemplate(template, appliedData);\n    } catch (error) {\n      console.error(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2180": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\", template);\n      return;\n    }\n\n    setSelectedTemplate(template);\n    setShowPreview(true);\n  };\n\n  const categories = [\n    { value: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2181": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\">\n          Select a pre-configured template to streamline your estimation\n          process, or skip to start with a blank workflow.\n        </p>\n      </div>\n\n      {/* AI Suggestions */}\n      {su...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2182": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\">\n                  <Button\n                    onClick={() => handleSelectTemplate(template)}\n                    size=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2183": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\">\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2184": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\"\n            >\n              {categories.map((cat) => (\n                <option key={cat.value} value={cat.value}>\n                  {cat.label}\n                </option>\n              ))}\n          ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2185": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\"\n            >\n              {complexities.map((comp) => (\n                <option key={comp.value} value={comp.value}>\n                  {comp.label}\n                </option>\n              ))}\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2186": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\" &&\n        selectedCategory === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2187": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\" &&\n        selectedComplexity === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2188": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\">\n                    <Button\n                      onClick={() => handleSelectTemplate(template)}\n                      size=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "template-selector.tsx_2189": {
        "file": "components/estimation/guided-flow/template-selector.tsx",
        "query": "\">\n                <Button\n                  onClick={() => handleSelectTemplate(template)}\n                  size=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CostBreakdown.tsx_2190": {
        "file": "components/expenses/CostBreakdown.tsx",
        "query": "`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } else {\n        const result = await response.json();\n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CostBreakdown.tsx_2191": {
        "file": "components/expenses/CostBreakdown.tsx",
        "query": "\",\n};\n\nexport const CostBreakdown = React.memo(function CostBreakdown({\n  equipment,\n  materials,\n  labor,\n  other,\n  margins,\n  services,\n}: CostBreakdownProps) {\n  const [selectedView, setSelectedVi...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "CostBreakdown.tsx_2192": {
        "file": "components/expenses/CostBreakdown.tsx",
        "query": "\");\n        a.href = url;\n        a.download = `cost-breakdown-${data.id}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body....",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2193": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "`}\n                >\n                  {getVarianceIcon(value)}\n                  <p className=\"text-lg font-bold\">\n                    {value > 0 ? \"+\" : \"\"}\n                    {value.toFixed(1)}%\n ...",
        "operationType": "select",
        "complexity": 5,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2194": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2195": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\">\n            <Select value={timeframe} onValueChange={setTimeframe}>\n              <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2196": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2197": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\">Last 6 Months</SelectItem>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2198": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\">Last 12 Months</SelectItem>\n                <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2199": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\">Last 24 Months</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2200": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\" />\n                <p>No similar projects found in the selected timeframe</p>\n                <p className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HistoricalComparison.tsx_2201": {
        "file": "components/expenses/HistoricalComparison.tsx",
        "query": "\" />\n          <AlertDescription>\n            <strong>Market Update:</strong> Overall construction costs have\n            increased {historicalData.priceInflation.yearOverYear.toFixed(1)}%\n           ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MarginAdjustment.tsx_2202": {
        "file": "components/expenses/MarginAdjustment.tsx",
        "query": "`border rounded-lg p-4 cursor-pointer transition-all ${\n                      selectedPreset === preset.name\n                        ? \"border-blue-500 bg-blue-50\"\n                        : \"border-gr...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MarginAdjustment.tsx_2203": {
        "file": "components/expenses/MarginAdjustment.tsx",
        "query": "\";\n\ninterface CostMargins {\n  equipment: number;\n  materials: number;\n  labor: number;\n  other: number;\n}\n\ninterface MarginPreset {\n  name: string;\n  description: string;\n  margins: CostMargins;\n  rec...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MarginAdjustment.tsx_2204": {
        "file": "components/expenses/MarginAdjustment.tsx",
        "query": "\",\n  },\n};\n\nexport const MarginAdjustment = React.memo(function MarginAdjustment({\n  margins,\n  onUpdate,\n  directCosts,\n  projectType = \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MarginAdjustment.tsx_2205": {
        "file": "components/expenses/MarginAdjustment.tsx",
        "query": "\",\n}: MarginAdjustmentProps) {\n  const [editMode, setEditMode] = useState(false);\n  const [tempMargins, setTempMargins] = useState<CostMargins>(margins);\n  const [selectedPreset, setSelectedPreset] = ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MarginAdjustment.tsx_2206": {
        "file": "components/expenses/MarginAdjustment.tsx",
        "query": "\");\n  const [showGuidelines, setShowGuidelines] = useState(false);\n\n  useEffect(() => {\n    setTempMargins(margins);\n  }, [margins]);\n\n  const calculateImpact = useCallback(() => {\n    if (!directCost...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MarginAdjustment.tsx_2207": {
        "file": "components/expenses/MarginAdjustment.tsx",
        "query": "\">\n                {MARGIN_PRESETS.map((preset) => (\n                  <div\n                    key={preset.name}\n                    className={`border rounded-lg p-4 cursor-pointer transition-all ${...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2208": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "`}\n          />\n        ))}\n        <span className=\"ml-1 text-sm text-gray-600\">({rating})</span>\n      </div>\n    );\n  }, []);\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent classN...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2209": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "`}\n        </p>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Vendor List */}\n        <div className=\"space-y-3\">\n          {vendors.map((vendor) => {\n            const pr...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2210": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "`}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"vendor\"\n                  value={vendor.id}\n                  checked={isSelected}\n                  on...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2211": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\";\n\ninterface Equipment {\n  id: string;\n  name: string;\n  category: string;\n  dailyRate: number;\n  weeklyRate: number;\n  monthlyRate: number;\n  vendors: VendorPricing[];\n}\n\ninterface Material {\n  id: ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2212": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\";\n  item: Equipment | Material;\n  quantity?: number;\n  duration?: number; // for equipment rentals\n  onSelect: (vendor: Vendor, pricing: VendorPricing) => void;\n  onCancel?: () => void;\n}\n\nexport con...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2213": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\") {\n        const equipment = item as Equipment;\n        // Choose best rate based on duration\n        let rate = pricing.dailyRate || equipment.dailyRate;\n        let multiplier = duration;\n\n       ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2214": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\"\n            ? { dailyRate: customCost }\n            : { unitCost: customCost }),\n        };\n      } else if (!pricing) {\n        // Fallback to item's base pricing\n        pricing = {\n          vend...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2215": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\"\n            ? { dailyRate: (item as Equipment).dailyRate }\n            : { unitCost: (item as Material).unitCost }),\n        };\n      }\n    }\n\n    onSelect(vendor, pricing);\n  }, [\n    selectedVendo...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2216": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\" />\n          )}\n          Select Vendor for {item.name}\n        </CardTitle>\n        <p className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2217": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\">\n          {vendors.map((vendor) => {\n            const pricing = getVendorPricing(vendor.id);\n            const totalCost = calculateTotalCost(vendor.id);\n            const isSelected = selectedVen...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2218": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\"\n                  value={vendor.id}\n                  checked={isSelected}\n                  onChange={(e) => setSelectedVendor(e.target.value)}\n                  className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2219": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\">\n                        +{vendor.specialties.length - 3} more\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </label>\n            );...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2220": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\"}`\n              }`}\n            />\n          </div>\n        )}\n\n        {/* Warning for unavailable vendors */}\n        {selectedVendor &&\n          getVendorPricing(selectedVendor)?.available === f...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2221": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\" />\n              <AlertDescription>\n                This vendor has marked this item as unavailable. Contact them\n                directly or select another vendor.\n              </AlertDescription>...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "VendorSelector.tsx_2222": {
        "file": "components/expenses/VendorSelector.tsx",
        "query": "\">\n              Cancel\n            </Button>\n          )}\n          <Button\n            onClick={handleVendorSelect}\n            disabled={!selectedVendor}\n            className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-actions.tsx_2223": {
        "file": "components/facade-analysis/facade-analysis-actions.tsx",
        "query": "\";\n\ninterface FacadeAnalysisActionsProps {\n  hasAIAnalysis: boolean;\n  onRunAnalysis?: () => Promise<void>;\n  onExport?: () => Promise<void>;\n  onDelete?: () => Promise<void>;\n  onGenerateReport?: () ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-actions.tsx_2224": {
        "file": "components/facade-analysis/facade-analysis-actions.tsx",
        "query": "\" />\n              Export Images\n            </DropdownMenuItem>\n          )}\n          {(onGenerateReport || onExport || onExportImages) && onDelete && (\n            <DropdownMenuSeparator />\n       ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-detail.tsx_2225": {
        "file": "components/facade-analysis/facade-analysis-detail.tsx",
        "query": "\";\n\ninterface FacadeAnalysisDetailProps {\n  analysis: FacadeAnalysis;\n  images: FacadeAnalysisImage[];\n  measurements?: {\n    totalFacadeSqft: number;\n    totalGlassSqft: number;\n    avgConfidence: nu...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-detail.tsx_2226": {
        "file": "components/facade-analysis/facade-analysis-detail.tsx",
        "query": "\" />\n                  {sanitizeUserInput(analysis.location)}\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        <FacadeAnalysisActions\n          hasAIAnalysis...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2227": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2228": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Building Type</FormLabel>\n                  <Select value={field.value} onValueChange={field.onChange}>...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2229": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Commercial</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2230": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Residential</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2231": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Industrial</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2232": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Mixed Use</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2233": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">\n                        Institutional\n                      </SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2234": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Healthcare</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2235": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Educational</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2236": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Hospitality</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-analysis-form.tsx_2237": {
        "file": "components/facade-analysis/facade-analysis-form.tsx",
        "query": "\">Retail</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>\n                    The primary use of the building\n                  </FormD...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2238": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "`}\n            aria-selected={currentIndex === index}\n          >\n            <div className=\"relative aspect-video bg-muted\">\n              <Image\n                src={image.image_url}\n              ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2239": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "`}\n                fill\n                className=\"object-cover\"\n                sizes=\"(max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw\"\n              />\n              <div className=\"absolute...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2240": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\";\n\ninterface FacadeImageGalleryProps {\n  images: FacadeAnalysisImage[];\n  onUploadImage?: () => void;\n  className?: string;\n}\n\nexport function FacadeImageGallery({\n  images,\n  onUploadImage,\n  classN...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2241": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\":\n          e.preventDefault();\n          setSelectedImage(null);\n          break;\n      }\n    },\n    [selectedImage, handlePrevious, handleNext],\n  );\n\n  // Grid keyboard navigation\n  const handleGr...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2242": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\":\n          e.preventDefault();\n          handleImageClick(images[index], index);\n          break;\n      }\n    },\n    [images],\n  );\n\n  useEffect(() => {\n    if (selectedImage) {\n      window.addEven...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2243": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\", handleKeyDown);\n    }\n  }, [selectedImage, handleKeyDown]);\n\n  const getImageTypeColor = (type: string) => {\n    switch (type) {\n      case \"",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2244": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\"\n            aria-label={`Image ${index + 1}: ${image.image_type} view from ${image.view_angle} angle`}\n            aria-selected={currentIndex === index}\n          >\n            <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2245": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">Add Image</span>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Image Detail Dialog */}\n      <Dialog\n        open={!!selectedImage}\n        onOpenChange={() => setS...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2246": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\" />\n                </Button>\n              </div>\n            </DialogTitle>\n          </DialogHeader>\n          {selectedImage && (\n            <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2247": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">\n                <Image\n                  src={selectedImage.image_url}\n                  alt={`${selectedImage.image_type} view - ${selectedImage.view_angle}`}\n                  fill\n              ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2248": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">\n                    Type\n                  </h4>\n                  <Badge\n                    className={getImageTypeColor(selectedImage.image_type)}\n                  >\n                    {select...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2249": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">{selectedImage.view_angle}</span>\n                </div>\n              </div>\n\n              {selectedImage.confidence_scores && (\n                <div>\n                  <h4 className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2250": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">\n                    {Object.entries(selectedImage.confidence_scores).map(\n                      ([key, value]) => (\n                        <div key={key} className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2251": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">{value}%</div>\n                        </div>\n                      ),\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedImage.detected_...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-gallery.tsx_2252": {
        "file": "components/facade-analysis/facade-image-gallery.tsx",
        "query": "\">\n                      {selectedImage.detected_elements.map((element, idx) => (\n                        <Badge key={idx} variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2253": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2254": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const filePreviewUrl = useRef<string | null>(null);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acce...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 70,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2255": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\" && !selectedFile) {\n      toast({\n        title: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2256": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\"Please select an image to upload\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2257": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\" && selectedFile) {\n      // Check file size (max 10MB)\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2258": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\"Please select an image smaller than 10MB\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2259": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\",\n      ];\n      if (!allowedTypes.includes(selectedFile.type)) {\n        toast({\n          title: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2260": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\"Please select a valid image file (JPG, PNG, GIF, WebP)\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2261": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\" && selectedFile) {\n        formData.append(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2262": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\", selectedFile);\n      } else if (uploadMethod === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2263": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\",\n      });\n\n      setIsOpen(false);\n      setSelectedFile(null);\n      setImageUrl(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2264": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Drop the image here...</p>\n                ) : selectedFile ? (\n                  <div>\n                    <p className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2265": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">{selectedFile.name}</p>\n                    <p className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2266": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">\n                      Drag & drop an image here, or click to select\n                    </p>\n                    <p className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2267": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Image Type</Label>\n              <Select value={imageType} onValueChange={setImageType}>\n                <SelectTrigger id=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2268": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2269": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Ground Level</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2270": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Aerial</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2271": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Drone</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2272": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Satellite</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* View Angle */}\n            <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2273": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">View Angle</Label>\n              <Select value={viewAngle} onValueChange={setViewAngle}>\n                <SelectTrigger id=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2274": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2275": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Front</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2276": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Rear</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2277": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Left Side</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2278": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Right Side</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2279": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Oblique</SelectItem>\n                  <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "facade-image-upload.tsx_2280": {
        "file": "components/facade-analysis/facade-image-upload.tsx",
        "query": "\">Top</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ContextualHelpPanel.tsx_2281": {
        "file": "components/help/ContextualHelpPanel.tsx",
        "query": ".delete(itemId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ContextualHelpPanel.tsx_2282": {
        "file": "components/help/ContextualHelpPanel.tsx",
        "query": "`);\n      }\n    };\n  }, []);\n  const {\n    state,\n    userProfile,\n    getContextualHelp,\n    getSmartSuggestions,\n    getAvailableTutorials,\n    markHelpful,\n    markNotHelpful,\n    dismissHelp,\n    ...",
        "operationType": "delete",
        "complexity": 24,
        "estimatedLatency": 225,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "ContextualHelpPanel.tsx_2283": {
        "file": "components/help/ContextualHelpPanel.tsx",
        "query": "\");\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n\n  const toggleExpanded = useCallback(\n    (itemId: string) => {\n      setExpandedItems((prev) => {\n        const newE...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpIntegratedFlow.tsx_2284": {
        "file": "components/help/HelpIntegratedFlow.tsx",
        "query": "\",\n}: HelpIntegratedFlowProps) => {\n  const { setContext, updateFlowData, trackBehavior } = useHelp();\n\n  // Update help context when step changes\n  useEffect(() => {\n    const stepId = STEP_IDS[curre...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpIntegratedFlow.tsx_2285": {
        "file": "components/help/HelpIntegratedFlow.tsx",
        "query": "\", {\n      stepId,\n      stepNumber: currentStep,\n      formState,\n      errorCount: validationErrors.length,\n    });\n  }, [\n    currentStep,\n    validationErrors.length,\n    flowData,\n    setContext,...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2286": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\";\n\n// Configuration constants\nconst HESITATION_TIMEOUT_MS = 30000; // 30 seconds\nconst DEBOUNCE_DELAY_MS = 500; // 500ms for debounced actions\n\ninterface HelpState {\n  currentContext: HelpContext | n...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2287": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\",\n}: HelpProviderProps) {\n  const [state, setState] = useState<HelpState>({\n    currentContext: null,\n    availableHelp: [],\n    activeTutorial: null,\n    tutorialStep: 0,\n    isHelpPanelOpen: false,...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2288": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\", {\n      stepId: context.stepId,\n      stepNumber: context.stepNumber,\n    });\n  };\n\n  const updateUserProfile = (profile: Partial<UserExperience>) => {\n    setUserProfile((prev) => ({ ...prev, ...p...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2289": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\", { tutorialId });\n    }\n  };\n\n  const trackBehaviorImmediate = useCallback(\n    (action: string, data?: Record<string, string | number | boolean>) => {\n      const behavior = {\n        action,\n     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2290": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\", { helpId });\n    HelpSessionStorage.rateHelp(helpId, true);\n\n    // Update help analytics if we have a workflow ID\n    if (state.workflowId) {\n      try {\n        const helpContent = state.triggere...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2291": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\", { helpId });\n    HelpSessionStorage.rateHelp(helpId, false);\n\n    // Update help analytics if we have a workflow ID\n    if (state.workflowId) {\n      try {\n        const helpContent = state.trigger...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2292": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\", { helpId });\n    HelpSessionStorage.dismissHelp(helpId);\n\n    // Update help analytics if we have a workflow ID\n    if (state.workflowId) {\n      try {\n        const helpContent = state.triggeredHe...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpProvider.tsx_2293": {
        "file": "components/help/HelpProvider.tsx",
        "query": "\" ||\n        !HelpSessionStorage.wasTutorialCompleted(t.id),\n    );\n  };\n\n  const contextValue: HelpContextType = {\n    state,\n    userProfile,\n    flowData,\n    setContext,\n    updateUserProfile,\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2294": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2295": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Experience Level:</label>\n                <Select\n                  value={experienceLevel}\n                  onValueChange={(value) =>\n                    setExperienceLevel(\n                      ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2296": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\",\n                    )\n                  }\n                >\n                  <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2297": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2298": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Novice</SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2299": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Intermediate</SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2300": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Expert</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2301": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\"],\n                        lastUpdated: new Date().toISOString(),\n                      }}\n                    >\n                      <label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2302": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\"Building Type Selection\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2303": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\"Selecting the correct building type is important because it helps our AI provide more accurate analysis of your photos and better service recommendations. Different building types have different clea...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2304": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\"Building type selection improves AI analysis accuracy and service recommendations.\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2305": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\"],\n                        lastUpdated: new Date().toISOString(),\n                      }}\n                    >\n                      <label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2306": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">\n                        Building Type\n                      </label>\n                    </HelpTooltip>\n                    <Select\n                      value={formData.buildingType}\n             ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2307": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">\n                        <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2308": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2309": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Office Building</SelectItem>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2310": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Retail Store</SelectItem>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2311": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">Restaurant</SelectItem>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2312": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\">\n                          Hospital/Medical\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <di...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "HelpSystemDemo.tsx_2313": {
        "file": "components/help/HelpSystemDemo.tsx",
        "query": "\"],\n                        lastUpdated: new Date().toISOString(),\n                      }}\n                    >\n                      <label className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InteractiveTutorial.tsx_2314": {
        "file": "components/help/InteractiveTutorial.tsx",
        "query": "\");\n    };\n  }, []);\n  const {\n    state,\n    nextTutorialStep,\n    previousTutorialStep,\n    exitTutorial,\n    trackBehavior,\n  } = useHelp();\n\n  const [isHighlighting, setIsHighlighting] = useState(...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InteractiveTutorial.tsx_2315": {
        "file": "components/help/InteractiveTutorial.tsx",
        "query": "\");\n    }, 2000);\n  }, []);\n\n  const updateTargetElement = useCallback(\n    (step: TutorialStep) => {\n      if (step.targetElement) {\n        const element = document.querySelector(\n          step.tar...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "InteractiveTutorial.tsx_2316": {
        "file": "components/help/InteractiveTutorial.tsx",
        "query": "\", handleResize);\n  }, [targetElement, updateOverlayPosition]);\n\n  if (!activeTutorial) return null;\n\n  const currentStep = activeTutorial.steps[tutorialStep];\n  const isFirstStep = tutorialStep === 0...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-card.tsx_2317": {
        "file": "components/integrations/webhook-card.tsx",
        "query": "`transition-all hover:shadow-lg cursor-pointer ${\n        selected ? \"ring-2 ring-blue-500\" : \"\"\n      }`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-card.tsx_2318": {
        "file": "components/integrations/webhook-card.tsx",
        "query": "\";\n\ninterface WebhookCardProps {\n  webhook: WebhookConfig;\n  selected?: boolean;\n  onSelect?: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onTest?: () => void;\n  onToggle?: () => void...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-card.tsx_2319": {
        "file": "components/integrations/webhook-card.tsx",
        "query": "\",\n      });\n    }\n  };\n\n  return (\n    <Card\n      className={`transition-all hover:shadow-lg cursor-pointer ${\n        selected ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-card.tsx_2320": {
        "file": "components/integrations/webhook-card.tsx",
        "query": "\"\n      }`}\n      onClick={onSelect}\n    >\n      <CardHeader className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-card.tsx_2321": {
        "file": "components/integrations/webhook-card.tsx",
        "query": "\" />\n                  Edit\n                </DropdownMenuItem>\n              )}\n\n              {onDelete && (\n                <DropdownMenuItem\n                  onClick={(e) => {\n                   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-card.tsx_2322": {
        "file": "components/integrations/webhook-card.tsx",
        "query": "\" />\n                  Delete\n                </DropdownMenuItem>\n              )}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n\n      <CardContent c...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2323": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "`;\n  };\n\n  // Row component for virtualized list\n  const Row = ({\n    index,\n    style,\n  }: {\n    index: number;\n    style: React.CSSProperties;\n  }) => {\n    const delivery = deliveries[index];\n    ...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2324": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\";\n\ninterface WebhookDeliveryTableProps {\n  deliveries: WebhookDelivery[];\n  loading?: boolean;\n  selectedDeliveries?: string[];\n  onSelectDelivery?: (id: string, selected: boolean) => void;\n  onSelec...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2325": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\"),\n    [deliveries],\n  );\n\n  // Check if all deliveries are selected\n  const allSelected = useMemo(\n    () =>\n      deliveries.length > 0 &&\n      deliveries.every((d) => selectedDeliveries.includes(...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2326": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\";\n    const diff =\n      new Date(deliveredAt).getTime() - new Date(createdAt).getTime();\n    if (diff < 1000) return `${diff}ms`;\n    return `${(diff / 1000).toFixed(2)}s`;\n  };\n\n  // Row component ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2327": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n        <DeliveryRow\n          delivery={delivery}\n          isSelected={isSelected}\n          onSelect={onSelectDelivery}\n          getStatusIcon={getStatusIcon}\n          getStatusBadgeVariant={g...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2328": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n            {onSelectAll && (\n              <Checkbox\n                checked={allSelected}\n                indeterminate={someSelected}\n                onCheckedChange={(checked) => onSelectAll(!!...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2329": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {onSelectAll && (\n                <TableHead className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2330": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n                  <Checkbox\n                    checked={allSelected}\n                    indeterminate={someSelected}\n                    onCheckedChange={(checked) => onSelectAll(!!checked)}\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2331": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">Attempts</TableHead>\n              <TableHead>Response</TableHead>\n              <TableHead>Created</TableHead>\n              <TableHead>Delivered</TableHead>\n              <TableHead>Time</TableHea...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2332": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\"\n                >\n                  Loading deliveries...\n                </TableCell>\n              </TableRow>\n            ) : deliveries.length === 0 ? (\n              <TableRow>\n                ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2333": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\"\n                >\n                  No deliveries found\n                </TableCell>\n              </TableRow>\n            ) : (\n              deliveries.map((delivery) => (\n                <Deliver...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2334": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\";\n  formatDate: (date: string) => string;\n  formatResponseTime: (createdAt: string, deliveredAt?: string) => string;\n}\n\nfunction DeliveryRow({\n  delivery,\n  isSelected,\n  onSelect,\n  getStatusIcon,\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2335": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n      {onSelect && (\n        <Checkbox\n          checked={isSelected}\n          onCheckedChange={(checked) => onSelect(delivery.id, !!checked)}\n          className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2336": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n        {formatResponseTime(delivery.created_at, delivery.delivered_at)}\n      </div>\n    </div>\n  );\n}\n\nfunction DeliveryTableRow({\n  delivery,\n  isSelected,\n  onSelect,\n  getStatusIcon,\n  getStat...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2337": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\">\n        {onSelect && (\n          <TableCell>\n            <Checkbox\n              checked={isSelected}\n              onCheckedChange={(checked) => onSelect(delivery.id, !!checked)}\n              ari...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-delivery-table.tsx_2338": {
        "file": "components/integrations/webhook-delivery-table.tsx",
        "query": "\" />\n                )}\n              </Button>\n            )}\n          </div>\n        </TableCell>\n      </TableRow>\n      {delivery.error_message && (\n        <TableRow>\n          <TableCell colSpa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-form.tsx_2339": {
        "file": "components/integrations/webhook-form.tsx",
        "query": "\"At least one event must be selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-form.tsx_2340": {
        "file": "components/integrations/webhook-form.tsx",
        "query": "\"\n                              >\n                                {event.description}\n                              </p>\n                            </div>\n                          </div>\n           ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2341": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2342": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\";\n\nfunction WebhookManagerV2Component() {\n  // State management\n  const [selectedWebhook, setSelectedWebhook] = useState<WebhookConfig | null>(\n    null,\n  );\n  const [isCreateDialogOpen, setIsCreate...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2343": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedDeliveries, setSelectedDeliveries] = useState<string[]>([]);\n\n  // Custom hooks for data management\n  const {\n    webhooks,\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2344": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\" ? undefined : filterEvent,\n      search: searchTerm || undefined,\n    },\n  });\n\n  const {\n    deliveries,\n    stats: deliveryStats,\n    loading: deliveriesLoading,\n    total: deliveriesTotal,\n    pa...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2345": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\",\n    page: 1,\n    limit: 50,\n    autoLoad: !!selectedWebhook,\n  });\n\n  // Forms\n  const createForm = useForm<WebhookFormData>({\n    resolver: zodResolver(webhookFormSchema),\n    defaultValues: {\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2346": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\" && !webhook.events.includes(filterEvent)) {\n        return false;\n      }\n      return true;\n    });\n  }, [webhooks, searchTerm, filterStatus, filterEvent]);\n\n  // Event handlers\n  const handleCreat...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2347": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\",\n      });\n    }\n  };\n\n  const handleSelectDelivery = (id: string, selected: boolean) => {\n    setSelectedDeliveries((prev) =>\n      selected ? [...prev, id] : prev.filter((d) => d !== id),\n    );\n ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2348": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\" />}\n          />\n        </div>\n        <Select\n          value={filterStatus}\n          onValueChange={(v: any) => setFilterStatus(v)}\n        >\n          <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2349": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">\n            <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2350": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2351": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">All Status</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2352": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">Active</SelectItem>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2353": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">Inactive</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterEvent} onValueChange={setFilterEvent}>\n          <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2354": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">\n            <SelectValue placeholder=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2355": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2356": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">All Events</SelectItem>\n            {WEBHOOK_EVENTS.map((event) => (\n              <SelectItem key={event.type} value={event.type}>\n                {event.label}\n              </SelectItem>\n        ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2357": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\" disabled={!selectedWebhook}>\n            Deliveries\n            {selectedWebhook && deliveries.length > 0 && (\n              <Badge variant=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2358": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">\n              {filteredWebhooks.map((webhook) => (\n                <WebhookCard\n                  key={webhook.id}\n                  webhook={webhook}\n                  selected={selectedWebhook?.i...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2359": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">\n          {selectedWebhook && (\n            <>\n              {/* Delivery Statistics */}\n              {deliveryStats && (\n                <Card>\n                  <CardHeader>\n                    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2360": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">\n                          {deliveryStats.avgResponseTimeFormatted}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n            ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager-v2.tsx_2361": {
        "file": "components/integrations/webhook-manager-v2.tsx",
        "query": "\">\n          <DialogHeader>\n            <DialogTitle>Edit Webhook</DialogTitle>\n          </DialogHeader>\n          <WebhookForm\n            form={editForm}\n            onSubmit={handleUpdateWebhook}\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2362": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "`,\n      );\n      if (response.ok) {\n        const data = await response.json();\n        setDeliveries(data.deliveries || []);\n        setStats(data.stats || null);\n      }\n    } catch (error) {\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2363": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n        },\n      );\n\n      if (response.ok) {\n        toast({\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2364": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "`,\n        {\n          method: \"DELETE\",\n        },\n      );\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"Webhook deleted successfully\",\n        });\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2365": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ action: \"test\" }),\n        },\n      );\n\n      if (response.ok) {\n    ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2366": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2367": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"estimate.updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2368": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"customer.updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2369": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"user.updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2370": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"At least one event must be selected\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2371": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"),\n  active: z.boolean(),\n});\n\ntype WebhookFormData = z.infer<typeof webhookFormSchema>;\n\nfunction WebhookManagerComponent() {\n  const [webhooks, setWebhooks] = useState<WebhookConfig[]>([]);\n  const...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2372": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\",\n      timeout_seconds: 10,\n      retry_attempts: 3,\n      retry_delay_seconds: 5,\n      active: true,\n    },\n  });\n\n  useEffect(() => {\n    loadWebhooks();\n  }, []);\n\n  useEffect(() => {\n    if (se...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2373": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateWebhook = async (data: WebhookFormData) => {\n    if (!selectedWebhook) return;\n\n    setLoading(true);\n    try {\n  ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2374": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"Webhook updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2375": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"Failed to update webhook\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2376": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"Failed to update webhook\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2377": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteWebhook = async (webhookId: string) => {\n    if (\n      !confirm(\n        \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2378": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"DELETE\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2379": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"Webhook deleted successfully\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2380": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"Failed to delete webhook\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2381": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"Failed to delete webhook\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2382": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\",\n        });\n        if (selectedWebhook?.id === webhookId) {\n          loadWebhookDeliveries(webhookId);\n        }\n      } else {\n        toast({\n          title: \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2383": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\",\n      });\n    }\n  };\n\n  const resetCreateForm = () => {\n    createForm.reset();\n  };\n\n  const openEditDialog = (webhook: WebhookConfig) => {\n    setSelectedWebhook(webhook);\n    editForm.reset({\n  ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2384": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\" disabled={!selectedWebhook}>\n            Deliveries\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2385": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\">\n              {webhooks.map((webhook) => (\n                <Card\n                  key={webhook.id}\n                  className={\n                    selectedWebhook?.id === webhook.id ? \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2386": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"\n                          onClick={() => handleDeleteWebhook(webhook.id)}\n                        >\n                          <Trash2 className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2387": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"\n                          onClick={() => setSelectedWebhook(webhook)}\n                          className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2388": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\">\n          {selectedWebhook && (\n            <>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Delivery Statistics</CardTitle>\n                </CardHeader>\n         ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2389": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\"\n                      onClick={() =>\n                        handleRetryFailedDeliveries(selectedWebhook.id)\n                      }\n                    >\n                      <RefreshCw className=...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2390": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\">\n          <DialogHeader>\n            <DialogTitle>Edit Webhook</DialogTitle>\n          </DialogHeader>\n          <WebhookForm\n            form={editForm}\n            onSubmit={handleUpdateWebhook}\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "webhook-manager.tsx_2391": {
        "file": "components/integrations/webhook-manager.tsx",
        "query": "\">\n                        {event}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </FormControl>\n              <FormDescription>\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "mobile-bottom-nav.tsx_2392": {
        "file": "components/layout/mobile-bottom-nav.tsx",
        "query": "\" />\n        )}\n      </div>\n    </Link>\n  );\n});\n\nexport function MobileBottomNav() {\n  const { items, isItemActive } = useNavigation({ isMobile: true });\n  const [badges, setBadges] = useState<Badge...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["context"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2393": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "`}>\n                  {getStatusIcon(check.status)}\n                </span>\n                <div>\n                  <p className=\"font-medium\">{check.name}</p>\n                  <p className=\"text-sm ...",
        "operationType": "unknown",
        "complexity": 14,
        "estimatedLatency": 155,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "monitoring-dashboard.tsx_2394": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "`}\n              >\n                {metrics.disk.percentage.toFixed(1)}%\n              </span>\n            </div>\n            <Progress\n              value={metrics.disk.percentage}\n              clas...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2395": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "`,\n        });\n      } catch (error) {\n        toast({\n          title: \"Export failed\",\n          description: \"Failed to export metrics. Please try again.\",\n          variant: \"destructive\",\n       ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2396": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "`}\n              />\n              Refresh\n            </Button>\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                 ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2397": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2398": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\" />}\n          </CardTitle>\n          <Select\n            value={filter}\n            onValueChange={(value: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2399": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\") =>\n              setFilter(value)\n            }\n          >\n            <SelectTrigger\n              className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2400": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\"\n            >\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2401": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">All</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2402": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">Critical</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2403": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">Warning</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2404": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">Info</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2405": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\"All metrics have been updated.\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2406": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">\n                Last updated: {new Date().toLocaleTimeString()}\n              </span>\n            </div>\n            <Button\n              onClick={handleRefresh}\n              disabled={metricsLoa...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2407": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\"\n                    >\n                      Refresh Interval\n                    </label>\n                    <Select\n                      value={refreshInterval.toString()}\n                      o...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2408": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\"\n                      >\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2409": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">10 seconds</SelectItem>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2410": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">30 seconds</SelectItem>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2411": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">1 minute</SelectItem>\n                        <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "monitoring-dashboard.tsx_2412": {
        "file": "components/monitoring/monitoring-dashboard.tsx",
        "query": "\">5 minutes</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "sentry-error-boundary.tsx_2413": {
        "file": "components/monitoring/sentry-error-boundary.tsx",
        "query": "`.trim();\n  };\n\n  getErrorSeverity = (): \"low\" | \"medium\" | \"high\" => {\n    const { error } = this.state;\n\n    if (!error) return \"low\";\n\n    // Check for critical errors\n    if (\n      error.message....",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "sentry-error-boundary.tsx_2414": {
        "file": "components/monitoring/sentry-error-boundary.tsx",
        "query": "\",\n      error,\n      {\n        componentStack: errorInfo.componentStack,\n        eventId,\n      },\n    );\n\n    // Update state\n    this.setState({\n      errorInfo,\n      eventId,\n    });\n\n    // Call...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "sentry-error-boundary.tsx_2415": {
        "file": "components/monitoring/sentry-error-boundary.tsx",
        "query": "\"App Update Available\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "sentry-error-boundary.tsx_2416": {
        "file": "components/monitoring/sentry-error-boundary.tsx",
        "query": "\"The application has been updated. Please refresh to continue.\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "sentry-error-boundary.tsx_2417": {
        "file": "components/monitoring/sentry-error-boundary.tsx",
        "query": "\">\n                {isChunkError ? (\n                  <p>\n                    This usually happens when the app is updated while\n                    you&apos;re using it. Refreshing the page will loa...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RoutePreloader.tsx_2418": {
        "file": "components/optimization/RoutePreloader.tsx",
        "query": "\");\n\n        if (failures.length > 0 && retryCount < maxRetries) {\n          // Retry failed imports after delay\n          console.warn(\n            `[RoutePreloader] Retrying ${failures.length} faile...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2419": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "`,\n        );\n        return;\n      }\n\n      setFile(selectedFile);\n      setResult(null);\n      setError(null);\n      setSearchResults(null);\n    },\n    [],\n  );\n\n  const processPDF = async () => {\n ...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2420": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) ret...",
        "operationType": "unknown",
        "complexity": 8,
        "estimatedLatency": 110,
        "tables": ["PDF", "PDF"],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "pdf-processor.tsx_2421": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2422": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\",\n    imageDensity: 150,\n  });\n\n  const handleFileUpload = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const selectedFile = event.target.files?.[0];\n\n      if (!selectedF...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2423": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\"Please select a valid PDF file\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2424": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">\n                      <Label>OCR Language</Label>\n                      <Select\n                        value={options.ocrLanguage}\n                        onValueChange={(value) =>\n               ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2425": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">English</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2426": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">Spanish</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2427": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">French</SelectItem>\n                          <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2428": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">German</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {options.convertToImages && (\n        ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2429": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">\n                        <Label>Image Format</Label>\n                        <Select\n                          value={options.imageFormat}\n                          onValueChange={(value: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2430": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\") =>\n                            setOptions((prev) => ({\n                              ...prev,\n                              imageFormat: value,\n                            }))\n                     ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2431": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">PNG</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pdf-processor.tsx_2432": {
        "file": "components/pdf/pdf-processor.tsx",
        "query": "\">JPEG</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2433": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "`;\n      a.click();\n      URL.revokeObjectURL(url);\n\n      toast({ title: \"Performance report exported successfully\" });\n    } catch (error) {\n      toast({\n        title: \"Error exporting report\",\n  ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2434": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2435": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2436": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2437": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">Last Hour</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2438": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">Last 24 Hours</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2439": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">Last 7 Days</SelectItem>\n              <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2440": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">Last 30 Days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2441": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">\n                <span>Performance Alerts</span>\n                <Select\n                  value={alertsFilter}\n                  onValueChange={(value) =>\n                    setAlertsFilter(value ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2442": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\")\n                  }\n                >\n                  <SelectTrigger className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2443": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2444": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">All</SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2445": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">Warning</SelectItem>\n                    <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-dashboard.tsx_2446": {
        "file": "components/performance/performance-dashboard.tsx",
        "query": "\">Critical</SelectItem>\n                  </SelectContent>\n                </Select>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DiscountApproval.tsx_2447": {
        "file": "components/pricing/DiscountApproval.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DiscountApproval.tsx_2448": {
        "file": "components/pricing/DiscountApproval.tsx",
        "query": "\");\n  const [selectedConditions, setSelectedConditions] = useState<string[]>([]);\n  const [customCondition, setCustomCondition] = useState(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DiscountApproval.tsx_2449": {
        "file": "components/pricing/DiscountApproval.tsx",
        "query": "\";\n    }\n  }, []);\n\n  // Memoized event handlers\n  const handleConditionToggle = useCallback((condition: string) => {\n    setSelectedConditions((prev) =>\n      prev.includes(condition)\n        ? prev....",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DiscountApproval.tsx_2450": {
        "file": "components/pricing/DiscountApproval.tsx",
        "query": "\">\n                    Select Conditions (Optional)\n                  </Label>\n                  <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "DiscountApproval.tsx_2451": {
        "file": "components/pricing/DiscountApproval.tsx",
        "query": "\"\n                          checked={selectedConditions.includes(condition)}\n                          onChange={() => handleConditionToggle(condition)}\n                          className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2452": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "`${selectedReason}: ${reason}`",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2453": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "`cursor-pointer transition-all ${\n                      selectedCategory === category.id\n                        ? `",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2454": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "`}\n                    onClick={() => {\n                      setSelectedCategory(category.id);\n                      setSelectedReason(\"\"); // Reset reason when category changes\n                    }...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2455": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2456": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\");\n  const [selectedCategory, setSelectedCategory] = useState(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2457": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\");\n  const [selectedReason, setSelectedReason] = useState(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2458": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\" },\n    };\n\n    return colorMap[level];\n  }, [percentageChange]);\n\n  // Memoized event handlers\n  const handleSubmit = useCallback(() => {\n    if (!validation.isValid || !selectedReason || calculated...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2459": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\";\n    const finalReason = reason.trim()\n      ? `${selectedReason}: ${reason}`\n      : selectedReason;\n\n    const overrideData: PriceOverrideData = {\n      price: calculatedPrice,\n      reason: final...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2460": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\");\n    setSelectedCategory(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2461": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\");\n    setSelectedReason(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2462": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\");\n    setSelectedCategory(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2463": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\");\n    setSelectedReason(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2464": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\"}\n                        {percentageChange.toFixed(1)}%)\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n         ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2465": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\">\n                {reasonCategories.map((category) => (\n                  <Card\n                    key={category.id}\n                    className={`cursor-pointer transition-all ${\n                ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2466": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\"\n                    }`}\n                    onClick={() => {\n                      setSelectedCategory(category.id);\n                      setSelectedReason(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2467": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\">{category.name}</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Specific...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2468": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\">Specific Reason</Label>\n                <Select\n                  value={selectedReason}\n                  onValueChange={setSelectedReason}\n                >\n                  <SelectTrigger>\n     ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2469": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {reasonCategories\n                      .find((cat) => cat.id === selectedCategory)\n                      ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2470": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\">Other (specify below)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Additional Notes */}\n            <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2471": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\"}\n                {selectedReason === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2472": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\"\n                value={reason}\n                onChange={(e) => setReason(e.target.value)}\n                placeholder={\n                  selectedReason === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ManualPriceOverride.tsx_2473": {
        "file": "components/pricing/ManualPriceOverride.tsx",
        "query": "\">\n              <Button\n                onClick={handleSubmit}\n                disabled={\n                  !validation.isValid ||\n                  !selectedReason ||\n                  calculatedPri...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RiskFactorAnalysis.tsx_2474": {
        "file": "components/pricing/RiskFactorAnalysis.tsx",
        "query": "\";\n\n// Component wrapped in React.memo for performance optimization\nconst RiskFactorAnalysisComponent: React.FC<RiskFactorProps> = ({\n  riskFactors,\n  totalImpact,\n  projectValue,\n  onMitigationUpdate...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "RiskFactorAnalysis.tsx_2475": {
        "file": "components/pricing/RiskFactorAnalysis.tsx",
        "query": "\" />\n                        <span>\n                          Weekly risk assessment updates during project\n                        </span>\n                      </li>\n                      <li classN...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2476": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "`cursor-pointer transition-all hover:shadow-md ${\n                  isSelected\n                    ? \"border-blue-500 bg-blue-50 shadow-md\"\n                    : \"border-gray-200 hover:border-gray-300...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2477": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\";\n\n// Component wrapped in React.memo for performance optimization\nconst StrategyComparisonComponent: React.FC<StrategyComparisonProps> = ({\n  strategies,\n  currentStrategy,\n  onSelectStrategy,\n  bas...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2478": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\") => {\n      setSortBy(newSort);\n    },\n    [],\n  );\n\n  const handleToggleDetails = useCallback((strategyName: string) => {\n    setShowDetails((prev) => (prev === strategyName ? null : strategyName))...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2479": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\">\n          {sortedStrategies.map((strategy, index) => {\n            const isSelected = strategy.name === currentStrategy.name;\n            const isRecommended = strategy.recommended || index === 0; ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2480": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\"}`}\n                onClick={() => handleStrategySelect(strategy)}\n              >\n                <CardContent className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2481": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\">\n                            {strategy.name}\n                          </h4>\n                          {isSelected && (\n                            <Badge className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2482": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\" />\n                              Selected\n                            </Badge>\n                          )}\n                          {isRecommended && !isSelected && (\n                            <...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2483": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\">•</span>\n                            <span>{con}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2484": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\"Select Recommended Strategy\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "StrategyComparison.tsx_2485": {
        "file": "components/pricing/StrategyComparison.tsx",
        "query": "\"Select This Strategy\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2486": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "`}\n          >\n            {sensitivityLevel.level.toUpperCase()} sensitivity\n          </Badge>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Current Metri...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2487": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "`\n                  }\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"probability\"\n                  stroke=\"#3b82f6\"\n                  strokeWidt...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2488": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\";\n\n// Component wrapped in React.memo for performance optimization\nconst WinProbabilityCalculatorComponent = ({\n  currentPrice,\n  winProbability,\n  pricePoints,\n  optimalPrice,\n  competitorPrices = [...",
        "operationType": "select",
        "complexity": 2,
        "estimatedLatency": 60,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2489": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\",\n    };\n    return {\n      ...rec,\n      color: colorMap[rec.type],\n    };\n  }, [selectedPrice, optimalPrice]);\n\n  return (\n    <Card className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2490": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\">\n                ${selectedPrice.toLocaleString()}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2491": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\"\n                  strokeWidth={2}\n                />\n                {/* Current price line */}\n                <ReferenceLine\n                  x={selectedPrice}\n                  stroke=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2492": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\">\n              <span>${minPrice.toLocaleString()}</span>\n              <span>Price Range</span>\n              <span>${maxPrice.toLocaleString()}</span>\n            </div>\n            <Slider\n       ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2493": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\">\n                ${selectedPrice.toLocaleString()}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Insights and Recommendations */}\n        <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "WinProbabilityCalculator.tsx_2494": {
        "file": "components/pricing/WinProbabilityCalculator.tsx",
        "query": "\">\n                        {((selectedPrice / marketMedian - 1) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                  )}\n                  <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "install-prompt.tsx_2495": {
        "file": "components/pwa/install-prompt.tsx",
        "query": "\"Stay updated with real-time alerts\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "install-prompt.tsx_2496": {
        "file": "components/pwa/install-prompt.tsx",
        "query": "\">\n                <li>• Faster loading times with intelligent caching</li>\n                <li>• Work offline when internet is unavailable</li>\n                <li>• Home screen access without browse...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "install-prompt.tsx_2497": {
        "file": "components/pwa/install-prompt.tsx",
        "query": "\">\n            <li>Tap the Share button in Safari</li>\n            <li>Select &quot;Add to Home Screen&quot;</li>\n            <li>Tap &quot;Add&quot; to confirm</li>\n          </ol>\n        </div>\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "install-prompt.tsx_2498": {
        "file": "components/pwa/install-prompt.tsx",
        "query": "\">\n            <li>Tap the menu button (⋮) in Chrome</li>\n            <li>Select &quot;Add to Home screen&quot;</li>\n            <li>Tap &quot;Add&quot; to confirm</li>\n          </ol>\n        </div>\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "install-prompt.tsx_2499": {
        "file": "components/pwa/install-prompt.tsx",
        "query": "\">\n          <li>Look for the install icon in your browser&apos;s address bar</li>\n          <li>Click it and select &quot;Install&quot;</li>\n          <li>The app will open in its own window</li>\n   ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "offline-indicator.tsx_2500": {
        "file": "components/pwa/offline-indicator.tsx",
        "query": "`;\n    }\n\n    return \"Online\";\n  };\n\n  // Format timestamp\n  const formatTimestamp = (timestamp: number) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  // Get action icon\n  const getAct...",
        "operationType": "update",
        "complexity": 9,
        "estimatedLatency": 125,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "offline-indicator.tsx_2501": {
        "file": "components/pwa/offline-indicator.tsx",
        "query": "\";\n\n// Offline indicator component\nexport const OfflineIndicator: React.FC = () => {\n  const [status, setStatus] = useState<OfflineStatus>(\n    offlineManager.getStatus(),\n  );\n  const [showDetails, s...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "offline-indicator.tsx_2502": {
        "file": "components/pwa/offline-indicator.tsx",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "offline-indicator.tsx_2503": {
        "file": "components/pwa/offline-indicator.tsx",
        "query": "\"delete\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pwa-status.tsx_2504": {
        "file": "components/pwa/pwa-status.tsx",
        "query": "\",\n  compact = false,\n  showDetails = true,\n}: PWAStatusProps) {\n  const [offlineStatus, setOfflineStatus] = useState<OfflineStatus>(\n    offlineManager.getStatus(),\n  );\n  const [pwaStatus, setPwaSta...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pwa-status.tsx_2505": {
        "file": "components/pwa/pwa-status.tsx",
        "query": "\">\n                        {pwaUtils.formatBytes(cacheStats.total.size)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pwa-status.tsx_2506": {
        "file": "components/pwa/pwa-status.tsx",
        "query": "\">\n                      Update Available\n                    </h4>\n                    <p className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "pwa-status.tsx_2507": {
        "file": "components/pwa/pwa-status.tsx",
        "query": "\">\n                      A new version is available. Refresh to update.\n                    </p>\n                    <Button\n                      size=\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2508": {
        "file": "components/settings/settings-content.tsx",
        "query": ".select(\n          \"id,full_name,email,role,company_name,phone,avatar_url,created_at,updated_at\",\n        )\n        .eq(\"id\", user.id)\n        .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2509": {
        "file": "components/settings/settings-content.tsx",
        "query": ".select(\n            \"id,full_name,email,role,company_name,phone,avatar_url,created_at,updated_at\",\n          )\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2510": {
        "file": "components/settings/settings-content.tsx",
        "query": ".insert(newProfile)\n          .select(\n            \"id,full_name,email,role,company_name,phone,avatar_url,created_at,updated_at\",\n          )\n          .single()",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2511": {
        "file": "components/settings/settings-content.tsx",
        "query": ".update({\n          full_name: profile.full_name,\n          company_name: profile.company_name,\n          phone: profile.phone,\n        })\n        .eq(\"id\", user.id)",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2512": {
        "file": "components/settings/settings-content.tsx",
        "query": "\";\n\ninterface UserProfile {\n  id: string;\n  full_name: string | null;\n  email: string | null;\n  role: string;\n  company_name: string | null;\n  phone: string | null;\n  avatar_url?: string | null;\n  cre...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2513": {
        "file": "components/settings/settings-content.tsx",
        "query": "\")\n        .select(\n          \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2514": {
        "file": "components/settings/settings-content.tsx",
        "query": "\")\n          .insert(newProfile)\n          .select(\n            \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2515": {
        "file": "components/settings/settings-content.tsx",
        "query": "\")\n        .update({\n          full_name: profile.full_name,\n          company_name: profile.company_name,\n          phone: profile.phone,\n        })\n        .eq(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2516": {
        "file": "components/settings/settings-content.tsx",
        "query": "\"Profile updated successfully!\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2517": {
        "file": "components/settings/settings-content.tsx",
        "query": "\"Failed to update profile\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2518": {
        "file": "components/settings/settings-content.tsx",
        "query": "\"Failed to update profile\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "settings-content.tsx_2519": {
        "file": "components/settings/settings-content.tsx",
        "query": "\" />\n                Personal Information\n              </CardTitle>\n              <CardDescription>\n                Update your personal details and contact information\n              </CardDescriptio...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2520": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "`}\n                >\n                  <td className=\"px-4 py-2\">\n                    <input\n                      type=\"text\"\n                      value={entry.description}\n                      onC...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2521": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "` : undefined\n                      }\n                    />\n                  </td>\n                  <td className=\"px-4 py-2\">\n                    <input\n                      type=\"text\"\n         ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2522": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "` : undefined\n                      }\n                    />\n                  </td>\n                  <td className=\"px-4 py-2\">\n                    <input\n                      type=\"number\"\n       ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2523": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "`}\n                      aria-label=\"Width in feet\"\n                      aria-invalid={hasEntryErrors}\n                      min=\"0\"\n                      step=\"0.1\"\n                    />\n          ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2524": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "`}\n                      aria-label={\n                        calculation === \"area\"\n                          ? \"Height in feet\"\n                          : \"Length in feet\"\n                      }\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2525": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "`Delete measurement for ${entry.description || \"this entry\"}`",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2526": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\";\nimport {\n  validateMeasurementEntryUpdate,\n  sanitizeInput,\n  validateDimensions,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2527": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\";\n\ninterface MeasurementTableProps {\n  category: string;\n  categoryLabel: string;\n  entries: MeasurementEntry[];\n  onUpdate: (entries: MeasurementEntry[]) => void;\n  calculation: \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2528": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\";\n}\n\nconst MeasurementTableComponent = ({\n  category,\n  categoryLabel,\n  entries,\n  onUpdate,\n  calculation,\n}: MeasurementTableProps) => {\n  const [editingId, setEditingId] = useState<string | null>...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2529": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\",\n      total: 0,\n    };\n    onUpdate([...entries, newEntry]);\n    setEditingId(newEntry.id);\n  }, [category, calculation, entries, onUpdate]);\n\n  // Debounced update function for performance\n  const...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2530": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"].includes(field)\n              ? sanitizeInput(value)\n              : value;\n\n          const updatedEntry = { ...entry, [field]: sanitizedValue };\n\n          // Auto-calculate total\n          if (c...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2531": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\") {\n            updatedEntry.total =\n              updatedEntry.width * updatedEntry.height * updatedEntry.quantity;\n          } else if (calculation === \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2532": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\") {\n            updatedEntry.total =\n              (updatedEntry.width || updatedEntry.length || 0) *\n              updatedEntry.quantity;\n          } else {\n            updatedEntry.total = updatedE...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2533": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"],\n            }));\n          } else {\n            // Clear validation errors for this entry\n            setValidationErrors((prev) => {\n              const newErrors = { ...prev };\n              del...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2534": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"\n          ) {\n            const dimValidation = validateDimensions(\n              updatedEntry.width,\n              updatedEntry.height,\n              updatedEntry.length,\n            );\n           ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2535": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"\n                      value={entry.description}\n                      onChange={(e) =>\n                        updateEntry(entry.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2536": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"\n                      value={entry.location}\n                      onChange={(e) =>\n                        updateEntry(entry.id, \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2537": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"\n                      value={entry.width}\n                      onChange={(e) =>\n                        updateEntry(\n                          entry.id,\n                          \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2538": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\" ? entry.height : entry.length\n                      }\n                      onChange={(e) =>\n                        updateEntry(\n                          entry.id,\n                          calcul...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2539": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"\n                      value={entry.quantity}\n                      onChange={(e) =>\n                        updateEntry(\n                          entry.id,\n                          \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MeasurementTable.tsx_2540": {
        "file": "components/takeoff/MeasurementTable.tsx",
        "query": "\"\n                      aria-label={`Delete measurement for ${entry.description || \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TakeoffSummary.tsx_2541": {
        "file": "components/takeoff/TakeoffSummary.tsx",
        "query": "\">\n            All selected services have the required measurements for accurate\n            estimation.\n          </p>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {totalMeasurements === ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2542": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2543": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\"Please select a category\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2544": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\"Please select a complexity level\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2545": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\",\n      tags: [],\n      recommendations: [],\n    },\n  });\n\n  // Extract services from flow data with memoization\n  const requiredServices = useMemo(\n    () => flowData.scopeDetails?.selectedServices ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": ["flow"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2546": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select\n                          onValu...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2547": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">\n                              Commercial\n                            </SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2548": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">\n                              Residential\n                            </SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2549": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">\n                              Industrial\n                            </SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2550": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">Specialty</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2551": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Complexity</FormLabel>\n                        <Select\n                          onVa...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2552": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">Simple</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2553": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">Moderate</SelectItem>\n                            <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SaveTemplateModal.tsx_2554": {
        "file": "components/templates/SaveTemplateModal.tsx",
        "query": "\">Complex</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TagInput.tsx_2555": {
        "file": "components/templates/TagInput.tsx",
        "query": "`Selected ${label.toLowerCase()}`",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "TagInput.tsx_2556": {
        "file": "components/templates/TagInput.tsx",
        "query": "\"\n        aria-label={`Selected ${label.toLowerCase()}`}\n      >\n        {tags.map((tag) => (\n          <Badge\n            key={tag}\n            variant=\"",
        "operationType": "unknown",
        "complexity": 2,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SessionRecoveryModal.tsx_2557": {
        "file": "components/ui/SessionRecoveryModal.tsx",
        "query": "`;\n  };\n\n  const getDeviceIcon = (platform: string) => {\n    if (\n      platform.toLowerCase().includes(\"mobile\") ||\n      platform.toLowerCase().includes(\"android\") ||\n      platform.toLowerCase().in...",
        "operationType": "update",
        "complexity": 9,
        "estimatedLatency": 125,
        "tables": ["your"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "SessionRecoveryModal.tsx_2558": {
        "file": "components/ui/SessionRecoveryModal.tsx",
        "query": "\";\n\ninterface SessionRecoveryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  availableDrafts: SessionDraft[];\n  isRecovering: boolean;\n  onRecoverSession: (draftId: string) => Promise<void>;\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SessionRecoveryModal.tsx_2559": {
        "file": "components/ui/SessionRecoveryModal.tsx",
        "query": "\"}\n                    {formatTimeAgo(new Date(mostRecentDraft.updatedAt))}\n                  </p>\n                </div>\n                {getRecoverySourceBadge(mostRecentDraft.recovery.source)}\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SessionRecoveryModal.tsx_2560": {
        "file": "components/ui/SessionRecoveryModal.tsx",
        "query": "\"}\n                </Button>\n                <Button\n                  onClick={() => onDeleteDraft(mostRecentDraft.id)}\n                  variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SessionRecoveryModal.tsx_2561": {
        "file": "components/ui/SessionRecoveryModal.tsx",
        "query": "\">\n                            {formatTimeAgo(new Date(draft.updatedAt))}\n                          </span>\n                          {getRecoverySourceBadge(draft.recovery.source)}\n                  ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "SessionRecoveryModal.tsx_2562": {
        "file": "components/ui/SessionRecoveryModal.tsx",
        "query": "\"\n                          disabled={isRecovering}\n                        >\n                          Restore\n                        </Button>\n                        <Button\n                      ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2563": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": ".delete(descriptionId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2564": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": ".delete(descriptionId)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2565": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "`;\n    this.descriptions.set(descriptionId, description);\n\n    // Create or update description element\n    let descElement = document.getElementById(descriptionId);\n    if (!descElement) {\n      descE...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2566": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "`;\n      document.body.appendChild(region);\n      this.liveRegions.set(priority, region);\n    });\n  }\n\n  /**\n   * Makes an announcement to screen readers\n   */\n  announce(options: AnnouncementOptions)...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2567": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "`, { priority: \"assertive\", clear: true });\n    },\n    [announce],\n  );\n\n  const announceLoading = React.useCallback(\n    (message: string = \"Loading...\") => {\n      announce(message, { priority: \"pol...",
        "operationType": "select",
        "complexity": 26,
        "estimatedLatency": 240,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": true,
        "optimizationPotential": 3
      },
      "accessibility-utils.tsx_2568": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "`;\n  },\n\n  /**\n   * Checks if an element is focusable\n   */\n  isFocusable: (element: HTMLElement): boolean => {\n    const focusableSelectors = [\n      \"button:not([disabled])\",\n      \"[href]\",\n      \"...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2569": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2570": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2571": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "',\n    ];\n\n    return focusableSelectors.some((selector) => element.matches(selector));\n  },\n\n  /**\n   * Gets all focusable elements within a container\n   */\n  getFocusableElements: (container: HTMLEl...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2572": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\";\n\n// Focus management options\nexport interface FocusOptions {\n  /** Whether to scroll the element into view */\n  preventScroll?: boolean;\n  /** Custom focus selector within the target */\n  selector?...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2573": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\";\n      document.body.appendChild(descElement);\n    }\n\n    descElement.textContent = description;\n    this.elements.set(descriptionId, descElement);\n\n    return descriptionId;\n  }\n\n  /**\n   * Updates...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2574": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\";\n        // Small delay to ensure screen reader notices the clear\n        setTimeout(() => {\n          region.textContent = message;\n        }, 50);\n      } else {\n        region.textContent = messa...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2575": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\";\n            break;\n        }\n      }\n\n      if (direction) {\n        event.preventDefault();\n        navigate(direction);\n      }\n\n      onKeyDown?.(event, direction);\n    },\n    [navigate, onKeyDo...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2576": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\"])',\n      );\n      const firstElement = focusableElements[0] as HTMLElement;\n      focusElement(firstElement, options);\n    },\n    [focusElement],\n  );\n\n  const focusLast = React.useCallback(\n    (c...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2577": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\"): string => {\n    return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  },\n\n  /**\n   * Checks if an element is focusable\n   */\n  isFocusable: (element: HTMLElement): boolean...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2578": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\"select:not([disabled])\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2579": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\"])',\n    ];\n\n    return focusableSelectors.some((selector) => element.matches(selector));\n  },\n\n  /**\n   * Gets all focusable elements within a container\n   */\n  getFocusableElements: (container: HTM...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "accessibility-utils.tsx_2580": {
        "file": "components/ui/accessibility-utils.tsx",
        "query": "\"])';\n    return Array.from(container.querySelectorAll(focusableSelector));\n  },\n\n  /**\n   * Creates ARIA attributes object\n   */\n  createAriaAttributes: (options: {\n    label?: string;\n    labelledBy...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "bundle-selector.tsx_2581": {
        "file": "components/ui/bundle-selector.tsx",
        "query": "\"\n          onClick={() => onSelect(bundle)}\n        >\n          <h4 className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "button.tsx_2582": {
        "file": "components/ui/button.tsx",
        "query": "\"inline-flex items-center justify-center gap-2 whitespace-nowrap font-medium ring-offset-background transition-all duration-normal ease-out focus-visible:outline-none focus-visible:ring-2 focus-visibl...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connectivity-status.tsx_2583": {
        "file": "components/ui/connectivity-status.tsx",
        "query": ".select(\"count\")\n          .limit(1)",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "connectivity-status.tsx_2584": {
        "file": "components/ui/connectivity-status.tsx",
        "query": "\")\n          .select(\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dropdown-menu.tsx_2585": {
        "file": "components/ui/dropdown-menu.tsx",
        "query": "\"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dropdown-menu.tsx_2586": {
        "file": "components/ui/dropdown-menu.tsx",
        "query": "\"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-n...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dropdown-menu.tsx_2587": {
        "file": "components/ui/dropdown-menu.tsx",
        "query": "\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-no...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "dropdown-menu.tsx_2588": {
        "file": "components/ui/dropdown-menu.tsx",
        "query": "\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-no...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "error-handling-utils.tsx_2589": {
        "file": "components/ui/error-handling-utils.tsx",
        "query": ".delete(handler)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "error-handling-utils.tsx_2590": {
        "file": "components/ui/error-handling-utils.tsx",
        "query": "`,\n    severity,\n    category,\n    timestamp: Date.now(),\n    component,\n    userAction,\n    context,\n  };\n\n  const error = new Error(message, { cause }) as UIError;\n  error.context = errorContext;\n  ...",
        "operationType": "delete",
        "complexity": 13,
        "estimatedLatency": 150,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "error-handling-utils.tsx_2591": {
        "file": "components/ui/error-handling-utils.tsx",
        "query": "\", reportingError);\n  }\n}\n\n/**\n * Registers a global error handler\n */\nexport function registerErrorHandler(handler: ErrorHandler): () => void {\n  errorState.handlers.add(handler);\n\n  return () => {\n ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2592": {
        "file": "components/ui/focus-management.tsx",
        "query": ".delete(id)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2593": {
        "file": "components/ui/focus-management.tsx",
        "query": "`\n      button:not([disabled]),\n      [href]:not([disabled]),\n      input:not([disabled]),\n      select:not([disabled]),\n      textarea:not([disabled]),\n      [tabindex]:not([tabindex=\"-1\"]):not([disa...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2594": {
        "file": "components/ui/focus-management.tsx",
        "query": "',\n        ) as HTMLElement;\n        if (mainContent) {\n          mainContent.focus();\n          announceToScreenReader(\"Returned to main content\");\n        }\n      }\n    };\n\n    document.addEventList...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2595": {
        "file": "components/ui/focus-management.tsx",
        "query": "\",\n  ) => void;\n  currentFocusId: string | null;\n}\n\nconst FocusManagerContext = createContext<FocusManagerContextType | null>(null);\n\ninterface FocusableElement {\n  element: HTMLElement;\n  id: string;...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2596": {
        "file": "components/ui/focus-management.tsx",
        "query": "\");\n        return isVisible && isEnabled;\n      })\n      .sort((a, b) => {\n        // Sort by priority first, then by DOM order\n        if (a.priority !== b.priority) {\n          return b.priority - ...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2597": {
        "file": "components/ui/focus-management.tsx",
        "query": "\") return;\n\n      const focusableElements = container.querySelectorAll(focusableSelectors);\n      const firstElement = focusableElements[0] as HTMLElement;\n      const lastElement = focusableElements[...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2598": {
        "file": "components/ui/focus-management.tsx",
        "query": "\", handleKeyDown);\n\n    // Focus first element\n    const firstFocusable = container.querySelector(\n      focusableSelectors,\n    ) as HTMLElement;\n    firstFocusable?.focus();\n\n    return () => {\n    ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2599": {
        "file": "components/ui/focus-management.tsx",
        "query": "\") {\n        const mainContent = document.querySelector(\n          '[role=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "focus-management.tsx_2600": {
        "file": "components/ui/focus-management.tsx",
        "query": "\"\n          >\n            Skip to first interactive element\n          </button>\n          <button\n            onClick={() => {\n              const mainContent = document.querySelector(\n               ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_2601": {
        "file": "components/ui/index.ts",
        "query": "\";\nexport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "index.ts_2602": {
        "file": "components/ui/index.ts",
        "query": "\";\n\n// Performance monitoring utilities for component optimization\nexport {\n  recordMetric,\n  measureTime,\n  measureTimeAsync,\n  usePerformanceMetrics,\n  getMetrics,\n  getPerformanceStats,\n  clearMetr...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "input.tsx_2603": {
        "file": "components/ui/input.tsx",
        "query": "\"absolute left-3 top-1/2 -translate-y-1/2 text-text-secondary text-sm pointer-events-none select-none\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "input.tsx_2604": {
        "file": "components/ui/input.tsx",
        "query": "\"absolute left-3 transition-all duration-normal ease-out pointer-events-none select-none\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "input.tsx_2605": {
        "file": "components/ui/input.tsx",
        "query": "\"text-text-secondary text-sm pointer-events-none select-none\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobileOptimizedSmartField.tsx_2606": {
        "file": "components/ui/mobile/MobileOptimizedSmartField.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2607": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "`,\n        },\n        status: \"processing\",\n        compressionApplied: compressedFile.size !== file.size,\n      };\n\n      newPhotos.push(photo);\n    }\n\n    const updatedPhotos = [...photos, ...newPho...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2608": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\",\n    gridEnabled: gridLines,\n    stream: null,\n    error: null,\n    permissions: {\n      camera: false,\n      location: false,\n    },\n  });\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2609": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\"Please select only image files.\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2610": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\",\n        compressionApplied: compressedFile.size !== file.size,\n      };\n\n      newPhotos.push(photo);\n    }\n\n    const updatedPhotos = [...photos, ...newPhotos];\n    setPhotos(updatedPhotos);\n    o...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2611": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\",\n            imageQuality,\n          );\n        } else {\n          resolve({ compressedFile: file, thumbnail });\n        }\n      };\n\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  // PHA...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2612": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\");\n        }\n\n        const result = await response.json();\n        const processingTime = Date.now() - startTime;\n\n        const enhancedAnalysis = {\n          ...result.analysis,\n          confiden...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2613": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\", error);\n\n        // Update photo status to error\n        setPhotos((prev) =>\n          prev.map((p) =>\n            p.id === photo.id\n              ? {\n                  ...p,\n                  stat...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2614": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\";\n        setError(errorMessage);\n\n        onCameraError?.(errorMessage);\n      } finally {\n        setIsAnalyzing(null);\n      }\n    }\n  };\n\n  // PHASE 3 FIX: Retry analysis for failed photos\n  cons...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2615": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\" in window\n            ? requestIdleCallback\n            : (callback: () => void) => setTimeout(callback, 0);\n\n        scheduleCleanup(() => {\n          cleanupPhotoUrls([photoToRemove]);\n        });...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2616": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\"\n        onChange={(e) => handleFileSelect(e.target.files, true)}\n        className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "MobilePhotoCapture.tsx_2617": {
        "file": "components/ui/mobile/MobilePhotoCapture.tsx",
        "query": "\"\n        onChange={(e) => handleFileSelect(e.target.files, false)}\n        className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-utils.ts_2618": {
        "file": "components/ui/performance-utils.ts",
        "query": "`,\n        actualDuration,\n        \"interaction\",\n        {\n          component: componentName,\n        },\n      );\n    },\n    [componentName],\n  );\n\n  const startInteraction = React.useCallback(() =>...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-utils.ts_2619": {
        "file": "components/ui/performance-utils.ts",
        "query": "\"];\n  component?: string;\n  since?: number;\n}): {\n  count: number;\n  average: number;\n  median: number;\n  min: number;\n  max: number;\n  p95: number;\n  p99: number;\n} {\n  const metrics = getMetrics(fil...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "performance-utils.ts_2620": {
        "file": "components/ui/performance-utils.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "screen-reader-enhancements.tsx_2621": {
        "file": "components/ui/screen-reader-enhancements.tsx",
        "query": "`);\n\n          announcePolite(message, 500);\n          hasAnnounced.current = true;\n        }\n      },\n      { threshold: 0.1 },\n    );\n\n    if (landmarkRef.current) {\n      observer.observe(landmarkR...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "screen-reader-enhancements.tsx_2622": {
        "file": "components/ui/screen-reader-enhancements.tsx",
        "query": "`}\n      </span>\n    </LiveRegion>\n  );\n};\n\n/**\n * Dynamic content announcer for live updates\n */\nexport interface ContentAnnouncerProps {\n  /** Content to announce */\n  children: React.ReactNode;\n  /...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "screen-reader-enhancements.tsx_2623": {
        "file": "components/ui/screen-reader-enhancements.tsx",
        "query": "\">\n            {description}\n          </div>\n        )}\n\n        {children}\n      </Element>\n    </>\n  );\n};\n\n/**\n * Progress announcer for dynamic content updates\n */\nexport interface ProgressAnnoun...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "screen-reader-enhancements.tsx_2624": {
        "file": "components/ui/screen-reader-enhancements.tsx",
        "query": "\">\n        {progress < 100\n          ? `${activity} ${Math.round(progress)}% complete`\n          : completionMessage || `${activity} completed`}\n      </span>\n    </LiveRegion>\n  );\n};\n\n/**\n * Dynamic...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "screen-reader-enhancements.tsx_2625": {
        "file": "components/ui/screen-reader-enhancements.tsx",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "screen-reader-enhancements.tsx_2626": {
        "file": "components/ui/screen-reader-enhancements.tsx",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2627": {
        "file": "components/ui/select.tsx",
        "query": "\";\nimport * as SelectPrimitive from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2628": {
        "file": "components/ui/select.tsx",
        "query": "\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof Sele...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2629": {
        "file": "components/ui/select.tsx",
        "query": "\",\n        className,\n      )}\n      {...triggerProps}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2630": {
        "file": "components/ui/select.tsx",
        "query": "\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n});\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.Elem...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2631": {
        "file": "components/ui/select.tsx",
        "query": "\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2632": {
        "file": "components/ui/select.tsx",
        "query": "\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof S...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2633": {
        "file": "components/ui/select.tsx",
        "query": "\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2634": {
        "file": "components/ui/select.tsx",
        "query": "\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2635": {
        "file": "components/ui/select.tsx",
        "query": "\"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2636": {
        "file": "components/ui/select.tsx",
        "query": "\", className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.Compo...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2637": {
        "file": "components/ui/select.tsx",
        "query": "\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "select.tsx_2638": {
        "file": "components/ui/select.tsx",
        "query": "\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-card.tsx_2639": {
        "file": "components/ui/service-card.tsx",
        "query": "`p-4 border rounded-lg cursor-pointer transition-all ${\n        isSelected ? \"border-blue-500 bg-blue-50\" : \"border-gray-300\"\n      } ${isDisabled ? \"opacity-75 cursor-not-allowed\" : \"hover:border-gra...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "service-card.tsx_2640": {
        "file": "components/ui/service-card.tsx",
        "query": "\"\n          checked={isSelected}\n          disabled={isDisabled}\n          className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "slider.tsx_2641": {
        "file": "components/ui/slider.tsx",
        "query": "\"relative flex w-full touch-none select-none items-center\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "standardized-notifications.tsx_2642": {
        "file": "components/ui/standardized-notifications.tsx",
        "query": "`;\n\n      const notification: NotificationData = {\n        ...notificationData,\n        id,\n        timestamp: new Date(),\n        duration: notificationData.duration ?? defaultDuration,\n      };\n\n   ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "standardized-notifications.tsx_2643": {
        "file": "components/ui/standardized-notifications.tsx",
        "query": "'s not critical\n        if (notification.severity !== \"critical\") {\n          handleDismiss();\n        }\n      } catch (error) {\n        console.error(`Recovery action failed: ${action.id}`, error);\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "standardized-notifications.tsx_2644": {
        "file": "components/ui/standardized-notifications.tsx",
        "query": "\">,\n  ) => string;\n  removeNotification: (id: string) => void;\n  clearAll: () => void;\n  updateNotification: (id: string, updates: Partial<NotificationData>) => void;\n}\n\nconst NotificationContext = cr...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "standardized-notifications.tsx_2645": {
        "file": "components/ui/standardized-notifications.tsx",
        "query": "\">): string => {\n      const id = `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n      const notification: NotificationData = {\n        ...notificationData,\n        id,\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "table.tsx_2646": {
        "file": "components/ui/table.tsx",
        "query": "\"border-b border-border-primary transition-all hover:bg-bg-elevated active:bg-muted cursor-pointer data-[state=selected]:bg-primary-action/10 data-[state=selected]:border-primary-action\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProgressiveHintsSystem.tsx_2647": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": ".delete(category)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProgressiveHintsSystem.tsx_2648": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": "'t show dismissed hints\n      if (dismissedHints.has(hint.id)) return false;\n\n      // Hide completed tasks unless explicitly shown\n      if (!config.showCompletedTasks && hint.progressValue === 100)\n...",
        "operationType": "delete",
        "complexity": 48,
        "estimatedLatency": 410,
        "tables": ["error"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "ProgressiveHintsSystem.tsx_2649": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": "\"]),\n  );\n  const [showAllHints, setShowAllHints] = useState(false);\n\n  // Transform validation results into progressive hints\n  const progressiveHints = useMemo(() => {\n    return transformValidation...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProgressiveHintsSystem.tsx_2650": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": "\"Service Selection\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProgressiveHintsSystem.tsx_2651": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": "\"Select at least one service to proceed with the estimate.\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProgressiveHintsSystem.tsx_2652": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": "\",\n                ]\n              : undefined,\n        });\n      }\n      break;\n\n    case 2: // Scope Details\n      if (!flowData.scopeDetails?.selectedServices?.length) {\n        hints.push({\n      ...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 65,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "ProgressiveHintsSystem.tsx_2653": {
        "file": "components/validation/ProgressiveHintsSystem.tsx",
        "query": "\"Select Services\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "3DemoPageDynamic.tsx_2654": {
        "file": "components/visualizer/3DemoPageDynamic.tsx",
        "query": "\" />\n\n      {/* Demo Selection Card skeleton */}\n      <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2655": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "`,\n        startPoint: { x: x - 50, y: y - 50, z: 0 },\n        endPoint: { x: x + 50, y: y + 50, z: 0 },\n        measurement: 10, // Default 10 feet\n        unit: \"ft\",\n        label: \"Custom Measurem...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2656": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "`,\n        name: \"New Service Area\",\n        surface: \"exterior_wall\",\n        coordinates: [\n          { x: x - 30, y: y - 30, z: 0 },\n          { x: x + 30, y: y - 30, z: 0 },\n          { x: x + 30,...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2657": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2658": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\";\n\ninterface Enhanced3DProps {\n  buildingData?: {\n    height: number;\n    width: number;\n    depth: number;\n    stories: number;\n    buildingType: string;\n    materials?: string[];\n    features?: any...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2659": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\",\n    riskFactors: [] as string[],\n  });\n\n  const [selectedTool, setSelectedTool] = useState<\n    \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2660": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"select\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2661": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"\n            ? BuildingTemplates.industrial\n            : BuildingTemplates.commercial;\n\n      const building = buildingTemplate(\n        dimensions.width,\n        dimensions.height,\n        dimensio...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2662": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"\n            ? BuildingTemplates.industrial\n            : BuildingTemplates.commercial;\n\n      const building = buildingTemplate(\n        dimensions.width,\n        dimensions.height,\n        dimensio...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2663": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\") return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2664": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\",\n      };\n\n      engine.addMeasurement(measurement);\n      engine.render();\n      onMeasurementAdd?.(measurement);\n    }\n\n    if (selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2665": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"],\n      };\n\n      engine.addServiceArea(serviceArea);\n      engine.render();\n      updateAnalysis(engine);\n      onServiceAreaAdd?.(serviceArea);\n    }\n  };\n\n  const exportData = () => {\n    if (!en...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2666": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\");\n    link.href = url;\n    link.download = `3d-building-model-${Date.now()}.json`;\n    link.click();\n  };\n\n  const importData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = eve...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2667": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">\n                  <Badge\n                    variant={selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2668": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\" />\n                    Select\n                  </Badge>\n                  <Badge\n                    variant={selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2669": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\" />\n                    Measure\n                  </Badge>\n                  <Badge\n                    variant={selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2670": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">\n                {/* Tool Selection */}\n                <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2671": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"\n                    variant={selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2672": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"}\n                    onClick={() => setSelectedTool(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2673": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\" />\n                    Select\n                  </Button>\n                  <Button\n                    size=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2674": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"\n                    variant={selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2675": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"}\n                    onClick={() => setSelectedTool(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2676": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"\n                    variant={selectedTool === \"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2677": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\"}\n                    onClick={() => setSelectedTool(\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2678": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Building Type</Label>\n                  <Select\n                    value={dimensions.buildingType}\n                    onValueChange={(value) =>\n                      setDimensions((prev) => ({\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2679": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Residential</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2680": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Commercial</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2681": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Industrial</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* View ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2682": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">\n                <div>\n                  <Label>Perspective</Label>\n                  <Select\n                    value={viewingOptions.perspective}\n                    onValueChange={(value: any) =...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2683": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Front View</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2684": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Back View</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2685": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Left View</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2686": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Right View</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2687": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Top View</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2688": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Isometric</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Lighting</Label>\n                  <Sele...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2689": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Natural</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2690": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Studio</SelectItem>\n                      <SelectItem value=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-building-3d.tsx_2691": {
        "file": "components/visualizer/enhanced-building-3d.tsx",
        "query": "\">Night</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2692": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "`);\n      }\n\n      const result = await response.json();\n      if (result.success) {\n        setWeatherData(result.data);\n        setLastUpdated(new Date());\n      } else {\n        throw new Error(res...",
        "operationType": "unknown",
        "complexity": 23,
        "estimatedLatency": 230,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 3
      },
      "enhanced-weather-display.tsx_2693": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "`}\n            />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Weather Alerts */}\n      {weatherData.alerts && weatherData.alerts.length > 0 && (\n        <div classNa...",
        "operationType": "select",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2694": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2695": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "\";\n\ninterface WeatherDisplayProps {\n  location: string;\n  services: string[];\n  projectDuration?: number;\n  onLocationChange?: (location: string) => void;\n  onServicesChange?: (services: string[]) => ...",
        "operationType": "unknown",
        "complexity": 4,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": true,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2696": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "\",\n      });\n\n      const response = await fetch(`/api/weather/enhanced?${params}`);\n      if (!response.ok) {\n        throw new Error(`Weather API error: ${response.status}`);\n      }\n\n      const re...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2697": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "\">\n          {lastUpdated && (\n            <span className=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2698": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "\">\n              Updated: {formatTime(lastUpdated)}\n            </span>\n          )}\n          <Button\n            variant=\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "enhanced-weather-display.tsx_2699": {
        "file": "components/weather/enhanced-weather-display.tsx",
        "query": "\">\n                  No services selected. Add services to see weather impact\n                  analysis.\n                </p>\n              ) : (\n                <div className=\"",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-ai.ts_2700": {
        "file": "hooks/use-ai.ts",
        "query": "\", messages, toolNames] as const,\n} as const;\n\n// Cache configuration\nconst AI_CACHE_CONFIG = {\n  // Analysis results can be cached for 1 hour\n  analysis: { staleTime: 60 * 60 * 1000, cacheTime: 2 * 6...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": true,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-ai.ts_2701": {
        "file": "hooks/use-ai.ts",
        "query": "\",\n          });\n        }\n      },\n      enabled: options.enabled !== false && !!request.prompt,\n      select: options.select,\n      ...AI_CACHE_CONFIG.analysis,\n    });\n  };\n\n  // Image analysis wit...",
        "operationType": "select",
        "complexity": 1,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2702": {
        "file": "hooks/use-audit.ts",
        "query": "`,\n        severity: statusCode >= 400 ? \"high\" : \"low\",\n        details: {\n          method,\n          endpoint,\n          status_code: statusCode,\n          ...details,\n        },\n        compliance...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2703": {
        "file": "hooks/use-audit.ts",
        "query": "`,\n        severity: operation === \"deleted\" ? \"high\" : \"medium\",\n        details: {\n          file_name: fileName,\n          operation,\n          ...details,\n        },\n        complianceTags: [\"file...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2704": {
        "file": "hooks/use-audit.ts",
        "query": "`,\n          severity: \"low\",\n          details: {\n            event_type: event.type,\n            target_tag: target.tagName,\n            target_id: target.id,\n            target_class: target.classN...",
        "operationType": "update",
        "complexity": 5,
        "estimatedLatency": 95,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2705": {
        "file": "hooks/use-audit.ts",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2706": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2707": {
        "file": "hooks/use-audit.ts",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2708": {
        "file": "hooks/use-audit.ts",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2709": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2710": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2711": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2712": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2713": {
        "file": "hooks/use-audit.ts",
        "query": "\",\n      });\n    },\n    [audit],\n  );\n\n  const logEstimateUpdated = useCallback(\n    async (estimateId: string, oldData: any, newData: any) => {\n      return audit.logDataChange({\n        resourceType...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2714": {
        "file": "hooks/use-audit.ts",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2715": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2716": {
        "file": "hooks/use-audit.ts",
        "query": "\"estimate_updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2717": {
        "file": "hooks/use-audit.ts",
        "query": "\"],\n      });\n    },\n    [audit],\n  );\n\n  return {\n    ...audit,\n    logEstimateCreated,\n    logEstimateUpdated,\n    logEstimateDeleted,\n    logEstimateStatusChange,\n  };\n};\n\n// Hook for customer audi...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2718": {
        "file": "hooks/use-audit.ts",
        "query": "\",\n      });\n    },\n    [audit],\n  );\n\n  const logCustomerUpdated = useCallback(\n    async (customerId: string, oldData: any, newData: any) => {\n      return audit.logDataChange({\n        resourceType...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2719": {
        "file": "hooks/use-audit.ts",
        "query": "\"updated\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-audit.ts_2720": {
        "file": "hooks/use-audit.ts",
        "query": "\"deleted\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-estimates.ts_2721": {
        "file": "hooks/use-estimates.ts",
        "query": "\";\n\ninterface UseEstimatesOptions {\n  limit?: number;\n  status?: EstimateStatus;\n  search?: string;\n  autoFetch?: boolean;\n}\n\ninterface UseEstimatesReturn {\n  estimates: Estimate[];\n  loading: boolean...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-estimates.ts_2722": {
        "file": "hooks/use-estimates.ts",
        "query": "\", err);\n        return null;\n      }\n    },\n    [fetchEstimates],\n  );\n\n  const updateEstimate = useCallback(\n    async (id: string, params: any) => {\n      try {\n        setError(null);\n        cons...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-estimates.ts_2723": {
        "file": "hooks/use-estimates.ts",
        "query": "\", err);\n        return false;\n      }\n    },\n    [fetchEstimates],\n  );\n\n  const deleteEstimate = useCallback(async (id: string) => {\n    try {\n      setError(null);\n      const success = await unifi...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["local"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-estimates.ts_2724": {
        "file": "hooks/use-estimates.ts",
        "query": "\", err);\n      return false;\n    }\n  }, []);\n\n  const changeEstimateStatus = useCallback(\n    async (id: string, status: EstimateStatus) => {\n      try {\n        setError(null);\n        const success ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis-form.ts_2725": {
        "file": "hooks/use-facade-analysis-form.ts",
        "query": "\";\n\ninterface AnalyzeImagesInput {\n  building_address: string;\n  building_type: string;\n  images: Array<{\n    url: string;\n    type: string;\n    view_angle: string;\n  }>;\n  has_covered_areas?: boolean...",
        "operationType": "update",
        "complexity": 4,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": true,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2726": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch facade analysis\");\n      }\n      return response.json();\n    },\n    enabled: !!analysisId,\n  });\n\n  // Create facade analysis\n  c...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2727": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.jso...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2728": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to delete analysis\");\n      }\n\n      ret...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2729": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "`,\n        {\n          method: \"POST\",\n          body: formData,\n        },\n      );\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Fai...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2730": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "\";\nimport {\n  FacadeAnalysis,\n  FacadeAnalysisImage,\n  CreateFacadeAnalysisInput,\n  UpdateFacadeAnalysisInput,\n} from \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2731": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "\"] });\n    },\n  });\n\n  // Update facade analysis\n  const updateAnalysis = useMutation({\n    mutationFn: async ({\n      id,\n      data,\n    }: {\n      id: string;\n      data: UpdateFacadeAnalysisInput;...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2732": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "\"Failed to update analysis\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2733": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "\", variables.id],\n      });\n    },\n  });\n\n  // Delete facade analysis\n  const deleteAnalysis = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/facade-ana...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2734": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "\"Failed to delete analysis\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-facade-analysis.ts_2735": {
        "file": "hooks/use-facade-analysis.ts",
        "query": "\",\n      });\n    },\n  });\n\n  return {\n    analysis: data?.analysis,\n    images: data?.images || [],\n    measurements: data?.measurements,\n    isLoading,\n    error,\n    createAnalysis,\n    updateAnalys...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2736": {
        "file": "hooks/use-monitoring.ts",
        "query": "`);\n      }\n\n      const result = await response.json();\n      setData(result);\n      setLastUpdate(Date.now());\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Faile...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2737": {
        "file": "hooks/use-monitoring.ts",
        "query": "`);\n      }\n\n      const result = await response.json();\n      setConfig(result);\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to fetch configuration\",\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2738": {
        "file": "hooks/use-monitoring.ts",
        "query": "\"],\n  } = options || {};\n\n  const [data, setData] = useState<MonitoringData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null)...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2739": {
        "file": "hooks/use-monitoring.ts",
        "query": "\"));\n      }\n\n      const response = await fetch(`/api/monitoring/metrics?${params}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      cons...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2740": {
        "file": "hooks/use-monitoring.ts",
        "query": "\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [include]);\n\n  const refresh = useCallback(() => {\n    setIsLoading(true);\n    return fetchData();\n  }, [fetchData]);\n\n  // Auto-refresh ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2741": {
        "file": "hooks/use-monitoring.ts",
        "query": "\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const updateConfig = useCallback(\n    async (section: string, configData: any) => {\n      try {\n        const response = await fe...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2742": {
        "file": "hooks/use-monitoring.ts",
        "query": "\"Failed to update configuration\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2743": {
        "file": "hooks/use-monitoring.ts",
        "query": "\"DELETE\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-monitoring.ts_2744": {
        "file": "hooks/use-monitoring.ts",
        "query": "\", err);\n      return false;\n    }\n  }, []);\n\n  // Initial fetch\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  return {\n    config,\n    isLoading,\n    error,\n    updateConfig,\n    add...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2745": {
        "file": "hooks/use-offline.ts",
        "query": "`,\n      \"DELETE\",\n      {},\n      \"Delete estimate\",\n    );\n  }, []);\n\n  const createCustomer = useCallback(\n    async (customer: any) => {\n      if (isOnline) {\n        try {\n          const respons...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2746": {
        "file": "hooks/use-offline.ts",
        "query": "`, offline: true };\n      }\n    },\n    [isOnline, addAction],\n  );\n\n  const updateCustomer = useCallback(\n    async (id: string, customer: any) => {\n      if (isOnline) {\n        try {\n          const...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2747": {
        "file": "hooks/use-offline.ts",
        "query": "`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(customer),\n          });\n          return await response.json();\n        }...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2748": {
        "file": "hooks/use-offline.ts",
        "query": "\",\n    );\n  }, []);\n\n  const updateEstimate = useCallback(async (id: string, estimate: any) => {\n    return offlineUtils.queueEstimateSave(id, estimate);\n  }, []);\n\n  const deleteEstimate = useCallbac...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2749": {
        "file": "hooks/use-offline.ts",
        "query": "\"Delete estimate\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2750": {
        "file": "hooks/use-offline.ts",
        "query": "\",\n          data: customer,\n          maxRetries: 3,\n        });\n        return { ...customer, id: `offline-${Date.now()}`, offline: true };\n      }\n    },\n    [isOnline, addAction],\n  );\n\n  const up...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2751": {
        "file": "hooks/use-offline.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2752": {
        "file": "hooks/use-offline.ts",
        "query": "\"update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2753": {
        "file": "hooks/use-offline.ts",
        "query": "\",\n          data: { ...customer, id },\n          maxRetries: 3,\n        });\n        return { ...customer, id, offline: true };\n      }\n    },\n    [isOnline, addAction],\n  );\n\n  const deleteCustomer =...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2754": {
        "file": "hooks/use-offline.ts",
        "query": "\"delete\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2755": {
        "file": "hooks/use-offline.ts",
        "query": "\",\n            data: { id },\n            maxRetries: 3,\n          });\n          return { id, deleted: true, offline: true };\n        }\n      } else {\n        await addAction({\n          type: \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2756": {
        "file": "hooks/use-offline.ts",
        "query": "\",\n          data: { id },\n          maxRetries: 3,\n        });\n        return { id, deleted: true, offline: true };\n      }\n    },\n    [isOnline, addAction],\n  );\n\n  return {\n    createEstimate,\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2757": {
        "file": "hooks/use-offline.ts",
        "query": "\", error);\n      return false;\n    } finally {\n      setIsInstalling(false);\n    }\n  }, [installPrompt]);\n\n  return {\n    isInstallable,\n    isInstalled,\n    isInstalling,\n    install,\n    canInstall:...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2758": {
        "file": "hooks/use-offline.ts",
        "query": "\", updateOnlineStatus);\n    window.addEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2759": {
        "file": "hooks/use-offline.ts",
        "query": "\", updateOnlineStatus);\n\n    // Listen for connection changes\n    const connection = (navigator as any).connection;\n    if (connection) {\n      connection.addEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2760": {
        "file": "hooks/use-offline.ts",
        "query": "\", updateConnectionInfo);\n    }\n\n    return () => {\n      window.removeEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2761": {
        "file": "hooks/use-offline.ts",
        "query": "\", updateOnlineStatus);\n      window.removeEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2762": {
        "file": "hooks/use-offline.ts",
        "query": "\", updateOnlineStatus);\n      if (connection) {\n        connection.removeEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2763": {
        "file": "hooks/use-offline.ts",
        "query": "\", updateConnectionInfo);\n      }\n    };\n  }, []);\n\n  const getConnectionQuality = useCallback(() => {\n    if (!isOnline) return \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2764": {
        "file": "hooks/use-offline.ts",
        "query": "\");\n  }, [requestSync]);\n\n  return {\n    isSupported,\n    registrations,\n    requestSync,\n    requestEstimateSync,\n    requestCustomerSync,\n    requestPhotoSync,\n  };\n};\n\n// Storage quota hook\nexport ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-offline.ts_2765": {
        "file": "hooks/use-offline.ts",
        "query": "\", error);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    updateQuota();\n  }, [updateQuota]);\n\n  const formatBytes = useCallback((bytes: number) => {\n    if (bytes === 0) return \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-performance.ts_2766": {
        "file": "hooks/use-performance.ts",
        "query": ".delete({\n      type: \"user_data\",\n      id: cacheKey,\n    })",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-performance.ts_2767": {
        "file": "hooks/use-performance.ts",
        "query": "`,\n        \"database\",\n        queryFn,\n      );\n\n      // Cache the result\n      await cacheManager.set(\n        {\n          type: \"user_data\",\n          id: cacheKey,\n        },\n        result,\n    ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-performance.ts_2768": {
        "file": "hooks/use-performance.ts",
        "query": "\",\n          id: cacheKey,\n        },\n        result,\n        ttl,\n      );\n\n      setData(result);\n      setCached(false);\n      setLastFetch(Date.now());\n    } catch (err) {\n      setError(err as Er...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-sentry-monitoring.ts_2769": {
        "file": "hooks/use-sentry-monitoring.ts",
        "query": ".delete(markKey)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-sentry-monitoring.ts_2770": {
        "file": "hooks/use-sentry-monitoring.ts",
        "query": "`;\n      const startTime = performanceMarks.current.get(markKey);\n\n      if (startTime) {\n        const duration = Date.now() - startTime;\n        performanceMarks.current.delete(markKey);\n\n        lo...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "use-sentry-monitoring.ts_2771": {
        "file": "hooks/use-sentry-monitoring.ts",
        "query": "\",\n        { component, operation },\n      );\n    },\n    [component, trackPerformance],\n  );\n\n  const endPerformanceMark = useCallback(\n    (operation: string) => {\n      if (!trackPerformance) return...",
        "operationType": "delete",
        "complexity": 6,
        "estimatedLatency": 90,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAIAssistant.ts_2772": {
        "file": "hooks/useAIAssistant.ts",
        "query": "\");\n      if (newConversationId && options.conversationId !== newConversationId) {\n        // You might want to update the conversation ID in your parent component\n        console.log(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalytics.ts_2773": {
        "file": "hooks/useAnalytics.ts",
        "query": "\";\n\ninterface UseAnalyticsReturn {\n  metrics: AnalyticsMetric[];\n  insights: PredictiveInsight[];\n  benchmarks: WorkflowBenchmark[];\n  userStats: UserWorkflowStats[];\n  timeSeriesData: TimeSeriesData[...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalytics.ts_2774": {
        "file": "hooks/useAnalytics.ts",
        "query": "\",\n          },\n          filters,\n        ),\n      ]);\n\n      setMetrics(metricsData);\n      setInsights(insightsData);\n      setBenchmarks(benchmarksData);\n      setUserStats(userStatsData);\n      s...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalytics.ts_2775": {
        "file": "hooks/useAnalytics.ts",
        "query": "\",\n          p25: 25,\n          p50: 35,\n          p75: 55,\n          p90: 75,\n          p95: 95,\n          average: 42.3,\n          sampleSize: 1247,\n          lastUpdated: new Date(),\n        },\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalytics.ts_2776": {
        "file": "hooks/useAnalytics.ts",
        "query": "\",\n          p25: 65,\n          p50: 78,\n          p75: 88,\n          p90: 94,\n          p95: 98,\n          average: 78.5,\n          sampleSize: 1247,\n          lastUpdated: new Date(),\n        },\n   ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2777": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"metric_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2778": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"quality_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2779": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"prediction_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2780": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"metric_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2781": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"metric_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2782": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"],\n    autoConnect: true,\n  });\n\n  const qualityUpdates = data\n    .filter((item) => item.type === \"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2783": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\")\n    .map((item) => item.data);\n\n  const latestQuality = qualityUpdates[qualityUpdates.length - 1] || null;\n\n  return {\n    latestQuality,\n    qualityHistory: qualityUpdates,\n    lastUpdate:\n      l...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2784": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\" ? lastMessage.data : null,\n    isConnected,\n    error,\n  };\n}\n\n// Helper hook for AI prediction updates\nexport function useAIPredictionUpdates() {\n  const { data, lastMessage, isConnected, error } =...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2785": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"prediction_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAnalyticsWebSocket.ts_2786": {
        "file": "hooks/useAnalyticsWebSocket.ts",
        "query": "\"prediction_update\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAutoSave.ts_2787": {
        "file": "hooks/useAutoSave.ts",
        "query": "\");\n  const enabledRef = useRef(enabled);\n\n  // Update enabled state\n  useEffect(() => {\n    enabledRef.current = enabled;\n  }, [enabled]);\n\n  // Memoize callbacks to prevent excessive re-renders\n  co...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAutoSave.ts_2788": {
        "file": "hooks/useAutoSave.ts",
        "query": "\",\n          );\n        }\n        return false;\n      }\n    },\n    [estimateId, isInitialized, onSaveSuccess, onSaveError],\n  );\n\n  return {\n    saveState,\n    saveNow,\n    markDirty,\n    enableAutoSa...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAutoSave.ts_2789": {
        "file": "hooks/useAutoSave.ts",
        "query": "\" ? updater(prevData) : updater;\n\n        // Mark as dirty and schedule save\n        autoSaveHook.markDirty();\n        setHasLocalChanges(true);\n\n        // Clear existing timeout to prevent memory le...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAutoSave.ts_2790": {
        "file": "hooks/useAutoSave.ts",
        "query": "\"data-update-debounced\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAutoSave.ts_2791": {
        "file": "hooks/useAutoSave.ts",
        "query": "\", error);\n      });\n  }, [autoSaveHook, data, currentStep]);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeo...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["auto"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useAutoScroll.ts_2792": {
        "file": "hooks/useAutoScroll.ts",
        "query": "\" : behavior;\n\n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior as ScrollBehavior,\n      });\n    },\n    [behavior, enabled],\n  );\n\n  // ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useFacadeImageCache.ts_2793": {
        "file": "hooks/useFacadeImageCache.ts",
        "query": "`,\n        {\n          method: \"POST\",\n          body: formData,\n        },\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to upload image\");\n      }\n      return response.json();\n...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useFacadeImageCache.ts_2794": {
        "file": "hooks/useFacadeImageCache.ts",
        "query": "\");\n      }\n      return response.json();\n    },\n    onSuccess: (newImage) => {\n      // Update cache with new image\n      queryClient.setQueryData<FacadeAnalysisImage[]>(\n        CACHE_KEYS.images(fa...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useFacadeImageCache.ts_2795": {
        "file": "hooks/useFacadeImageCache.ts",
        "query": "\"Failed to delete image\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useMobileDetection.ts_2796": {
        "file": "hooks/useMobileDetection.ts",
        "query": "\",\n  });\n\n  useEffect(() => {\n    const updateDetection = () => {\n      const screenWidth = window.innerWidth;\n      const screenHeight = window.innerHeight;\n      const userAgent = navigator.userAgen...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useMobileDetection.ts_2797": {
        "file": "hooks/useMobileDetection.ts",
        "query": "\";\n\n      setDetection({\n        isMobile,\n        isTablet,\n        isDesktop,\n        screenWidth,\n        screenHeight,\n        orientation,\n        touchDevice,\n        platform,\n        userAgent...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useMobileDetection.ts_2798": {
        "file": "hooks/useMobileDetection.ts",
        "query": "\", updateDetection);\n    window.addEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useMobileDetection.ts_2799": {
        "file": "hooks/useMobileDetection.ts",
        "query": "\", updateDetection);\n\n    return () => {\n      window.removeEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useMobileDetection.ts_2800": {
        "file": "hooks/useMobileDetection.ts",
        "query": "\", updateDetection);\n      window.removeEventListener(\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useMobileDetection.ts_2801": {
        "file": "hooks/useMobileDetection.ts",
        "query": "\", updateDetection);\n    };\n  }, []);\n\n  return detection;\n}\n\n// Additional mobile-specific utilities\nexport function useMobileViewport() {\n  const detection = useMobileDetection();\n\n  const setViewpo...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useNavigationState.ts_2802": {
        "file": "hooks/useNavigationState.ts",
        "query": "\");\n            return;\n          }\n\n          return;\n        }\n\n        // Update navigation history\n        if (preserveHistory && path !== pathname) {\n          setPreviousPath(pathname);\n        ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useNavigationState.ts_2803": {
        "file": "hooks/useNavigationState.ts",
        "query": "\");\n    }\n  }, [router, user]);\n\n  // Refresh current page\n  const refreshCurrentPage = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  // Update navigation history when pathname change...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "usePWAStatus.ts_2804": {
        "file": "hooks/usePWAStatus.ts",
        "query": "\";\n\ninterface UsePWAStatusOptions {\n  pollInterval?: number;\n  debounceDelay?: number;\n  enableCacheStats?: boolean;\n}\n\ninterface PWAStatusHookResult {\n  pwaStatus: PWAStatus;\n  offlineStatus: Offline...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["5000"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "usePWAStatus.ts_2805": {
        "file": "hooks/usePWAStatus.ts",
        "query": "\", error);\n    } finally {\n      if (isMountedRef.current) {\n        setIsSyncing(false);\n      }\n    }\n  }, [isSyncing, isOnline]);\n\n  // Clear cache\n  const clearCache = useCallback(async () => {\n  ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "usePWAStatus.ts_2806": {
        "file": "hooks/usePWAStatus.ts",
        "query": "\", error);\n    }\n  }, [updateCacheStats]);\n\n  // Clear pending actions\n  const clearPendingActions = useCallback(async () => {\n    try {\n      await offlineManager.clearPendingActions();\n    } catch (...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "usePWAStatus.ts_2807": {
        "file": "hooks/usePWAStatus.ts",
        "query": "\", error);\n    }\n  }, []);\n\n  // Subscribe to status changes\n  useEffect(() => {\n    isMountedRef.current = true;\n\n    // Subscribe to offline status changes\n    const unsubscribe = offlineManager.sub...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "usePWAStatus.ts_2808": {
        "file": "hooks/usePWAStatus.ts",
        "query": "\") {\n        unsubscribe();\n      }\n      if (pollIntervalRef.current) {\n        clearInterval(pollIntervalRef.current);\n      }\n    };\n  }, [pollInterval, updateCacheStats]);\n\n  return {\n    pwaStatu...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useRealTimePricing.ts_2809": {
        "file": "hooks/useRealTimePricing.ts",
        "query": "\";\n\nexport interface UseRealTimePricingOptions {\n  estimateId: string;\n  enabled?: boolean;\n  pricingConfig?: Partial<RealTimePricingConfig>;\n  validationConfig?: Partial<CrossStepValidationConfig>;\n ...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useRealTimePricing.ts_2810": {
        "file": "hooks/useRealTimePricing.ts",
        "query": "\";\n\n  // Actions\n  updatePricing: (\n    flowData: GuidedFlowData,\n    changedStep?: string,\n    immediate?: boolean,\n  ) => void;\n  recalculate: (flowData: GuidedFlowData) => Promise<void>;\n\n  // Serv...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useRealTimePricing.ts_2811": {
        "file": "hooks/useRealTimePricing.ts",
        "query": "\");\n          setPricingError(err);\n          setValidationError(err);\n          setIsPricingLoading(false);\n          setIsValidationLoading(false);\n          onError?.(err);\n        }\n      };\n\n    ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useRealTimePricing.ts_2812": {
        "file": "hooks/useRealTimePricing.ts",
        "query": "\");\n        setPricingError(err);\n        setValidationError(err);\n        onError?.(err);\n      } finally {\n        setIsPricingLoading(false);\n        setIsValidationLoading(false);\n      }\n    },\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useRealTimePricing.ts_2813": {
        "file": "hooks/useRealTimePricing.ts",
        "query": "\";\n  }, [pricingResult, validationResult]);\n\n  return {\n    // Pricing state\n    pricingResult,\n    isPricingLoading,\n    pricingError,\n\n    // Validation state\n    validationResult,\n    isValidationL...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useRealTimePricing.ts_2814": {
        "file": "hooks/useRealTimePricing.ts",
        "query": "\");\n\n  const realTimePricing = useRealTimePricing({\n    estimateId,\n    ...options,\n  });\n\n  // Auto-update when data or step changes (removed function dependency to prevent infinite loop)\n  useEffect...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useServiceCalculation.ts_2815": {
        "file": "hooks/useServiceCalculation.ts",
        "query": ".delete(key)",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useServiceCalculation.ts_2816": {
        "file": "hooks/useServiceCalculation.ts",
        "query": "`),\n            { metrics, calculatorId },\n          );\n        }\n      }\n    },\n    [calculatorId, performanceConfig.enableAnalytics],\n  );\n\n  // Cache management\n  const getCacheKey = useCallback((d...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useServiceCalculation.ts_2817": {
        "file": "hooks/useServiceCalculation.ts",
        "query": "\";\n\ninterface UseServiceCalculationOptions<T> {\n  form: UseFormReturn<T>;\n  Calculator: new () => { calculate: (data: T) => any };\n  schema: z.ZodSchema<T>;\n  calculatorId: string; // Required for con...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": ["config", "config"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2818": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\";\n\nexport interface UseSessionRecoveryOptions {\n  estimateId: string;\n  enabled?: boolean;\n  autoSaveInterval?: number; // milliseconds\n  recoveryOptions?: Partial<RecoveryOptions>;\n  onRecoveryAvail...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2819": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\");\n  const autoSaveIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const enabledRef = useRef(enabled);\n  const pendingSaveRef = useRef<Promise<boolean> | null>(null);\n\n  // Update enabled state\n...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2820": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\", error);\n          }\n        }\n      }, autoSaveInterval);\n    };\n\n    setupAutoSave();\n\n    return () => {\n      if (autoSaveIntervalRef.current) {\n        clearInterval(autoSaveIntervalRef.current...",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2821": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\",\n          );\n          return false;\n        } finally {\n          pendingSaveRef.current = null;\n        }\n      })();\n\n      pendingSaveRef.current = savePromise;\n      return savePromise;\n    },...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2822": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\",\n        );\n        return null;\n      } finally {\n        setIsRecovering(false);\n      }\n    },\n    [onRecoveryComplete, onRecoveryError],\n  );\n\n  // Delete draft function\n  const deleteDraft = us...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2823": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\"Delete draft failed:\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2824": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\"Delete failed\"",
        "operationType": "unknown",
        "complexity": 0,
        "estimatedLatency": 50,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2825": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\",\n        );\n      }\n    },\n    [recoverSession, onRecoveryError],\n  );\n\n  const declineRecovery = useCallback(() => {\n    setShowRecoveryPrompt(false);\n    // Optionally clean up declined drafts\n   ...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSessionRecovery.ts_2826": {
        "file": "hooks/useSessionRecovery.ts",
        "query": "\");\n\n  const recovery = useSessionRecovery({\n    estimateId,\n    ...options,\n    onRecoveryComplete: (draft) => {\n      setCurrentData(draft.data);\n      setCurrentStep(draft.currentStep);\n      optio...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2827": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\";\n\nexport interface UseSmartAutoSaveOptions {\n  estimateId: string;\n  enabled?: boolean;\n  config?: Partial<AutoSaveConfig>;\n  onSaveSuccess?: (wasAutoSave: boolean) => void;\n  onSaveError?: (error: ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2828": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\",\n            false,\n          );\n        }\n      }\n    };\n\n    initializeService();\n\n    // Cleanup\n    return () => {\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeoutRef.current...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2829": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\";\n        updateSaveState({\n          isSaving: false,\n          saveError: errorMessage,\n        });\n\n        if (onSaveErrorRef.current) {\n          onSaveErrorRef.current(errorMessage, true); // w...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2830": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\",\n    ): Promise<boolean> => {\n      if (!isInitialized || !enabledRef.current) {\n        return false;\n      }\n\n      // Clear any pending debounced save\n      if (saveTimeoutRef.current) {\n        ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2831": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\";\n        updateSaveState({\n          isSaving: false,\n          saveError: errorMessage,\n        });\n\n        if (onSaveErrorRef.current) {\n          onSaveErrorRef.current(errorMessage, false); // ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2832": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\";\n        updateSaveState({ saveError: errorMessage });\n\n        if (onSaveErrorRef.current) {\n          onSaveErrorRef.current(errorMessage, false); // wasAutoSave = false\n        }\n        return f...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": ["service"],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useSmartAutoSave.ts_2833": {
        "file": "hooks/useSmartAutoSave.ts",
        "query": "\" ? updater(prevData) : updater;\n\n        // Only trigger auto-save if this is the latest change\n        if (changeId === changeCounterRef.current) {\n          setHasLocalChanges(true);\n          smar...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2834": {
        "file": "hooks/useWebhooks.ts",
        "query": "`${result.updated} webhooks updated successfully`",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2835": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n        });\n      }\n\n      return result;\n    },\n    [],\n  );\n\n  // Update webhook\n  const updateWebhook = useCallback(\n    async (id: string, updates: Partial<WebhookConfig>) => {\n      const resu...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2836": {
        "file": "hooks/useWebhooks.ts",
        "query": "\"Webhook updated successfully\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2837": {
        "file": "hooks/useWebhooks.ts",
        "query": "\"Failed to update webhook\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2838": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n        });\n      }\n\n      return result;\n    },\n    [],\n  );\n\n  // Delete webhook\n  const deleteWebhook = useCallback(async (id: string) => {\n    const confirmed = window.confirm(\n      \"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2839": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n    );\n\n    if (!confirmed) return { success: false };\n\n    const result = await webhookService.deleteWebhook(id);\n\n    if (result.success) {\n      setWebhooks((prev) => prev.filter((w) => w.id !==...",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2840": {
        "file": "hooks/useWebhooks.ts",
        "query": "\"Webhook deleted successfully\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2841": {
        "file": "hooks/useWebhooks.ts",
        "query": "\"Failed to delete webhook\"",
        "operationType": "delete",
        "complexity": 4,
        "estimatedLatency": 75,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2842": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n      });\n    }\n\n    return result;\n  }, []);\n\n  // Toggle webhook active state\n  const toggleWebhook = useCallback(\n    async (id: string) => {\n      const webhook = webhooks.find((w) => w.id === ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2843": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n      });\n    }\n\n    return result;\n  }, []);\n\n  // Bulk update webhooks\n  const bulkUpdateWebhooks = useCallback(\n    async (webhookIds: string[], updates: Partial<WebhookConfig>) => {\n      const...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2844": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n          description: `${result.updated} webhooks updated successfully`,\n        });\n      } else {\n        toast({\n          title: \"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2845": {
        "file": "hooks/useWebhooks.ts",
        "query": "\"Failed to update webhooks\"",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2846": {
        "file": "hooks/useWebhooks.ts",
        "query": "\",\n        });\n      }\n\n      return result;\n    },\n    [loadWebhooks],\n  );\n\n  // Auto-load on mount and when dependencies change\n  useEffect(() => {\n    if (autoLoad) {\n      loadWebhooks();\n    }\n ...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      },
      "useWebhooks.ts_2847": {
        "file": "hooks/useWebhooks.ts",
        "query": "\";\n      setError(message);\n    } finally {\n      setLoading(false);\n    }\n  }, [webhookId, page, limit, filters]);\n\n  // Retry failed deliveries\n  const retryFailedDeliveries = useCallback(\n    async...",
        "operationType": "update",
        "complexity": 3,
        "estimatedLatency": 80,
        "tables": [],
        "hasJoins": false,
        "hasSubqueries": false,
        "hasAggregates": false,
        "optimizationPotential": 0
      }
    },
    "complexityDistribution": {
      "simple": 2469,
      "medium": 343,
      "complex": 35
    }
  },
  "nPlusOneRisks": {
    "count": 4,
    "risks": [
      {
        "file": "lib/services/photo-service.ts",
        "line": 456,
        "pattern": "fore/after photos\n   */\n  async compareBeforeAfter(\n    beforePhotoId: string,\n    afterPhotoId: str...",
        "type": "sequential-await-in-loop",
        "severity": "medium",
        "recommendation": "Consider using Promise.all() for parallel execution",
        "estimatedImpact": "Unnecessarily slow sequential processing"
      },
      {
        "file": "lib/services/session-recovery-service.ts",
        "line": 153,
        "pattern": "for current user\n  static async getRecoverableSessions(): Promise<SessionDraft[]> {\n    const supaba...",
        "type": "sequential-await-in-loop",
        "severity": "medium",
        "recommendation": "Consider using Promise.all() for parallel execution",
        "estimatedImpact": "Unnecessarily slow sequential processing"
      },
      {
        "file": "components/error/ErrorBoundary.tsx",
        "line": 392,
        "pattern": "for (const action of actions) {\n          try {\n            await action.execute();\n            // S...",
        "type": "sequential-await-in-loop",
        "severity": "medium",
        "recommendation": "Consider using Promise.all() for parallel execution",
        "estimatedImpact": "Unnecessarily slow sequential processing"
      },
      {
        "file": "components/pwa/install-prompt.tsx",
        "line": 94,
        "pattern": "foreinstallprompt\",\n        handleBeforeInstallPrompt,\n      );\n      window.removeEventListener(\"ap...",
        "type": "sequential-await-in-loop",
        "severity": "medium",
        "recommendation": "Consider using Promise.all() for parallel execution",
        "estimatedImpact": "Unnecessarily slow sequential processing"
      }
    ]
  },
  "connectionPooling": {
    "admin.ts": {
      "file": "lib/supabase/admin.ts",
      "connectionCount": 4,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "circuit-breaker.ts": {
      "file": "lib/supabase/circuit-breaker.ts",
      "connectionCount": 4,
      "hasPooling": false,
      "poolConfiguration": null,
      "recommendations": []
    },
    "client-factory.ts": {
      "file": "lib/supabase/client-factory.ts",
      "connectionCount": 10,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "client.ts": {
      "file": "lib/supabase/client.ts",
      "connectionCount": 22,
      "hasPooling": false,
      "poolConfiguration": null,
      "recommendations": [
        {
          "type": "add-connection-pooling",
          "priority": "high",
          "description": "High connection count without pooling detected",
          "implementation": "Implement connection pooling to manage database connections efficiently"
        },
        {
          "type": "optimize-connection-creation",
          "priority": "medium",
          "description": "Multiple client creations without pooling",
          "implementation": "Use singleton pattern or connection pooling for database clients"
        }
      ]
    },
    "connection-pool.ts": {
      "file": "lib/supabase/connection-pool.ts",
      "connectionCount": 17,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "dynamic-connection-pool.ts": {
      "file": "lib/supabase/dynamic-connection-pool.ts",
      "connectionCount": 8,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "query-optimizer.ts": {
      "file": "lib/supabase/query-optimizer.ts",
      "connectionCount": 1,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "schema-validator.ts": {
      "file": "lib/supabase/schema-validator.ts",
      "connectionCount": 1,
      "hasPooling": false,
      "poolConfiguration": null,
      "recommendations": []
    },
    "server-pooled.ts": {
      "file": "lib/supabase/server-pooled.ts",
      "connectionCount": 9,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "server.ts": {
      "file": "lib/supabase/server.ts",
      "connectionCount": 15,
      "hasPooling": false,
      "poolConfiguration": null,
      "recommendations": [
        {
          "type": "add-connection-pooling",
          "priority": "high",
          "description": "High connection count without pooling detected",
          "implementation": "Implement connection pooling to manage database connections efficiently"
        },
        {
          "type": "optimize-connection-creation",
          "priority": "medium",
          "description": "Multiple client creations without pooling",
          "implementation": "Use singleton pattern or connection pooling for database clients"
        }
      ]
    },
    "supabase-config.ts": {
      "file": "lib/supabase/supabase-config.ts",
      "connectionCount": 7,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "supabase-errors.ts": {
      "file": "lib/supabase/supabase-errors.ts",
      "connectionCount": 4,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "supabase-factory.ts": {
      "file": "lib/supabase/supabase-factory.ts",
      "connectionCount": 10,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "supabase-types.ts": {
      "file": "lib/supabase/supabase-types.ts",
      "connectionCount": 3,
      "hasPooling": true,
      "poolConfiguration": null,
      "recommendations": []
    },
    "universal-client.ts": {
      "file": "lib/supabase/universal-client.ts",
      "connectionCount": 16,
      "hasPooling": false,
      "poolConfiguration": null,
      "recommendations": [
        {
          "type": "add-connection-pooling",
          "priority": "high",
          "description": "High connection count without pooling detected",
          "implementation": "Implement connection pooling to manage database connections efficiently"
        },
        {
          "type": "optimize-connection-creation",
          "priority": "medium",
          "description": "Multiple client creations without pooling",
          "implementation": "Use singleton pattern or connection pooling for database clients"
        }
      ]
    }
  },
  "transactionAnalysis": {
    "analytics-service-unified.ts_1263": {
      "file": "lib/services/analytics-service-unified.ts",
      "line": 1263,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "auto-save-persistence-engine.ts_284": {
      "file": "lib/services/auto-save/auto-save-persistence-engine.ts",
      "line": 284,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "auto-save-service.ts_519": {
      "file": "lib/services/auto-save-service.ts",
      "line": 519,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "estimate-service-unified.ts_402": {
      "file": "lib/services/estimate-service-unified.ts",
      "line": 402,
      "type": "explicit",
      "pattern": "Rollback ",
      "complexity": 1
    },
    "external-bi-integration-service.ts_815": {
      "file": "lib/services/external-bi-integration-service.ts",
      "line": 815,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "photo-service.ts_247": {
      "file": "lib/services/photo-service.ts",
      "line": 247,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "session-recovery-service.ts_444": {
      "file": "lib/services/session-recovery-service.ts",
      "line": 444,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "workflow-progress-tracker.ts_114": {
      "file": "lib/services/workflow/workflow-progress-tracker.ts",
      "line": 114,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    },
    "workflow-service.ts_917": {
      "file": "lib/services/workflow-service.ts",
      "line": 917,
      "type": "bulk",
      "pattern": ".upsert(",
      "complexity": 2
    }
  },
  "indexingRecommendations": [],
  "optimizationPlan": {
    "phase1": {
      "name": "Immediate Fixes (Week 1)",
      "priority": "critical",
      "tasks": [
        "Address all identified N+1 query patterns",
        "Implement missing database indexes for high-frequency queries",
        "Add connection pooling where needed"
      ],
      "estimatedImpact": "50-80% query performance improvement"
    },
    "phase2": {
      "name": "Query Optimization (Week 2-3)",
      "priority": "high",
      "tasks": [
        "Optimize complex queries (complexity > 7)",
        "Add query result caching for frequently accessed data",
        "Implement bulk operations for multiple record processing"
      ],
      "estimatedImpact": "30-50% overall database performance improvement"
    },
    "phase3": {
      "name": "Architecture Improvements (Week 4-6)",
      "priority": "medium",
      "tasks": [
        "Implement read replicas for read-heavy operations",
        "Add database monitoring and alerting",
        "Optimize transaction boundaries and reduce lock contention"
      ],
      "estimatedImpact": "20-30% system scalability improvement"
    }
  },
  "performanceMetrics": {
    "schema": {
      "tableCount": 31,
      "relationshipCount": 11,
      "indexCount": 77,
      "constraintCount": 0
    }
  }
}
