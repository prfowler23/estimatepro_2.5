{
  "React Component with Props Interface": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:// Add props here}",
      "}",
      "",
      "export default function ${1:ComponentName}({ ${3:props} }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div>",
      "      ${4:// Component content}",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "Create a React functional component with TypeScript props interface",
  },
  "Service Layer Function": {
    "prefix": "service",
    "body": [
      "import { createClient } from '@/lib/supabase/universal-client';",
      "import { z } from 'zod';",
      "",
      "const ${1:FunctionName}Schema = z.object({",
      "  ${2:// Add validation schema}",
      "});",
      "",
      "export async function ${3:functionName}(data: z.infer<typeof ${1:FunctionName}Schema>) {",
      "  const validatedData = ${1:FunctionName}Schema.parse(data);",
      "  const supabase = createClient();",
      "",
      "  try {",
      "    ${4:// Service logic here}",
      "    ",
      "    return { success: true, data: result };",
      "  } catch (error) {",
      "    console.error('${3:functionName} error:', error);",
      "    throw error;",
      "  }",
      "}",
    ],
    "description": "Create a service layer function with validation and error handling",
  },
  "API Route Handler": {
    "prefix": "api",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "import { z } from 'zod';",
      "",
      "const ${1:RequestSchema} = z.object({",
      "  ${2:// Add request validation}",
      "});",
      "",
      "export async function ${3:GET}(request: NextRequest) {",
      "  try {",
      "    ${4:// API logic here}",
      "",
      "    return NextResponse.json({ success: true, data: result });",
      "  } catch (error) {",
      "    console.error('${3:GET} error:', error);",
      "    return NextResponse.json(",
      "      { error: 'Internal server error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
    ],
    "description": "Create an API route handler with validation and error handling",
  },
  "Jest Test Suite": {
    "prefix": "test",
    "body": [
      "import { ${1:functionName} } from '@/lib/services/${2:service-name}';",
      "",
      "describe('${3:TestSuiteName}', () => {",
      "  beforeEach(() => {",
      "    jest.clearAllMocks();",
      "  });",
      "",
      "  test('should ${4:test description}', async () => {",
      "    // Arrange",
      "    const mockData = {",
      "      ${5:// Test data}",
      "    };",
      "",
      "    // Act",
      "    const result = await ${1:functionName}(mockData);",
      "",
      "    // Assert",
      "    expect(result).toBeDefined();",
      "    expect(result.success).toBe(true);",
      "  });",
      "});",
    ],
    "description": "Create a Jest test suite with arrange-act-assert pattern",
  },
  "Zod Schema": {
    "prefix": "zod",
    "body": [
      "import { z } from 'zod';",
      "",
      "export const ${1:SchemaName}Schema = z.object({",
      "  ${2:id: z.string().uuid(),}",
      "  ${3:name: z.string().min(1, 'Name is required'),}",
      "  ${4:email: z.string().email('Invalid email address'),}",
      "  ${5:// Add more fields}",
      "});",
      "",
      "export type ${1:SchemaName} = z.infer<typeof ${1:SchemaName}Schema>;",
    ],
    "description": "Create a Zod schema with TypeScript type inference",
  },
  "Custom Hook": {
    "prefix": "hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "interface Use${1:HookName}Options {",
      "  ${2:// Hook options}",
      "}",
      "",
      "export function use${1:HookName}(${3:options}: Use${1:HookName}Options) {",
      "  const [${4:state}, set${4:State}] = useState${5:<type>}(${6:initialValue});",
      "  const [loading, setLoading] = useState(false);",
      "  const [error, setError] = useState<Error | null>(null);",
      "",
      "  useEffect(() => {",
      "    ${7:// Effect logic}",
      "  }, [${8:dependencies}]);",
      "",
      "  return {",
      "    ${4:state},",
      "    set${4:State},",
      "    loading,",
      "    error,",
      "    ${9:// Return other values/functions}",
      "  };",
      "}",
    ],
    "description": "Create a custom React hook with loading and error states",
  },
  "Error Boundary": {
    "prefix": "errorBoundary",
    "body": [
      "import React from 'react';",
      "import { ErrorBoundary as ReactErrorBoundary } from 'react-error-boundary';",
      "",
      "interface ${1:ComponentName}ErrorBoundaryProps {",
      "  children: React.ReactNode;",
      "  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>;",
      "}",
      "",
      "function ErrorFallback({ error, resetError }: { error: Error; resetError: () => void }) {",
      "  return (",
      "    <div className=\"p-4 border border-red-200 rounded-lg bg-red-50\">",
      "      <h3 className=\"text-red-800 font-semibold\">Something went wrong</h3>",
      "      <p className=\"text-red-600 text-sm mt-1\">{error.message}</p>",
      "      <button",
      "        onClick={resetError}",
      "        className=\"mt-2 px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700\"",
      "      >",
      "        Try again",
      "      </button>",
      "    </div>",
      "  );",
      "}",
      "",
      "export function ${1:ComponentName}ErrorBoundary({",
      "  children,",
      "  fallback = ErrorFallback,",
      "}: ${1:ComponentName}ErrorBoundaryProps) {",
      "  return (",
      "    <ReactErrorBoundary FallbackComponent={fallback}>",
      "      {children}",
      "    </ReactErrorBoundary>",
      "  );",
      "}",
    ],
    "description": "Create an error boundary component with fallback UI",
  },
}
