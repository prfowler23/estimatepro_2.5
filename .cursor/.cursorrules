# EstimatePro - AI-Powered Building Services Estimation Platform
# Comprehensive Cursor AI Rules and Guidelines

## PROJECT OVERVIEW
EstimatePro is a comprehensive Next.js 15 application designed for building services contractors with:
- 11 specialized service calculators (Window Cleaning, Pressure Washing, Soft Washing, Biofilm Removal, Glass Restoration, Frame Restoration, High Dusting, Final Clean, Granite Reconditioning, Pressure Wash & Seal, Parking Deck, AI Facade Analysis)
- 15 specialized AI endpoints for comprehensive analysis (photo/facade analysis, document extraction, auto-quotes, risk assessment, conversations, analytics, contact extraction, follow-up automation, competitive intelligence)
- Guided estimation workflow with real-time pricing and session recovery
- 3D visualization and drone integration for building modeling and aerial inspection
- Progressive Web App capabilities with offline functionality and background sync
- Performance optimization achieving 70-90% improvement through multi-layer caching
- Enterprise-grade features with transaction support, advanced error monitoring, and intelligent error recovery

## TECHNOLOGY STACK
- Frontend: Next.js 15 (App Router), TypeScript, Tailwind CSS, Framer Motion
- Backend: Next.js API Routes, Supabase (PostgreSQL with RLS)
- AI: OpenAI GPT-4 Vision, comprehensive AI ecosystem with 15 endpoints
- State: Zustand stores, React Query (@tanstack/react-query), React Context
- Forms: React Hook Form + Zod validation
- UI: shadcn/ui components (Radix UI), Lucide icons, industrial design system
- Database: Supabase with Row Level Security, transaction support, ACID compliance
- Processing: jsPDF, React PDF, XLSX, html2canvas, Sentry (error tracking)
- PWA: Service Workers, Background Sync, Push Notifications
- Email: Resend API
- Testing: Jest, React Testing Library
- Deployment: Vercel, Supabase hosting

## CODE STYLE & CONVENTIONS

### TypeScript Standards
- Use strict TypeScript configuration
- Define explicit types for all props, state, and API responses
- Use interface for object shapes, type for unions/primitives
- Prefer type-only imports: `import type { User } from '@/types'`
- Use satisfies operator for complex type assertions
- Never use `any` - use `unknown` if type is uncertain

### React Patterns
- Use functional components with hooks exclusively
- Prefer custom hooks for reusable logic
- Use forwardRef for components that need ref forwarding
- Implement proper error boundaries
- Use Suspense for data loading states
- Prefer composition over inheritance

### Component Structure
```typescript
'use client' // Only if needed for client components

import { useState, useEffect } from 'react'
import type { ComponentProps } from '@/types'
import { cn } from '@/lib/utils'

interface ComponentNameProps {
  // Required props first
  title: string
  onSubmit: (data: FormData) => void
  // Optional props with defaults
  variant?: 'primary' | 'secondary'
  className?: string
  children?: React.ReactNode
}

export function ComponentName({ 
  title, 
  onSubmit,
  variant = 'primary',
  className,
  children 
}: ComponentNameProps) {
  // Hooks first
  const [state, setState] = useState<StateType>()
  
  // Event handlers
  const handleSubmit = () => {
    // Implementation
  }
  
  // Early returns
  if (!title) return null
  
  // Main render
  return (
    <div className={cn('base-classes', className)}>
      {/* Component content */}
    </div>
  )
}
```

### Naming Conventions
- Components: PascalCase (e.g., `ServiceCalculator`)
- Files: kebab-case (e.g., `service-calculator.tsx`)
- Functions: camelCase (e.g., `calculatePrice`)
- Constants: SCREAMING_SNAKE_CASE (e.g., `SERVICE_TYPES`)
- Types/Interfaces: PascalCase (e.g., `CalculationResult`)
- Folders: kebab-case (e.g., `quote-management`)

### File Organization
```
app/                          # Next.js App Router pages
├── api/                      # API routes
│   ├── ai/                   # 9 specialized AI endpoints
│   │   ├── auto-quote/       # Automated quote generation
│   │   ├── competitive-intelligence/ # Market analysis
│   │   ├── enhanced-photo-analysis/ # Advanced photo processing
│   │   ├── extract-contact-info/ # Contact extraction
│   │   ├── extract-documents/ # Document processing
│   │   ├── follow-up-automation/ # Automated follow-ups
│   │   └── risk-assessment/  # Automated risk analysis
│   ├── analytics/            # Analytics API
│   ├── customers/            # Customer management
│   ├── estimation-flows/     # Guided flow API
│   └── quotes/               # Quote operations
├── auth/                     # Authentication pages
├── calculator/               # Service calculator page
├── dashboard/                # Main dashboard
├── estimates/                # Estimate management (NEW)
│   ├── [id]/                 # Individual estimate pages
│   └── new/guided/           # Guided estimation flow
└── settings/                 # Application settings

components/                   # React components
├── ai/                       # AI-related components
├── calculator/               # Service calculators with lazy loading
├── canvas/                   # Drawing and measurement tools
├── duration/                 # Timeline and scheduling
├── error-handling/           # Error boundaries and handling
├── estimation/               # Guided estimation flow
├── expenses/                 # Cost breakdown components
├── pricing/                  # Pricing strategy tools
├── takeoff/                  # Measurement and takeoff
└── ui/                       # Reusable UI components with lazy loading

lib/                          # Core utilities and services
├── ai/                       # AI service integrations (ENHANCED)
│   ├── ai-cache.ts           # AI response caching
│   ├── ai-config.ts          # AI configuration management
│   ├── ai-security.ts        # AI security and validation
│   └── optimized-prompts.ts  # Performance-optimized prompts
├── calculations/             # Service calculation engines
├── config/                   # Application configuration
├── schemas/                  # API validation schemas
├── services/                 # Business logic layer
│   ├── ai-service.ts         # AI business logic
│   ├── calculator-service.ts # Calculator business logic
│   ├── estimate-service.ts   # Estimate business logic
│   └── workflow-service.ts   # Workflow management
├── stores/                   # Zustand state management
├── supabase/                 # Database client/server
├── types/                    # TypeScript type definitions
├── utils/                    # Utility functions (ENHANCED)
│   ├── cache.ts              # Caching utilities
│   ├── database-optimization.ts # DB performance
│   ├── null-safety.ts        # Type-safe null handling
│   └── retry-logic.ts        # Retry mechanisms
└── validation/               # Validation utilities

types/                        # Global type definitions
├── calculations.ts           # Calculation types
├── database.ts              # Database types
├── supabase.ts              # Supabase types
└── index.ts                 # Shared types
```

## CALCULATION ENGINE GUIDELINES

### Service Calculator Pattern
- Each service has its own calculator class extending BaseCalculator
- Use dependency injection for rates and configurations
- Implement validation at input and output levels
- Return consistent CalculationResult interface
- Handle edge cases and minimum charges

### Calculator Structure
```typescript
import { BaseCalculator } from './base-calculator'
import type { CalculationInput, CalculationResult } from '@/types'

export class ServiceCalculator extends BaseCalculator {
  calculate(input: CalculationInput): CalculationResult {
    // Validate input
    const validatedInput = this.validateInput(input)
    
    // Calculate components
    const laborHours = this.calculateLaborHours(validatedInput)
    const materialCost = this.calculateMaterialCost(validatedInput)
    const equipmentCost = this.calculateEquipmentCost(validatedInput)
    
    // Apply multipliers
    const result = this.applyMultipliers({
      laborHours,
      materialCost,
      equipmentCost
    })
    
    // Validate and return
    return this.validateResult(result)
  }
}
```

### Rate Management
- Use constants from `lib/calculations/constants.ts`
- Implement location-based rate selection
- Apply multipliers in consistent order
- Document rate sources and update procedures

## DATABASE PATTERNS

### Supabase Integration
- Use server components for data fetching when possible
- Implement proper RLS (Row Level Security) policies
- Use type-safe database queries with TypeScript
- Handle authentication state properly

### Database Queries
```typescript
// Server component
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'

export default async function QuotesPage() {
  const supabase = createServerComponentClient({ cookies })
  
  const { data: quotes, error } = await supabase
    .from('quotes')
    .select('*')
    .order('created_at', { ascending: false })
    
  if (error) {
    throw new Error('Failed to fetch quotes')
  }
  
  return <QuotesList quotes={quotes} />
}
```

### Type Safety
- Generate types from Supabase schema
- Use Database generic types for queries
- Implement proper error handling
- Use transactions for complex operations

## UI/UX GUIDELINES

### Design System
- Use shadcn/ui components as base
- Implement consistent spacing with Tailwind
- Follow accessibility best practices
- Use semantic HTML elements
- Implement proper focus management

### Form Patterns
```typescript
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const formSchema = z.object({
  customerName: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  buildingHeight: z.number().min(1).max(60)
})

type FormData = z.infer<typeof formSchema>

export function QuoteForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      customerName: '',
      email: '',
      buildingHeight: 1
    }
  })
  
  const onSubmit = (data: FormData) => {
    // Handle form submission
  }
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        {/* Form fields */}
      </form>
    </Form>
  )
}
```

### State Management
- Use Zustand for global state
- Use React Query for server state
- Keep component state local when possible
- Use context sparingly for theme/auth

## AI INTEGRATION GUIDELINES

### Comprehensive AI Ecosystem
The platform features 15 specialized AI endpoints for intelligent automation:

1. **Enhanced Photo Analysis** (`/api/ai/enhanced-photo-analysis`): Advanced building analysis with GPT-4 Vision
2. **Facade Analysis** (`/api/ai/facade-analysis`): Specialized facade condition assessment
3. **Document Extraction** (`/api/ai/extract-documents`): Extracts scope details from RFPs, emails, and documents
4. **Contact Information Extraction** (`/api/ai/extract-contact-info`): Automated contact data parsing
5. **Auto Quote Generation** (`/api/ai/auto-quote`): Fully automated estimate creation from minimal input
6. **Auto Estimate Generation** (`/api/ai/auto-estimate`): Automated estimate generation
7. **Competitive Intelligence** (`/api/ai/competitive-intelligence`): Market analysis and competitive positioning
8. **Risk Assessment** (`/api/ai/risk-assessment`): Automated project risk evaluation
9. **Follow-up Automation** (`/api/ai/follow-up-automation`): Intelligent client communication management
10. **AI Assistant** (`/api/ai/assistant`): General-purpose AI assistance with chat interface
11. **Conversations** (`/api/ai/conversations`): AI conversation management and history
12. **Analytics** (`/api/ai/analytics`): AI-powered analytics and insights
13. **Metrics** (`/api/ai/metrics`): AI usage metrics and tracking
14. **Usage Tracking** (`/api/ai/usage`): AI usage monitoring and optimization
15. **Analyze Facade** (`/api/ai/analyze-facade`): Facade analysis endpoint

### AI Configuration & Performance
- **AI Configuration Management**: Centralized AI settings with `ai-config.ts`
- **Response Caching**: Intelligent caching system via `ai-cache.ts` to reduce API costs
- **Rate Limiting**: Built-in rate limiting and quota management
- **Error Handling**: Comprehensive error recovery with `ai-error-handler.ts`
- **Security**: Input validation and sanitization through `ai-security.ts`
- **Optimized Prompts**: Performance-tuned prompts for faster, more accurate responses

### AI Service Pattern
```typescript
import { openai } from '@/lib/ai/openai'
import { aiCache } from '@/lib/ai/ai-cache'
import { validateAIInput, sanitizeAIResponse } from '@/lib/ai/ai-security'
import { z } from 'zod'

const analysisSchema = z.object({
  buildingType: z.string(),
  windowCount: z.number(),
  facadeComplexity: z.enum(['simple', 'standard', 'complex', 'ornate']),
  recommendedServices: z.array(z.string()),
  riskFactors: z.array(z.string()),
  estimatedTimeline: z.string()
})

export async function analyzeBuilding(imageUrl: string, additionalContext?: string) {
  // Validate and sanitize input
  const validatedInput = validateAIInput({ imageUrl, additionalContext })
  
  // Check cache first
  const cacheKey = `building-analysis-${validatedInput.imageUrl}`
  const cachedResult = await aiCache.get(cacheKey)
  if (cachedResult) return cachedResult
  
  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4-vision-preview',
      messages: [
        {
          role: 'system',
          content: 'You are a building analysis expert specializing in facade assessment...'
        },
        {
          role: 'user',
          content: [
            { type: 'text', text: `Analyze this building facade. ${additionalContext || ''}` },
            { type: 'image_url', image_url: { url: validatedInput.imageUrl } }
          ]
        }
      ],
      tools: [
        {
          type: 'function',
          function: {
            name: 'analyze_building',
            description: 'Analyze building facade and provide structured assessment',
            parameters: analysisSchema
          }
        }
      ]
    })
    
    const result = analysisSchema.parse(
      JSON.parse(response.choices[0].message.tool_calls?.[0].function.arguments || '{}')
    )
    
    // Sanitize response and cache
    const sanitizedResult = sanitizeAIResponse(result)
    await aiCache.set(cacheKey, sanitizedResult, { ttl: 3600 })
    
    return sanitizedResult
  } catch (error) {
    // Comprehensive error handling with fallback
    console.error('AI Analysis Error:', error)
    throw new Error('Failed to analyze building. Please try again.')
  }
}
```

## TESTING STANDARDS

### Unit Testing
- Test calculation logic thoroughly
- Mock external dependencies
- Use data-driven tests for rate calculations
- Test edge cases and error conditions

### Integration Testing
- Test API endpoints with real database
- Test authentication flows
- Test form submissions and validation
- Test AI integrations with mock responses

### E2E Testing
- Test complete user workflows
- Test calculator accuracy
- Test quote generation process
- Test multi-tenant features

## PERFORMANCE GUIDELINES

### Optimization Strategies
- Use Next.js Image optimization
- Implement proper caching strategies
- Use React.memo for expensive components
- Optimize database queries with proper indexes
- Use streaming for large datasets

### Loading States
- Implement skeleton loading for better UX
- Use Suspense boundaries appropriately
- Show progress indicators for long operations
- Implement optimistic updates where appropriate

## SECURITY CONSIDERATIONS

### Authentication & Authorization
- Implement proper session management
- Use RLS for database security
- Validate all user inputs
- Implement rate limiting on API endpoints

### Data Protection
- Encrypt sensitive data at rest
- Use HTTPS for all communications
- Implement proper CORS policies
- Sanitize user inputs and outputs

## ERROR HANDLING

### Error Boundaries
```typescript
import { ErrorBoundary } from 'react-error-boundary'

function ErrorFallback({ error, resetErrorBoundary }) {
  return (
    <div role="alert" className="error-container">
      <h2>Something went wrong:</h2>
      <pre>{error.message}</pre>
      <button onClick={resetErrorBoundary}>Try again</button>
    </div>
  )
}

export function App() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <MainApp />
    </ErrorBoundary>
  )
}
```

### API Error Handling
- Return consistent error responses
- Log errors for debugging
- Provide user-friendly error messages
- Implement retry logic for transient errors

## DEPLOYMENT & MONITORING

### Environment Configuration
- Use environment variables for configuration
- Implement proper secrets management
- Use different configs for different environments
- Document all required environment variables

### Monitoring
- Implement proper logging
- Monitor API performance
- Track user interactions
- Monitor calculation accuracy

## CONTRIBUTION GUIDELINES

### Code Review
- All code must be reviewed before merging
- Run linting and tests before committing
- Write descriptive commit messages
- Keep PRs focused and small

### Documentation
- Document all public APIs
- Keep README files updated
- Document calculation formulas
- Maintain changelog for releases

## SPECIFIC RULES FOR CURSOR AI

### CRITICAL ENFORCEMENT RULES

1. **NEVER CREATE NEW FILES** unless explicitly required and justified
   - Always prefer editing existing files over creating new ones
   - If creating a new file is absolutely necessary, explain why in comments
   - Check if similar functionality already exists in the codebase first

2. **STRICT TYPESCRIPT ONLY**: Never write JavaScript files (.js/.jsx)
   - All files must be .ts/.tsx
   - Use strict type checking, never use `any`
   - Define explicit interfaces for all props and data structures

3. **MANDATORY IMPORT ORGANIZATION**:
   ```typescript
   // 1. React imports first
   import { useState, useEffect } from 'react'
   import type { ComponentProps } from 'react'
   
   // 2. Third-party imports (alphabetical)
   import { z } from 'zod'
   import { useForm } from 'react-hook-form'
   
   // 3. Internal imports (alphabetical, grouped by type)
   import { Button } from '@/components/ui/button'
   import { useCalculator } from '@/hooks/use-calculator'
   import { calculatorService } from '@/lib/services/calculator-service'
   import type { CalculationResult } from '@/types/calculations'
   ```

4. **COMPONENT ARCHITECTURE ENFORCEMENT**:
   - UI components in `/components` NEVER contain business logic
   - Business logic MUST be in `/lib/services` layer
   - Database operations MUST go through service layer
   - Use named exports only, never default exports

5. **API ROUTE STANDARDIZATION** - ALL API routes must follow this pattern:
   ```typescript
   import { NextRequest, NextResponse } from 'next/server'
   import { z } from 'zod'
   import { serviceLayer } from '@/lib/services/...'
   import { handleApiError } from '@/lib/utils/error-handling'
   
   const requestSchema = z.object({...})
   
   export async function POST(request: NextRequest) {
     try {
       const body = await request.json()
       const validatedData = requestSchema.parse(body)
       
       const result = await serviceLayer.operation(validatedData)
       
       return NextResponse.json({ success: true, data: result })
     } catch (error) {
       return handleApiError(error)
     }
   }
   ```

6. **DATABASE OPERATION RULES**:
   - NEVER write raw Supabase queries in components
   - ALL database operations MUST use service layer with transactions
   - ALWAYS validate RLS policies are applied
   - Use `database-transactions.ts` for complex operations

7. **AI INTEGRATION ENFORCEMENT**:
   - NEVER call OpenAI directly from components
   - ALWAYS use AI services in `/lib/ai/` with caching
   - MUST validate inputs with `ai-security.ts`
   - REQUIRED: Check AI cache before making API calls

8. **CALCULATION RULES ENFORCEMENT**:
   - ALL calculations MUST extend BaseCalculator
   - MUST validate inputs with Zod schemas
   - REQUIRED: Apply minimum charges and proper rounding
   - Use constants from `/lib/calculations/constants.ts`

9. **STATE MANAGEMENT HIERARCHY** (use in this order):
   - Local component state for UI-only state
   - Custom hooks for reusable component logic
   - Zustand stores for global application state
   - React Query for server state and caching
   - Service layer for business logic state

10. **SECURITY ENFORCEMENT**:
    - NEVER expose API keys in client code
    - ALWAYS validate user inputs with Zod
    - MUST use RLS for all database operations
    - Required: Sanitize all AI inputs/outputs

11. **PERFORMANCE REQUIREMENTS**:
    - MUST use lazy loading for calculator forms
    - REQUIRED: Implement React.memo for expensive components
    - MUST use AI caching to reduce costs
    - Required: Use database optimization utilities

12. **ERROR HANDLING REQUIREMENTS**:
    - EVERY component MUST have error boundaries
    - ALL API routes MUST have comprehensive error handling
    - REQUIRED: Use service layer error handling patterns
    - MUST provide user-friendly error messages

13. **TESTING REQUIREMENTS**:
    - ALL calculation logic MUST have unit tests
    - ALL AI integrations MUST have integration tests
    - NEW features MUST include test coverage
    - Use existing test patterns in `__tests__/`

14. **CODE REVIEW ENFORCEMENT**:
    - MUST run `npm run typecheck` before any changes
    - REQUIRED: Pass `npm run lint` with zero warnings
    - MUST format with `npm run fmt`
    - Required: Follow existing code patterns exactly

## CALCULATION-SPECIFIC RULES

The platform includes 11 specialized calculators for different building services:
1. Window Cleaning, 2. Pressure Washing, 3. Soft Washing, 4. Biofilm Removal, 5. Glass Restoration, 6. Frame Restoration, 7. High Dusting, 8. Final Clean, 9. Granite Reconditioning, 10. Pressure Wash & Seal, 11. Parking Deck, 12. AI Facade Analysis

### Calculator Implementation Rules:
1. **Rate sources**: Always reference where rates come from in constants
2. **Validation**: Validate all inputs before calculations using Zod schemas
3. **Minimums**: Always check and apply minimum charges per service
4. **Rounding**: Round monetary values to 2 decimal places
5. **Edge cases**: Handle zero values, negative inputs, and extreme values
6. **Documentation**: Document all calculation formulas in calculator classes
7. **Testing**: Test calculations with known good values in __tests__/
8. **Consistency**: Use consistent units throughout (hours, sq ft, etc.)
9. **Multipliers**: Apply multipliers in documented order (material, labor, equipment, markup)
10. **Error reporting**: Provide clear error messages for invalid inputs
11. **Service Layer**: Use calculator-service.ts for business logic
12. **Real-time Updates**: Implement live calculation updates as users input data

## COMMON PATTERNS TO AVOID

- Don't use `any` type - use proper TypeScript types
- Don't mutate props directly - use immutable patterns
- Don't use inline styles (use Tailwind classes)
- Don't hardcode values (use constants from lib/constants/)
- Don't skip error handling - use service layer error handling
- Don't use useEffect for calculations - use real-time calculation patterns
- Don't put business logic in components - use service layer
- Don't forget to handle loading states - use lazy loading patterns
- Don't skip input validation - use Zod schemas
- Don't use console.log in production code - use proper logging
- Don't bypass AI security validation - always use ai-security.ts
- Don't ignore caching opportunities - use AI and database caching
- Don't create components without lazy loading when appropriate

## PREFERRED PATTERNS

- Use custom hooks for reusable logic (see hooks/ directory)
- Use composition over inheritance
- Use proper TypeScript generics and strict typing
- Use meaningful variable names following naming conventions
- Use early returns to reduce nesting
- Use comprehensive error boundaries with service layer integration
- Use React Query for server state with proper invalidation
- Use Zod for validation with detailed schemas
- Use constants for magic numbers (lib/calculations/constants.ts)
- Use proper loading and error states with lazy loading
- Use the service layer for all business logic operations
- Use AI caching for expensive AI operations
- Use database optimization utilities for performance
- Use transaction support for complex database operations
- Use lazy loading for components and forms to improve performance

## DEVELOPMENT WORKFLOW

### Key Commands
- `npm run dev` - Start development server with hot reload
- `npm run typecheck` - TypeScript type checking (run before commits)
- `npm run lint` - ESLint with zero warnings policy
- `npm run fmt` - Prettier formatting
- `npm run build` - Production build
- `node scripts/production-check.js` - Verify production readiness

### Database Management
- `node scripts/setup-basic-schema.js` - Initialize database schema
- `node scripts/run-migration.js` - Run database migrations
- `node scripts/run-transaction-migration.js` - Add transaction support
- `node scripts/test-analytics.js` - Test analytics functionality

## ABSOLUTE PROHIBITIONS (NEVER DO THESE)

❌ **NEVER create new files without explicit justification**
❌ **NEVER use `any` type - use proper TypeScript types**
❌ **NEVER put business logic in React components**
❌ **NEVER call database directly from components**
❌ **NEVER call AI APIs directly from components**
❌ **NEVER skip input validation**
❌ **NEVER ignore error handling**
❌ **NEVER hardcode values - use constants**
❌ **NEVER use default exports**
❌ **NEVER skip lazy loading for calculator forms**
❌ **NEVER bypass the service layer**
❌ **NEVER create duplicate functionality**

## MANDATORY PATTERNS (ALWAYS DO THESE)

✅ **ALWAYS check for existing similar functionality first**
✅ **ALWAYS use the service layer for business logic**
✅ **ALWAYS validate inputs with Zod schemas**
✅ **ALWAYS use proper TypeScript types**
✅ **ALWAYS implement error boundaries**
✅ **ALWAYS use AI caching for expensive operations**
✅ **ALWAYS follow the import organization rules**
✅ **ALWAYS use named exports**
✅ **ALWAYS run typecheck and lint before changes**
✅ **ALWAYS use transaction support for database operations**
✅ **ALWAYS use lazy loading for performance**
✅ **ALWAYS follow the existing code patterns exactly**

## DECISION TREE FOR CURSOR AI

**When adding new functionality:**
1. First: Search for existing similar functionality
2. If exists: Extend/modify existing code
3. If not exists: Create minimal new code following all patterns above
4. Always: Use service layer for business logic
5. Always: Add proper error handling and validation
6. Always: Follow the established architecture patterns

**When modifying existing code:**
1. Understand the existing pattern first
2. Follow the same patterns exactly
3. Don't introduce new patterns without justification
4. Maintain consistency with surrounding code
5. Keep changes minimal and focused

This file should be updated as the project evolves and new patterns emerge.